//==================================================================================================
// 
// Generated Map Script
// 
// Name:   [Probes vs Zealot 2 I (TEST)]
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_achievementMax = 128;
const string gv_gameplayOptionsBanksOptionsSection = "GameplayOptions";
const string gv_gameplayOptionsBanksPlayerSection = "PlayerOptions";
const int gv_numberofZealotAchievements = 77;
const int gv_numberofProbeAchievements = 82;
const int gv_numberofCommonAchievements = 48;
const int gv_numberofRewards = 32;

const int gv_MaxPlayers = 15;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_BanksAchievementsVampire {
    string[121] lv_achievementEarned;
};

struct gs_BanksAchievementsHuman {
    string[121] lv_achievementEarned;
};

struct gs_BanksAchievementsCommon {
    string[121] lv_achievementEarned;
};

struct gs_BanksRewards {
    string[121] lv_rewardsUnlocked;
};

struct gs_BanksHumanStats {
    string lv_games;
    string lv_wins;
    string lv_losses;
    string lv_points;
    string lv_rank;
    string lv_xP;
    string lv_winningStreak;
    string lv_hours;
    string lv_killedVampires;
};

struct gs_BanksVampireStats {
    string lv_games;
    string lv_wins;
    string lv_losses;
    string lv_points;
    string lv_rank;
    string lv_xP;
    string lv_winningStreak;
    string lv_hours;
    string lv_killedBuilders;
    string lv_killedSlayers;
    string lv_killedUnits;
};

struct gs_BanksTotalStats {
    string lv_games;
    string lv_wins;
    string lv_losses;
    string lv_points;
    string lv_rank;
    string lv_xP;
    string lv_winningStreak;
    string lv_hours;
};

struct gs_BanksPlayerInfo {
    string lv_playerHandle;
    string lv_playerName;
};

struct gs_BanksPreviousGameStats {
    string lv_pointsLostHuman;
    string lv_pointsLostVampire;
    string lv_pointsLostTotal;
    string lv_pointsWinHuman;
    string lv_pointsWinVampire;
    string lv_pointsWinTotal;
    string lv_xPGotHuman;
    string lv_xPGotVampire;
    string lv_xPGotTotal;
    string lv_isHuman;
    string lv_firstTime;
    string lv_winPreviousGame;
};

struct gs_BanksKeys {
    gs_BanksHumanStats lv_humanStats;
    gs_BanksVampireStats lv_vampireStats;
    gs_BanksTotalStats lv_totalStats;
    gs_BanksPlayerInfo lv_playerInfo;
    gs_BanksPreviousGameStats lv_previousGameStats;
    gs_BanksAchievementsCommon lv_achievementsCommon;
    gs_BanksAchievementsHuman lv_achievementsHuman;
    gs_BanksAchievementsVampire lv_achievementsVampire;
    gs_BanksRewards lv_rewards;
};

struct gs_BanksSections {
    string lv_humanStats;
    string lv_vampireStats;
    string lv_totalStats;
    string lv_playerInfo;
    string lv_achievmentsCommon;
    string lv_achievmentsHuman;
    string lv_achievmentsVampire;
    string lv_previousGameStats;
    string lv_rewards;
};

struct gs_Achievement {
    bool lv_active;
    string lv_name;
    string lv_text;
    string lv_image;
    int lv_points;
};

struct gs_GameplayOptionsBanksOptionsKeys {
    string lv_autoCastRepairAbility;
    string lv_autoCastVoidPrisonAbility;
    string lv_saveProbeSkin;
    string lv_saveScaleofProbeSkin;
    string lv_saveColorofProbeSkin;
    string lv_saveNameofProbeSkin;
    string lv_saveZealotSkin;
    string lv_saveColorofZealotSkin;
    string lv_saveNameofZealotSkin;
    string lv_saveZoomSettings;
    string lv_saveProbePopUp;
    string lv_saveZealotPopUp;
    string lv_saveZealotSuggested;
    string lv_saveNinjaOnOff;
    string lv_forceDisplayBuffDialog;
    string lv_buffDialogSuppressedMsgCount;
    string lv_autoShowCustomRank;
};

struct gs_GameplayOptionsBanksPlayerKeys {
    string lv_probeSkin;
    string lv_probeSkinName;
    string lv_scaleofProbeSkin;
    string lv_colorofProbeSkin;
    string lv_nameofProbeSkin;
    string lv_zealotSkin;
    string lv_zealotSkinName;
    string lv_colorofZealotSkin;
    string lv_nameofZealotSkin;
    string lv_zoomSettings;
    string lv_probeAbility1;
    string lv_probeAbility2;
    string lv_probePopUp;
    string lv_zealotPopUp;
    string lv_zealotSuggested;
    string lv_ninjaOnOff;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_AchievementRace_Terran = 0;
const int ge_AchievementRace_Zerg = 1;
const int ge_AchievementRace_Protoss = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
text gv_version;
bool gv_dEBUGMODE;
unit gv_dEBUGUNIT;
bool gv_mTthing;
bool gv_mTlookundertree;
bool gv_mTgetmysterybox;
bool gv_mTopenthebox;
bool gv_mTgetcode;
bool gv_mTruncode;
bool gv_mTrunGalScript;
bool gv_mTcheckModelSkin;
bool gv_mTshowSkin;
bool gv_mTreadtatts;
bool gv_mTwhatsthecode;
bool gv_ultraWall;
bool gv_megaWall;
bool gv_powerWall;
bool gv_finalWall;
bool gv_turretLevel7;
bool gv_turretLevel11;
bool gv_turretLevel13;
bool gv_turretLevelFinal;
bool gv_ultraMiner;
bool gv_legendaryMiner;
bool gv_perfectMiner;
bool gv_ludicrousMiner;
bool gv_mineralFieldMinedOut;
bool gv_dominionTrain;
bool gv_genMax;
bool gv_buildaAutomatedMineLevel6;
bool gv_buildaAutomatedMineLevel7;
bool gv_buildaAutomatedMineLevel8;
bool gv_zealotVespene;
bool gv_zealotFinalBlade;
unit[17] gv_probes;
unit[17] gv_zealots;
unit[17] gv_zealotsTemp;
unit[17] gv_probeSpirit;
unitgroup gv_lavaCritters;
unitgroup gv_lavaCrittersTarget;
bool gv_startRecording;
bank[17] gv_banks;
gs_BanksKeys gv_banksStats;
gs_BanksSections gv_banksSections;
timer gv_lavaCritterRemovalTimer;
timer gv_voteTimerRegame;
timer gv_spawnVampires;
int gv_spawnVampiresWindow;
timer[17] gv_timerRemove;
timer gv_timerEnableTrading;
timer gv_timerDisableEarlyVision;
timer gv_timerChooseHelpSide;
timer[17] gv_timerProbeSpiritDies;
int[17] gv_timerWindowProbeSpiritDies;
timer[17] gv_timerHunterDies;
int[17] gv_timerWindowHunterDies;
int gv_timerWindowChooseHelpSide;
timer gv_timerAsktoAllowHunter;
int[17] gv_pointsHuman;
int[17] gv_pointsVampire;
int[17] gv_pointsTotal;
int[17] gv_pointsforWinHuman;
int[17] gv_pointsforWinTotal;
int[17] gv_pointsforWinVampire;
int[17] gv_pointsforLossHuman;
int[17] gv_pointsforLossTotal;
int[17] gv_pointsforLossVampire;
int gv_pointsAverageHuman;
int gv_versionDialog;
int[17] gv_agilityPoints;
int[17] gv_armorPoints;
int[17] gv_negativeArmorPoints;
int gv_startMineralsHuman;
int gv_startMineralsZealot;
int gv_startVespeneHuman;
int gv_startVespeneZealot;
int gv_startTerrazineHuman;
int gv_startTerrazineZealot;
bool[17] gv_slayerDied;
bool[17] gv_playerAudioCmdGG;
text[15] gv_playerCustomRank;
bool[15] gv_playerCustomRankDisplay;
bool[17] gv_diedontheDamnLand;
int[17] gv_humanNumberPlayer;
int[17] gv_vampireNumberPlayer;
int[17] gv_statsLeaderboard;
int[17] gv_feed;
int[17] gv_rowofPlayer;
int[16] gv_colorNumberofPlayer;
int[17] gv_xPinGameforHuman;
int[17] gv_xPinGameforVampire;
int[17] gv_xPinGameforTotal;
int[17] gv_levelofPlayerHuman;
int[17] gv_levelofPlayerVampire;
int[17] gv_levelofPlayerTotal;
int[17] gv_xPofPlayerHuman;
int[17] gv_xPofPlayerVampire;
int[17] gv_xPofPlayerTotal;
bool[17] gv_probeDead;
bool[17] gv_probeSpiritStatus;
bool[17] gv_hunterStatus;
camerainfo[17] gv_cameras;
bool[17] gv_bankisInvalid;
bool gv_soloMode;
int gv_maxHuntersAllowed;
bool gv_gameEnd;
int gv_leaderboard;
int gv_playersUsedforAverageProbePoints;
int gv_gameTimeMinutes;
int gv_gameTimeSeconds;
text gv_gameTimeMinutesText;
int gv_totalFeed;
int gv_totalFeedRowLeaderboard;
string[17] gv_side;
playergroup gv_playerGroupZealots;
playergroup gv_playerGroupProbes;
playergroup gv_playerGroupHunters;
bool gv_rankedGame;
int[201] gv_xPTable;
point gv_centerPoint;
int gv_chosenMap;
bool gv_probesWins;
bool gv_regame;
fixed gv_spawnVampiresTime;
fixed gv_asktoAllowHunterTime;
fixed gv_voteTime;
fixed gv_voteTimeShort;
int gv_uidialog;
int gv_recommendedMap;
timer gv_voteTimerMap;
int gv_largeswitch;
int gv_chaosswitch;
bool gv_setMapCmdIssued;
playergroup gv_setMapCmdPlayer;
int gv_setMapCmd;
int gv_timescalemode;
fixed gv_timescalevalue;
timer gv_voteTimerTimescale;
bool gv_setSpeedCmdIssued;
playergroup gv_setSpeedCmdPlayer;
timer gv_voteTimerSide;
bool gv_setSideCmdIssued;
playergroup gv_setSideCmdPlayer;
int gv_setSideMakeZealot;
timer gv_voteTimerHunter;
int[17] gv_votePlayerValue;
int gv_voteBoard;
int gv_maxMaps1;
int[13] gv_voteButtonDialogItem;
int[13] gv_voteTextDialogItem;
int[13] gv_votesCountButton;
int gv_progressBar;
fixed[17] gv_winrate;
fixed[17] gv_wins;
fixed[17] gv_probewins;
fixed[17] gv_probewinrate;
int gv_regameVoteBoard;
bool gv_regameDecisioninProgress;
int gv_regamePlayerTextItem;
int gv_regamePlayerCountItem;
int gv_regameLeaveButton;
int gv_premiumzswitch;
playergroup gv_premiumZealots;
bool gv_barIsOpen;
int[15] gv_barMessagesForPlayer;
bool[15] gv_barPlayerHasInvite;
int gv_unInvitedPlayersAtEntrance;
int[17] gv_resourcePerSecond;
bool gv_resourcesPerSecondInitComplete;
fixed[17] gv_zgas;
fixed[17] gv_gas;
fixed[17] gv_gas2;
fixed[17] gv_minerals;
fixed[17] gv_minerals2;
int[17][17] gv_gatheredMinsMatrix;
int gv_perSecondIntervalTicker;
int[17][17] gv_gatheredGasMatrix;
int[17] gv_gatheredMinsLastRecorded;
int[17] gv_gatheredMinsCurrent;
int[17] gv_gatheredGasLastRecorded;
int[17] gv_perSecondHistoryGas1;
int[17] gv_perSecondHistoryGas2;
int[17] gv_perSecondHistoryMin1;
int[17] gv_perSecondHistoryMin2;
int[17] gv_gatheredGasCurrent;
fixed[17] gv_gatheredTimeStampRecorded;
fixed[17] gv_gatheredTimeStampCurrent;
int[17] gv_gasdiaitem;
int[17] gv_buffIcondiaitem;
int[17] gv_buffGendiaitem;
int[17] gv_buffMinerdiaitem;
int[17] gv_mindiaitem;
int[17] gv_hunterdiaitem;
int[17] gv_golddiaitem;
int[17] gv_turretbuffstacks;
int[17] gv_turretstackscount;
int[17] gv_totalturretpoints;
int[17] gv_totalpointsrequired;
int[17] gv_ninjaonorofflabel;
int[17] gv_currentfeedgaugeamount;
text gv_gametimeText1;
text gv_gametimeText2;
text gv_gametimeText3;
text gv_gametimeText4;
text gv_gametimeText5;
text gv_gametimeText6;
text gv_gametimeText7;
text gv_gametimeText8;
text gv_nBuffText1;
text gv_nBuffText2;
text gv_nBuffIcon;
text gv_tBuffIcon;
text gv_tBuffText1;
text gv_tBuffText2;
text gv_tBuffText3;
text gv_tBuffText4;
text gv_tBuffText5;
text gv_tBuffText6;
text gv_tBuffText7;
text gv_tBuffText8;
int[17] gv_ninjaBuffActiveFlag;
int[16] gv_announceswitch;
int gv_ninjadialog;
int gv_ninjadialog2;
int gv_basedialog;
int gv_basedialog2;
int[17] gv_turretcount;
int[17] gv_t1;
int[17] gv_t2;
int[17] gv_t3;
int[17] gv_t4;
int[17] gv_t5;
int[17] gv_t6;
int[17] gv_t7;
int[17] gv_t8;
int[17] gv_t9;
int[17] gv_t10;
int[17] gv_t11;
int[17] gv_t12;
int[17] gv_t13;
int[17] gv_probepopup;
int[17] gv_probepopuplabel;
int[17] gv_popupswitch3;
int[17] gv_closewindow4;
int[17] gv_closewindow3;
int[17] gv_disablepopup3;
int[17] gv_poplevel;
int gv_zealotpopup;
int gv_closewindow;
int gv_closewindow2;
int gv_disablepopup;
int gv_disablepopup2;
int gv_zpopuplabel;
int gv_popupswitch;
int gv_popupswitch2;
int[17] gv_showhideui;
int[17][17] gv_menuswitch;
int[17] gv_buttonsdialog;
int[17] gv_menu1;
int[17] gv_helpdialog;
int[17] gv_helplabel;
int[17][17] gv_helpclose;
int[17][17] gv_helpclose2;
int[17] gv_page1;
int[17] gv_page2;
int[17] gv_page3;
int[17] gv_page4;
int[17] gv_page5;
int[17] gv_page6;
int[17] gv_page7;
int[17] gv_page8;
int[17] gv_page9;
int[17][10] gv_listitems;
int[17] gv_playersLabelRanks;
bool[17] gv_labelRankStatus;
fixed gv_achievementFadeInTime;
fixed gv_achievementStayTime;
fixed gv_achievementFadeOutTime;
soundlink gv_achievementPlaySound;
int gv_achievementsQueueSize;
gs_Achievement[4][129] gv_achievements;
bool[16][6] gv_achievementsQueue;
bool[17] gv_gameplayOptionsBankIsExist;
bank[17] gv_gameplayOptionsBanks;
gs_GameplayOptionsBanksOptionsKeys gv_gameplayOptionsBanksOptionsKeys;
int gv_autoCastRepairAbility;
int gv_autoCastVoidPrisonAbility;
int gv_saveProbeSkin;
int gv_saveScaleofProbeSkin;
int gv_saveColorofProbeSkin;
int gv_saveNameofProbeSkin;
int gv_saveZealotSkin;
int gv_saveColorofZealotSkin;
int gv_saveNameofZealotSkin;
int gv_saveZoomSettings;
int gv_saveProbePopUp;
int gv_saveZealotPopUp;
int gv_saveZealotSuggested;
int gv_saveNinjaOnOff;
int gv_forceDisplayBuffDialog;
int gv_buffDialogSuppressedMsgCount;
int gv_autoShowCustomRank;
gs_GameplayOptionsBanksPlayerKeys gv_gameplayOptionsBanksPlayerKeys;
int gv_gameplayOptionsDialog;
int gv_gameplayOptionsMainDialog;
int gv_gameplayOptionsButton;
int gv_otherOptions;
int gv_automaticallysavedatainreservebankeach3games;
int gv_default;
int gv_returntoGame;
int gv_restoredatafromreservebank;
int gv_savedatainreservebank;
int gv_xPBarDialog;
int gv_xPBarProgressBar;
int gv_xPBarLabel;
int gv_marketPricesDialog;
int gv_marketPricesBuyMinerals;
int gv_marketPricesSellMinerals;
int gv_buy10MineralsPrice;
int gv_sell10MineralsPrice;
int gv_chooseHelpSideDialog;
int gv_chooseHelpSideProbe;
int gv_chooseHelpSideZealot;
int gv_chooseHelpSideObserver;
bool[17] gv_choosed;
timer[17] gv_hunterspawntimer;
int[17] gv_hunterspawnwindow;
int gv_closevoteboard;
int gv_voteKickDialogMain;
int[17] gv_voteKickDialogKickType;
int gv_voteKickDialog;
int gv_voteKickButton;
int[17] gv_voteKickPlayers;
int gv_voteKickVoteBoard;
text gv_voteKickVoteBoardTitle;
int gv_voteKickVoteBoardYes;
int gv_voteKickVoteBoardNo;
int gv_voteKickVoteBoardYesLabel;
int gv_voteKickVoteBoardNoLabel;
int gv_voteKickVoteBoardRequiredVotes;
int gv_voteKickVoteBoardTimerLabel;
bool[17] gv_voteKickVoteBoardVotedAlready;
bool gv_voteKickVoteBoardStarted;
int[17] gv_voteKickNoobKick;
int[17] gv_voteKickStandardKick;
int[17] gv_voteKickFeederKick;
int gv_numberofVotesYes;
int gv_numberofVotesNo;
timer gv_kickVoteTimer;
int gv_kickedPlayer;
int[17] gv_targetPlayer;
int gv_kickerPlayer;
fixed gv_kickTimerTime;
timer[17] gv_voteKickCooldown;
bool[17] gv_voteKickCooldownExpired;
int[17] gv_voteKickValue;
int[17] gv_requiredVotes;
int gv_kickType;
int gv_numberofPlayersinKickBoard;
int[121] gv_profileRewardsButtons;
int[121] gv_profileCommonAchievementsButtons;
int[121] gv_profileHumanAchievementsButtons;
int[121] gv_profileVampireAchievementsButtons;
int gv_numberofProfileAchievementButton;
int[4] gv_profileAchievementsButtons;
int[5] gv_profileButtons;
int gv_profileCloseButton;
int[5] gv_profileDialogText;
int gv_profileDialogWorkArea;
int gv_profileDialogButtonArea;
int gv_profileDialog;
int gv_profileDialogMain;
int gv_numberofProfileButton;
int gv_profileButton;
int[121] gv_profileRewardsImage;
int[121] gv_profileCommonAchievementsImage;
int[121] gv_profileHumanAchievementsImage;
int[121] gv_profileVampireAchievementsImage;
int gv_profileDialogNameofPlayer;
int gv_progressBarAchievements;
int gv_progressBarName;
int gv_progressBarPercent;
int gv_width;
int gv_height;
int gv_xoffset;
int gv_yoffset;
int gv_yInc;
int[17] gv_currentPressedProfileButton;
int[17] gv_currentPressedProfileAchievementButton;
int[17] gv_profileofPlayer;
string[17] gv_currentProfileSection;
int[17] gv_numberofKilledHumans;
bool[17] gv_playerWin;
int gv_averageRow;
fixed gv_missionTime;
bool[17] gv_aFKPlayer;
bool[17] gv_aFKDetectInProgress;
timer gv_aFKDetectTimer;
bool gv_aFKTimerRunning;
int gv_notifyDialogOneGroup;
int[5] gv_notifyDialogOGitem;
int gv_lavaStatueKiller;
unit gv_lavaStatueKillersUnit;
int gv_penguinsCameOnMeteors;
int gv_stage;
int gv_aIPlayerNumber;
unit gv_mineralFieldMiner;
region gv_regionAI;
bool[17] gv_ultraWallAchievement;
bool[17] gv_megaWallAchievement;
bool[17] gv_powerWallAchievement;
bool[17] gv_finalWallAchievement;
bool[17] gv_turretLevel7Achievement;
bool[17] gv_turretLevel11Achievement;
bool[17] gv_turretLevel13Achievement;
bool[17] gv_ultraMinerAchievement;
bool[17] gv_legendaryMinerAchievement;
bool[17] gv_perfectMinerAchievement;
bool[17] gv_genMaxAchievement;
bool[17] gv_buildaAutomatedMineLevel6Achievement;
bool[17] gv_buildaAutomatedMineLevel7Achievement;
bool[17] gv_buildaAutomatedMineLevel8Achievement;
bool[17] gv_purchaseUltimateBlade;
bool[17] gv_purchaseSuperGloves;
bool[17] gv_purchaseNanocrystallineDiamondArmor;
bool[17] gv_purchaseDiamondAmulet;
bool[17] gv_purchaseUltimateRegenerationPotion;
bool gv_enableTrading;
int[17] gv_flag;
int[17] gv_ownerofSelectedUnit;
int[17] gv_damage;
bool[17] gv_nameisSetProbe;
bool[17] gv_nameisSetZealot;
int[17] gv_probeModel;
int[17] gv_zealotModel;
int[17] gv_observedInventoryDialog;
int[17][7] gv_observedInventoryItems;
int[17] gv_learnedAbilities;
abilcmd[3][6] gv_arrayLearnAbilities;
int[17] gv_ninjaonoff;
int gv_suggesteddialog;
unit gv_zShop;

// Final's work

unit gv_Raynor = UnitFromId(1182);
point gv_RaynorPoint = UnitGetPosition(gv_Raynor);

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i2;

    gv_version = StringExternal("Param/Value/CC4C46C9");
    gv_mTthing = true;
    gv_lavaCritters = UnitGroupEmpty();
    gv_lavaCrittersTarget = UnitGroupEmpty();
    gv_banksStats.lv_humanStats.lv_games = "Games";
    gv_banksStats.lv_humanStats.lv_wins = "Wins";
    gv_banksStats.lv_humanStats.lv_losses = "Losses";
    gv_banksStats.lv_humanStats.lv_points = "Points";
    gv_banksStats.lv_humanStats.lv_rank = "Rank";
    gv_banksStats.lv_humanStats.lv_xP = "XP";
    gv_banksStats.lv_humanStats.lv_winningStreak = "WinningStreak";
    gv_banksStats.lv_humanStats.lv_hours = "Hours";
    gv_banksStats.lv_humanStats.lv_killedVampires = "KilledVampires";
    gv_banksStats.lv_vampireStats.lv_games = "Games";
    gv_banksStats.lv_vampireStats.lv_wins = "Wins";
    gv_banksStats.lv_vampireStats.lv_losses = "Losses";
    gv_banksStats.lv_vampireStats.lv_points = "Points";
    gv_banksStats.lv_vampireStats.lv_rank = "Rank";
    gv_banksStats.lv_vampireStats.lv_xP = "XP";
    gv_banksStats.lv_vampireStats.lv_winningStreak = "WinningStreak";
    gv_banksStats.lv_vampireStats.lv_hours = "Hours";
    gv_banksStats.lv_vampireStats.lv_killedBuilders = "KilledBuilders";
    gv_banksStats.lv_vampireStats.lv_killedSlayers = "KilledSlayers";
    gv_banksStats.lv_vampireStats.lv_killedUnits = "KilledUnits";
    gv_banksStats.lv_totalStats.lv_games = "Games";
    gv_banksStats.lv_totalStats.lv_wins = "Wins";
    gv_banksStats.lv_totalStats.lv_losses = "Losses";
    gv_banksStats.lv_totalStats.lv_points = "Points";
    gv_banksStats.lv_totalStats.lv_rank = "Rank";
    gv_banksStats.lv_totalStats.lv_xP = "XP";
    gv_banksStats.lv_totalStats.lv_winningStreak = "WinningStreak";
    gv_banksStats.lv_totalStats.lv_hours = "Hours";
    gv_banksStats.lv_playerInfo.lv_playerHandle = "PlayerHandle";
    gv_banksStats.lv_playerInfo.lv_playerName = "PlayerName";
    gv_banksStats.lv_previousGameStats.lv_pointsLostHuman = "PointsLostHuman";
    gv_banksStats.lv_previousGameStats.lv_pointsLostVampire = "PointsLostVampire";
    gv_banksStats.lv_previousGameStats.lv_pointsLostTotal = "PointsLostTotal";
    gv_banksStats.lv_previousGameStats.lv_pointsWinHuman = "PointsWinHuman";
    gv_banksStats.lv_previousGameStats.lv_pointsWinVampire = "PointsWinVampire";
    gv_banksStats.lv_previousGameStats.lv_pointsWinTotal = "PointsWinTotal";
    gv_banksStats.lv_previousGameStats.lv_xPGotHuman = "XPGotHuman";
    gv_banksStats.lv_previousGameStats.lv_xPGotVampire = "XPGotVampire";
    gv_banksStats.lv_previousGameStats.lv_xPGotTotal = "XPGotTotal";
    gv_banksStats.lv_previousGameStats.lv_isHuman = "IsHuman";
    gv_banksStats.lv_previousGameStats.lv_firstTime = "FirstTime";
    gv_banksStats.lv_previousGameStats.lv_winPreviousGame = "WinPreviousGame";
    for (init_i2 = 0; init_i2 <= 120; init_i2 += 1) {
        gv_banksStats.lv_achievementsCommon.lv_achievementEarned[init_i2] = "AchievementEarned";
    }
    for (init_i2 = 0; init_i2 <= 120; init_i2 += 1) {
        gv_banksStats.lv_achievementsHuman.lv_achievementEarned[init_i2] = "AchievementEarned";
    }
    for (init_i2 = 0; init_i2 <= 120; init_i2 += 1) {
        gv_banksStats.lv_achievementsVampire.lv_achievementEarned[init_i2] = "AchievementEarned";
    }
    for (init_i2 = 0; init_i2 <= 120; init_i2 += 1) {
        gv_banksStats.lv_rewards.lv_rewardsUnlocked[init_i2] = "RewardsUnlocked";
    }
    gv_banksSections.lv_humanStats = "HumanStats";
    gv_banksSections.lv_vampireStats = "VampireStats";
    gv_banksSections.lv_totalStats = "TotalStats";
    gv_banksSections.lv_playerInfo = "PlayerInfo";
    gv_banksSections.lv_achievmentsCommon = "Achievments";
    gv_banksSections.lv_achievmentsHuman = "AchievmentsHuman";
    gv_banksSections.lv_achievmentsVampire = "AchievmentsVampire";
    gv_banksSections.lv_previousGameStats = "PreviousGameStats";
    gv_banksSections.lv_rewards = "Rewards";
    gv_lavaCritterRemovalTimer = TimerCreate();
    gv_voteTimerRegame = TimerCreate();
    gv_spawnVampires = TimerCreate();
    gv_spawnVampiresWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_timerRemove[init_i] = TimerCreate();
    }
    gv_timerEnableTrading = TimerCreate();
    gv_timerDisableEarlyVision = TimerCreate();
    gv_timerChooseHelpSide = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_timerProbeSpiritDies[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_timerWindowProbeSpiritDies[init_i] = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_timerHunterDies[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_timerWindowHunterDies[init_i] = c_timerWindowNone;
    }
    gv_timerWindowChooseHelpSide = c_timerWindowNone;
    gv_timerAsktoAllowHunter = TimerCreate();
    gv_versionDialog = c_invalidDialogId;
    gv_startMineralsZealot = 75;
    gv_startVespeneHuman = 30;
    gv_startTerrazineHuman = 2;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_statsLeaderboard[init_i] = c_boardNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_xPinGameforTotal[init_i] = 100;
    }
    gv_maxHuntersAllowed = 2;
    gv_leaderboard = c_boardNone;
    gv_gameTimeMinutesText = StringExternal("Param/Value/7818816B");
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_side[init_i] = "Probe";
    }
    gv_playerGroupZealots = PlayerGroupEmpty();
    gv_playerGroupProbes = PlayerGroupEmpty();
    gv_playerGroupHunters = PlayerGroupEmpty();
    gv_spawnVampiresTime = 40.0;
    gv_asktoAllowHunterTime = 10.0;
    gv_voteTime = 10.0;
    gv_voteTimeShort = 5.0;
    gv_uidialog = c_invalidDialogControlId;
    gv_voteTimerMap = TimerCreate();
    gv_setMapCmdPlayer = PlayerGroupEmpty();
    gv_timescalemode = 1;
    gv_timescalevalue = 1.0;
    gv_voteTimerTimescale = TimerCreate();
    gv_setSpeedCmdPlayer = PlayerGroupEmpty();
    gv_voteTimerSide = TimerCreate();
    gv_setSideCmdPlayer = PlayerGroupEmpty();
    gv_setSideMakeZealot = -1;
    gv_voteTimerHunter = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_votePlayerValue[init_i] = -1;
    }
    gv_voteBoard = c_invalidDialogId;
    gv_maxMaps1 = 12;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_voteButtonDialogItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_voteTextDialogItem[init_i] = c_invalidDialogControlId;
    }
    gv_progressBar = c_invalidDialogControlId;
    gv_regameVoteBoard = c_invalidDialogId;
    gv_regamePlayerTextItem = c_invalidDialogControlId;
    gv_regamePlayerCountItem = c_invalidDialogControlId;
    gv_regameLeaveButton = c_invalidDialogControlId;
    gv_premiumZealots = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_resourcePerSecond[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_gasdiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_buffIcondiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_buffGendiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_buffMinerdiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_mindiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_hunterdiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_golddiaitem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_turretbuffstacks[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_totalturretpoints[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_totalpointsrequired[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_ninjaonorofflabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_currentfeedgaugeamount[init_i] = c_invalidDialogControlId;
    }
    gv_gametimeText1 = StringExternal("Param/Value/36E2157C");
    gv_gametimeText2 = StringExternal("Param/Value/430B240D");
    gv_gametimeText3 = StringExternal("Param/Value/F1F8A0C1");
    gv_gametimeText4 = StringExternal("Param/Value/CD7E56C0");
    gv_gametimeText5 = StringExternal("Param/Value/0212C009");
    gv_gametimeText6 = StringExternal("Param/Value/0FCCDDD7");
    gv_gametimeText7 = StringExternal("Param/Value/CD9DE418");
    gv_gametimeText8 = StringExternal("Param/Value/A1A8280C");
    gv_nBuffText1 = StringExternal("Param/Value/BEF986EC");
    gv_nBuffText2 = StringExternal("Param/Value/7BC4A16F");
    gv_nBuffIcon = StringExternal("Param/Value/E041FF8E");
    gv_tBuffIcon = StringExternal("Param/Value/F0F015C6");
    gv_tBuffText1 = StringExternal("Param/Value/7BDA93D5");
    gv_tBuffText2 = StringExternal("Param/Value/9B6655E7");
    gv_tBuffText3 = StringExternal("Param/Value/C081E5CB");
    gv_tBuffText4 = StringExternal("Param/Value/C881214C");
    gv_tBuffText5 = StringExternal("Param/Value/2DE758F1");
    gv_tBuffText6 = StringExternal("Param/Value/8F254DC5");
    gv_tBuffText7 = StringExternal("Param/Value/C35CB21B");
    gv_tBuffText8 = StringExternal("Param/Value/AA4BA44C");
    gv_ninjadialog = c_invalidDialogId;
    gv_ninjadialog2 = c_invalidDialogControlId;
    gv_basedialog = c_invalidDialogId;
    gv_basedialog2 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_probepopup[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_probepopuplabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_closewindow4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_closewindow3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_disablepopup3[init_i] = c_invalidDialogControlId;
    }
    gv_zealotpopup = c_invalidDialogId;
    gv_closewindow = c_invalidDialogControlId;
    gv_closewindow2 = c_invalidDialogControlId;
    gv_disablepopup = c_invalidDialogControlId;
    gv_disablepopup2 = c_invalidDialogControlId;
    gv_zpopuplabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_buttonsdialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_menu1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_helpdialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_helplabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            gv_helpclose[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            gv_helpclose2[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page7[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page8[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_page9[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 9; init_j += 1) {
            gv_listitems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_playersLabelRanks[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_labelRankStatus[init_i] = true;
    }
    gv_achievementFadeInTime = 1.0;
    gv_achievementStayTime = 10.0;
    gv_achievementFadeOutTime = 2.0;
    gv_achievementPlaySound = SoundLink("UI_Achievement", -1);
    gv_achievementsQueueSize = 5;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 128; init_j += 1) {
            gv_achievements[init_i][init_j].lv_name = "";
            gv_achievements[init_i][init_j].lv_text = "";
        }
    }
    gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility = "AutoCastRepairAbility";
    gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility = "AutoCastVoidPrisonAbility";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin = "SaveProbeSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin = "SaveScaleofProbeSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin = "SaveColorofProbeSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin = "SaveNameofProbeSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin = "SaveZealotSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin = "SaveColorofZealotSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin = "SaveNameofZealotSkin";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveZoomSettings = "SaveZoomSettings";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp = "SaveProbePopUp";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp = "SaveZealotPopUp";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested = "SaveZealotSuggested";
    gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff = "NinjaOnOff";
    gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog = "ForceDisplayBuffDialog";
    gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount = "BuffDialogSuppressedMsgCount";
    gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank = "AutoShowCustomRank";
    gv_autoCastRepairAbility = c_invalidDialogControlId;
    gv_autoCastVoidPrisonAbility = c_invalidDialogControlId;
    gv_saveProbeSkin = c_invalidDialogControlId;
    gv_saveScaleofProbeSkin = c_invalidDialogControlId;
    gv_saveColorofProbeSkin = c_invalidDialogControlId;
    gv_saveNameofProbeSkin = c_invalidDialogControlId;
    gv_saveZealotSkin = c_invalidDialogControlId;
    gv_saveColorofZealotSkin = c_invalidDialogControlId;
    gv_saveNameofZealotSkin = c_invalidDialogControlId;
    gv_saveZoomSettings = c_invalidDialogControlId;
    gv_saveProbePopUp = c_invalidDialogControlId;
    gv_saveZealotPopUp = c_invalidDialogControlId;
    gv_saveZealotSuggested = c_invalidDialogControlId;
    gv_saveNinjaOnOff = c_invalidDialogControlId;
    gv_forceDisplayBuffDialog = c_invalidDialogControlId;
    gv_autoShowCustomRank = c_invalidDialogControlId;
    gv_gameplayOptionsBanksPlayerKeys.lv_probeSkin = "ProbeSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_probeSkinName = "ProbeSkinName";
    gv_gameplayOptionsBanksPlayerKeys.lv_scaleofProbeSkin = "ScaleofProbeSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_colorofProbeSkin = "ColorofProbeSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_nameofProbeSkin = "NameofProbeSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkin = "ZealotSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkinName = "ZealotSkinName";
    gv_gameplayOptionsBanksPlayerKeys.lv_colorofZealotSkin = "ColorofZealotSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_nameofZealotSkin = "NameofZealotSkin";
    gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings = "ZoomSettings";
    gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility1 = "ProbeAbility1";
    gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility2 = "ProbeAbility2";
    gv_gameplayOptionsBanksPlayerKeys.lv_probePopUp = "ProbePopUp";
    gv_gameplayOptionsBanksPlayerKeys.lv_zealotPopUp = "ZealotPopUp";
    gv_gameplayOptionsBanksPlayerKeys.lv_zealotSuggested = "ZealotSuggested";
    gv_gameplayOptionsBanksPlayerKeys.lv_ninjaOnOff = "NinjaOnOff";
    gv_gameplayOptionsDialog = c_invalidDialogId;
    gv_gameplayOptionsMainDialog = c_invalidDialogId;
    gv_gameplayOptionsButton = c_invalidDialogControlId;
    gv_otherOptions = c_invalidDialogControlId;
    gv_automaticallysavedatainreservebankeach3games = c_invalidDialogControlId;
    gv_default = c_invalidDialogControlId;
    gv_returntoGame = c_invalidDialogControlId;
    gv_restoredatafromreservebank = c_invalidDialogControlId;
    gv_savedatainreservebank = c_invalidDialogControlId;
    gv_xPBarDialog = c_invalidDialogId;
    gv_xPBarProgressBar = c_invalidDialogControlId;
    gv_xPBarLabel = c_invalidDialogControlId;
    gv_marketPricesDialog = c_invalidDialogId;
    gv_marketPricesBuyMinerals = c_invalidDialogControlId;
    gv_marketPricesSellMinerals = c_invalidDialogControlId;
    gv_buy10MineralsPrice = 155;
    gv_sell10MineralsPrice = 145;
    gv_chooseHelpSideDialog = c_invalidDialogId;
    gv_chooseHelpSideProbe = c_invalidDialogControlId;
    gv_chooseHelpSideZealot = c_invalidDialogControlId;
    gv_chooseHelpSideObserver = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_hunterspawntimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_hunterspawnwindow[init_i] = c_timerWindowNone;
    }
    gv_closevoteboard = c_invalidDialogControlId;
    gv_voteKickDialogMain = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickDialogKickType[init_i] = c_invalidDialogId;
    }
    gv_voteKickDialog = c_invalidDialogId;
    gv_voteKickButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickPlayers[init_i] = c_invalidDialogControlId;
    }
    gv_voteKickVoteBoard = c_invalidDialogId;
    gv_voteKickVoteBoardYes = c_invalidDialogControlId;
    gv_voteKickVoteBoardNo = c_invalidDialogControlId;
    gv_voteKickVoteBoardYesLabel = c_invalidDialogControlId;
    gv_voteKickVoteBoardNoLabel = c_invalidDialogControlId;
    gv_voteKickVoteBoardRequiredVotes = c_invalidDialogControlId;
    gv_voteKickVoteBoardTimerLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickNoobKick[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickStandardKick[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickFeederKick[init_i] = c_invalidDialogControlId;
    }
    gv_kickVoteTimer = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickCooldown[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_voteKickCooldownExpired[init_i] = true;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileRewardsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileCommonAchievementsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileHumanAchievementsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileVampireAchievementsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_profileAchievementsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_profileButtons[init_i] = c_invalidDialogControlId;
    }
    gv_profileCloseButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_profileDialogText[init_i] = c_invalidDialogControlId;
    }
    gv_profileDialogWorkArea = c_invalidDialogId;
    gv_profileDialogButtonArea = c_invalidDialogId;
    gv_profileDialog = c_invalidDialogId;
    gv_profileDialogMain = c_invalidDialogId;
    gv_profileButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileRewardsImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileCommonAchievementsImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileHumanAchievementsImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 120; init_i += 1) {
        gv_profileVampireAchievementsImage[init_i] = c_invalidDialogControlId;
    }
    gv_profileDialogNameofPlayer = c_invalidDialogControlId;
    gv_progressBarAchievements = c_invalidDialogControlId;
    gv_progressBarName = c_invalidDialogControlId;
    gv_progressBarPercent = c_invalidDialogControlId;
    gv_width = 400;
    gv_height = 100;
    gv_yoffset = 70;
    gv_yInc = 70;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_currentPressedProfileAchievementButton[init_i] = 1;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_currentProfileSection[init_i] = "MainSection";
    }
    gv_missionTime = -1.0;
    gv_aFKDetectTimer = TimerCreate();
    gv_notifyDialogOneGroup = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_notifyDialogOGitem[init_i] = c_invalidDialogControlId;
    }
    gv_enableTrading = true;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_damage[init_i] = 5;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_probeModel[init_i] = 1;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_zealotModel[init_i] = 1;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_observedInventoryDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_observedInventoryItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_suggesteddialog = c_invalidDialogId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsDeveloper (int lp_playerNumber);
bool gf_PlayerIsModerator (int lp_playerNumber);
bool gf_PlayerIsModeratorLevel2 (int lp_playerNumber);
bool gf_PlayerIsModeratorLevelX (int lp_playerNumber);
bool gf_PlayerIsDonor (int lp_playerNumber);
bool gf_PlayerIsTROLL (int lp_playerNumber);
bool gf_PlayerIsAwaysKickable (int lp_playerNumber);
bool gf_PlayerIsTheWiseOne (int lp_playerNumber);
bool gf_PlayerHasCustomRank (int lp_playerNumber);
bool gf_PlayerHasObserverAccess (int lp_playerNumber);
void gf_ShowHideUnits (playergroup lp_players, bool lp_show);
void gf_DebugMessageMine ();
void gf_PrintInteger (int lp_integer);
void gf_PrintReal (fixed lp_real);
fixed gf_PvZ2Time (fixed lp_timeValue);
void gf_SetZealotSpeed (fixed lp_speed);
void gf_ResetHackedBank (int lp_triggeringPlayer);
void gf_FullPremiumProbe (int lp_playerNumber);
void gf_FullPremiumZealot (int lp_playerNumber);
void gf_CheckPremiumProbe ();
void gf_CheckPremiumZealot ();
void gf_CodeRegionOFF ();
void gf_CloseTheBar ();
void gf_OpenTheBar ();
void gf_ShowHideRanks (int lp_localPlayer);
void gf_CreateLabelProbeRank (int lp_playerNumber);
void gf_CreateLabelProbeSpiritRank (int lp_playerNumber);
void gf_CreateLabelHunterRank (int lp_playerNumber);
void gf_CreateLabelZealotRank (int lp_playerNumber);
int gf_PlaceInAchievementQueue (int lp_player);
void gf_UnlockAchievement (int lp_player, int lp_achievementId, int lp_race, int lp_type);
void gf_CreateAchievement (int lp_id, string lp_image, int lp_points, string lp_name, string lp_text, int lp_type);
void gf_SetAchievementSound (soundlink lp_soundLink);
void gf_SetAchievementTimers (fixed lp_fadeInTime, fixed lp_stayTime, fixed lp_fadeOutTime);
void gf_SetAchievementMaxNumber (int lp_maxAchievements);
void gf_ValidateGameplayOption (int lp_dialogItem, string lp_bankKey, int lp_playerNumber, bool lp_defaultSetting);
void gf_SetDefaultSettingsofGameplayOptions (int lp_triggeringPlayer, bool lp_resetAllValue);
void gf_GameplayOptionisChecked (int lp_dialogItem, string lp_bankKey, int lp_triggeringPlayer);
void gf_UpdateXPBar (int lp_triggeringPlayer);
int gf_NumberofPlayers ();
void gf_UpdateRequiredVotes ();
void gf_UpdateKickVotes (int lp_playerNumber);
void gf_UpdateKickBoard ();
void gf_CreateDialogItemProfileButton (int lp_dialog, int lp_width, int lp_height, int lp_xOffset, int lp_yOffset, text lp_text);
void gf_CreateDialogItemProfileAchievementButton (int lp_dialog, int lp_width, int lp_height, int lp_xOffset, int lp_yOffset, text lp_text);
void gf_UpdateandShowProfileofPlayer (int lp_triggeringPlayer, int lp_colorPlayerNumber);
void gf_ShowandUpdateProgressBar (int lp_triggeringPlayer, int lp_colorPlayerNumber, int lp_usedDialogItem);
void gf_ShowHideRewards (bool lp_showHide, int lp_playerNumber);
void gf_CommonAchievements ();
void gf_HumanAchievements ();
void gf_VampireAchievements ();
void gf_CheckKillBuilderAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofBuilders);
void gf_CheckKillProbeinGameAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofBuilders);
void gf_CheckKillVampireAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofVampires);
void gf_CheckReachLevelAchievement (int lp_playerNumber, int lp_achievementID, int lp_level, string lp_typeofAchievement);
void gf_CheckReachRankAchievement (int lp_playerNumber, int lp_achievementID, int lp_points, string lp_typeofAchievement);
void gf_CheckWinGamesAchievement (int lp_playerNumber, int lp_achievementID, int lp_games, string lp_typeofAchievement);
void gf_CheckWinningStreakAchievement (int lp_playerNumber, int lp_achievementID, int lp_winningStreak, string lp_typeofAchievement);
void gf_CheckPlayHoursAchievement (int lp_playerNumber, int lp_achievementID, int lp_minutes, string lp_typeofAchievement);
void gf_EnableDisableAchievement (int lp_achievementNumber, int lp_playerNumber, bool lp_enableDisable, string lp_typeofAchievement);
void gf_CheckStatusofAchievement (int lp_achievementID, int lp_playerNumber, string lp_typeofAchievement);
void gf_CreateProfileAchievement (int lp_dialog, int lp_offsetX, int lp_offsetY, text lp_text, int lp_achievementNumber, string lp_image, string lp_typeofAchievement);
bool gf_Lastsurvivedhuman (int lp_checkedPlayer);
void gf_CreateProfileReward (int lp_dialog, int lp_offsetX, int lp_offsetY, text lp_text, int lp_achievementNumber, string lp_image);
void gf_EnableDisableReward (int lp_achievementNumber, int lp_playerNumber, bool lp_enableDisable);
void gf_CheckStatusofReward (int lp_rewardID, int lp_playerNumber);
void gf_CheckProbeReward (int lp_playerNumber, int lp_rewardID, int lp_level);
void gf_CheckZealotReward (int lp_playerNumber, int lp_rewardID, int lp_level);
void gf_SetRankSkinAll (int lp_value, int lp_localPlayer);
void gf_InitLabelRanks ();
void gf_IncreaseNumberofGamesinBank ();
void gf_UpdateLeaderboardRanks ();
void gf_WritePreviousGameData ();
void gf_CalculatePreviousGameData (int lp_averagePointsHuman, int lp_averagePointsVampire, int lp_averagePointsTotal);
void gf_CalculateAveragePoints ();
void gf_CalculateAveragePointsOLD ();
void gf_UpdateStatsLeaderboard ();
void gf_CheckPreviousGame ();
void gf_CheckStatsofPlayers ();
void gf_CreateStatsLeaderboard ();
int gf_GetLevelofPlayer (int lp_xP);
int gf_CalculatePointsMinMaxforTime (int lp_calcualatedPoints, bool lp_playerAlive);
int gf_CalculatePointsMinMaxforTimeOLD (int lp_calcualatedPoints);
int gf_CalculatePointsforWin (int lp_pointsofPlayer, int lp_averagePoints);
int gf_CalculatePointsforLoss (int lp_pointsofPlayer, int lp_averagePoints);
string gf_CalculateRankColored (int lp_points, int lp_locPlayerNum);
string gf_CalculateRank (int lp_points);
void gf_WritePlayerInfo ();
void gf_GenerateXPTable ();
void gf_AFKDetectStart ();
void gf_AFKDetectDuration (int lp_duration);
void gf_AFKDetectStop ();
void gf_CheckStage (int lp_minerals, int lp_vespene, int lp_stage, string lp_pickedUnit, abilcmd lp_ability);
int gf_Create2x2Building (abilcmd lp_ability);
int gf_Create4x4Building (abilcmd lp_ability);
void gf_BonusXPtoProbe (int lp_triggeringPlayer);
void gf_BonusXPtoProbe5 (int lp_killingPlayer);
void gf_BonusXPtoZealot (int lp_triggeringPlayer);
void gf_BonusXPtoZealot5 (int lp_triggeringPlayer);
int gf_NumberofAliveVampires ();
int gf_NumberofAliveHumans ();
void gf_ProbesWins ();
void gf_ZealotWins ();
void gf_SplitResourcesHuman (int lp_playerNumber, int lp_numberofAliveHumans);
void gf_SplitResourcesVampire (int lp_playerNumber);
void gf_GiveResourcestoPlayer (int lp_triggeringPlayer, int lp_targetPlayer, int lp_resource, int lp_resourcesAdded);
void gf_ProbeDiesCheckAchievements (int lp_killingPlayer);
void gf_ProbeDiesResetVariables (int lp_deadProbePlayer);
void gf_ProbeDiesCreateHunter (int lp_hunterPlayer);
void gf_ProbeDiesCreateProbeSpirit (int lp_probeSpiritPlayer);
void gf_ProbeSpiritDiesReviveProbeSpirit (int lp_probeSpiritPlayer);
void gf_ZealotDiesWriteStatstoBank (unit lp_vampire);
void gf_ZealotDiesCheckAchievements (unit lp_killingUnit);
void gf_HunterDiesReviveHunter (int lp_hunterPlayer);
void gf_SetDamageofHero (int lp_playerNumber, int lp_damage);
bool gf_IsPlayerOnline (int lp_playerNumber);
int gf_GetStringColorNumber (string lp_inputString);
void gf_setcolorofunit (string lp_string, unit lp_unit);
void gf_SkinSwapModelForUnits (string lp_skinName, int lp_skinRequestor, unitgroup lp_skinUnits);
void gf_SwapModel (int lp_playerNumber, unit lp_unit, string lp_unitActor);
void gf_SwapModelSaveToBank (int lp_player, int lp_modelNumber, string lp_modelName, string lp_modelSwapName);
void gf_ProbeLearnsAbility (abilcmd lp_abilityHide1, abilcmd lp_abilityHide2, abilcmd lp_abilityHide3, abilcmd lp_abilityHide4, int lp_playerNumber, int lp_section, int lp_abilityNumber);
void gf_SetGroup2 (int lp_playerNumber);
void gf_UpdateMineralPalletFeed (int lp_probePlayer, int lp_feed);

// Final's Work

void TrainModeSetResources(int lp_player);
void InitTrainMode();

bool gf_IsPvZAS(int lp_player);
bool gf_IsWBGA(int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_MapInitialization;
trigger gt_InitGame;
trigger gt_StartGame;
trigger gt_InitCameras;
trigger gt_InitCamerasFirstStartup;
trigger gt_InitTips;
trigger gt_StartRecording;
trigger gt_SpawnZealotExpires;
trigger gt_DisableEarlyVision;
trigger gt_ChooseMapInit;
trigger gt_VoteTimerMapExpires;
trigger gt_ChooseTimescale;
trigger gt_VoteTimerTimescaleExpires;
trigger gt_ChooseSideInit;
trigger gt_VoteTimerSideExpires;
trigger gt_ChooseHunterAllowed;
trigger gt_VoteTimerHunterExpires;
trigger gt_VoteButtonPressed;
trigger gt_UpdateProgressBarAllActivePlayers;
trigger gt_UpdateProgressBarAllActivePlayersREGAME;
trigger gt_UpdateProgressBarZealots;
trigger gt_VerifyBankonHack;
trigger gt_InitBanks;
trigger gt_RegameInit;
trigger gt_RegameLeaveTimerExpires;
trigger gt_RegameInitTriggers;
trigger gt_RegameInitVariables;
trigger gt_RegameLeaveButtonPressed;
trigger gt_LeaveGameOptionESC;
trigger gt_CheckPremiumProbe;
trigger gt_CheckPremiumZealot;
trigger gt_CodeRegionAdd;
trigger gt_CodeRegionRemove;
trigger gt_mysteriousthing;
trigger gt_barTextCommand;
trigger gt_BarEnter;
trigger gt_BarLeave;
trigger gt_ResourcePerSecondInit;
trigger gt_ResourcePerSecondUpdater;
trigger gt_ResourcePerSecondUpdaterOLD;
trigger gt_TurretLaggTestTrigger;
trigger gt_NinjaDialog;
trigger gt_TurretBuff;
trigger gt_BaseDialog;
trigger gt_Add;
trigger gt_Remove;
trigger gt_FlagRegion1;
trigger gt_FlagRegion2;
trigger gt_FlagRegion3;
trigger gt_FlagRegion4;
trigger gt_FlagRegion5;
trigger gt_FlagRegion6;
trigger gt_FlagRegion7;
trigger gt_FlagRegion8;
trigger gt_FlagRegion9;
trigger gt_FlagRegion10;
trigger gt_FlagRegion11;
trigger gt_FlagRegion12;
trigger gt_FlagRegion13;
trigger gt_FlagRegion14;
trigger gt_FlagRegion15;
trigger gt_NoFlagRegion1;
trigger gt_buildbase;
trigger gt_placestructures;
trigger gt_upgradestructures;
trigger gt_defenserebuild;
trigger gt_closedialogz;
trigger gt_copperbladehelp;
trigger gt_ironbladehelp;
trigger gt_steelleather;
trigger gt_silverreinforce;
trigger gt_golden;
trigger gt_Mithrilbone;
trigger gt_diammega;
trigger gt_diasuper;
trigger gt_pulver;
trigger gt_final;
trigger gt_HelpMenu;
trigger gt_HelpRightLeftClose;
trigger gt_Unitusesabilityshowhideranks;
trigger gt_InitGameplayOptionsBanks;
trigger gt_InitGameplayOptionsDialog;
trigger gt_GameplayOptionsButtonPressed;
trigger gt_DefaultButtonPressed;
trigger gt_ReturntoGameButtonPressed;
trigger gt_DialogItemOptionChecked;
trigger gt_InitXPBar;
trigger gt_InitMarketPrices;
trigger gt_InitChooseHelpSide;
trigger gt_EnableChooseHelpSide;
trigger gt_ChooseHelpSidePressed;
trigger gt_ChooseObserverPressed;
trigger gt_WaitSpawnHunter;
trigger gt_InitVoteKick;
trigger gt_VoteKickPressed;
trigger gt_KickPlayerPressed;
trigger gt_SpiritVotePressed;
trigger gt_RemoverPlayerPressed;
trigger gt_ForceSalvageFeederPressed;
trigger gt_KickVoteYesNo;
trigger gt_KickVoteTimerLabel;
trigger gt_KickVoteTimerExpires;
trigger gt_VoteKickCooldownExpires;
trigger gt_InitProfile;
trigger gt_ProfileButtonPressed;
trigger gt_ProfileCloseButtonPressed;
trigger gt_ProfileButtonsPressed;
trigger gt_ProfileAchievementsButtonsPressed;
trigger gt_InitCommonAchievementsProfile;
trigger gt_InitHumanAchievementsProfile;
trigger gt_InitVampireAchievementsProfile;
trigger gt_InitCommonAchievementsLibrary;
trigger gt_InitProbeAchievementsLibrary;
trigger gt_InitZealotAchievementsLibrary;
trigger gt_CheckSpendResourcesAchievements;
trigger gt_CheckVampireAchievements;
trigger gt_CheckHumanAchievements;
trigger gt_CheckCommonAchievements;
trigger gt_CheckAchievements;
trigger gt_WriteHoursandresourcesAchievements;
trigger gt_InitRewardsLibrary;
trigger gt_InitRewardsProfile;
trigger gt_CheckStatusofRewards;
trigger gt_InitLeaderboard;
trigger gt_RenderLeaderboardTime;
trigger gt_InitStatsLeaderboard;
trigger gt_afk;
trigger gt_afktest;
trigger gt_AFKDetectTimerExpires;
trigger gt_AFKDetectPlayer0;
trigger gt_AFKDetectPlayer1;
trigger gt_AFKDetectPlayer2;
trigger gt_AFKDetectPlayer3;
trigger gt_AFKDetectPlayer4;
trigger gt_AFKDetectPlayer5;
trigger gt_AFKDetectPlayer6;
trigger gt_AFKDetectPlayer7;
trigger gt_AFKDetectPlayer8;
trigger gt_AFKDetectPlayer9;
trigger gt_AFKDetectPlayer10;
trigger gt_AFKDetectPlayer11;
trigger gt_AFKDetectPlayer12;
trigger gt_AFKDetectPlayer13;
trigger gt_AFKDetectPlayer14;
trigger gt_AFKDetectPlayer15;
trigger gt_AnitTrollPAUSEKiller;
trigger gt_AngryLavaCritter;
trigger gt_DeathByPenguin;
trigger gt_DeathByLavaCritter;
trigger gt_InitAIProbe;
trigger gt_CheckStage;
trigger gt_UltraWall;
trigger gt_MegaWall;
trigger gt_PowerWall;
trigger gt_FinalWall;
trigger gt_TurretLevel7;
trigger gt_TurretLevel11;
trigger gt_TurretLevel13;
trigger gt_TurretLevelFinal;
trigger gt_UltraMiner;
trigger gt_LegendaryMiner;
trigger gt_PerfectMiner;
trigger gt_LudicrousMiner;
trigger gt_ReplenishMinerals;
trigger gt_DominionTrain;
trigger gt_GenMax;
trigger gt_BuildaAutomatedMineLevel6;
trigger gt_BuildaAutomatedMineLevel7;
trigger gt_BuildaAutomatedMineLevel8;
trigger gt_UltraWallAchievement;
trigger gt_MegaWallAchievement;
trigger gt_PowerWallAchievement;
trigger gt_FinalWallAchievement;
trigger gt_TurretLevel7Achievement;
trigger gt_TurretLevel11Achievement;
trigger gt_TurretLevel13Achievement;
trigger gt_UltraMinerAchievement;
trigger gt_LegendaryMinerAchievement;
trigger gt_PerfectMinerAchievement;
trigger gt_GenMaxAchievement;
trigger gt_AutomatedMineLevel6;
trigger gt_AutomatedMineLevel7;
trigger gt_AutomatedMineLevel8;
trigger gt_Vespene;
trigger gt_FinalBlade;
trigger gt_PurchaseUltimateBlade;
trigger gt_PurchaseSuperGloves;
trigger gt_PurchaseNanocrystallineDiamondArmor;
trigger gt_PurchaseDiamondAmulet;
trigger gt_PurchaseUltimateRegenerationPotion;
trigger gt_VictoryDefeatConditionsProbeDies;
trigger gt_VictoryDefeatConditionsZealotDies;
trigger gt_EnableTrading;
trigger gt_UnitisSelected;
trigger gt_GiveMineralstoPlayer;
trigger gt_GiveVespenetoPlayer;
trigger gt_GiveBothButton;
trigger gt_TimerRemoveExpires;
trigger gt_ProbeLefttheGameAlive;
trigger gt_ProbeLefttheGameDead;
trigger gt_ZealotLefttheGameAlive;
trigger gt_ZealotLefttheGameDead;
trigger gt_ProbeDies;
trigger gt_ProbeSpiritDies;
trigger gt_TimerProbeSpiritDiesExpires;
trigger gt_ZealotDies;
trigger gt_HunterDies;
trigger gt_TimerHunterDiesExpires;
trigger gt_SpeedRegion;
trigger gt_ZealotIncome;
trigger gt_ZealotIncomeKillBonus;
trigger gt_ArmorOfUnit;
trigger gt_DamageOfUnit;
trigger gt_TurnonPrivateCommands;
trigger gt_TurnoffPrivateCommands;
trigger gt_GoodGame;
trigger gt_profilecolor;
trigger gt_statscolor;
trigger gt_statsreset;
trigger gt_autostatsresetzankza;
trigger gt_zoom;
trigger gt_scale;
trigger gt_rank;
trigger gt_players;
trigger gt_help;
trigger gt_takeHunter;
trigger gt_sellHunter;
trigger gt_unscale;
trigger gt_regame;
trigger gt_name;
trigger gt_c;
trigger gt_creset;
trigger gt_handles;
trigger gt_handles2;
trigger gt_penguin;
trigger gt_meteor;
trigger gt_cloak;
trigger gt_muteexperimental;
trigger gt_poweroverwhelming;
trigger gt_makezealot;
trigger gt_revive;
trigger gt_premium;
trigger gt_zealot;
trigger gt_feed;
trigger gt_spirit;
trigger gt_hunter;
trigger gt_kick;
trigger gt_kickselected;
trigger gt_salvage;
trigger gt_salvageselected;
trigger gt_map;
trigger gt_speed;
trigger gt_sethunter;
trigger gt_say;
trigger gt_hat;
trigger gt_attach;
trigger gt_setscale;
trigger gt_mine;
trigger gt_yours;
trigger gt_hostile;
trigger gt_spawn;
trigger gt_freeze;
trigger gt_unfreeze;
trigger gt_kill;
trigger gt_give;
trigger gt_reveal;
trigger gt_debug;
trigger gt_debugclose;
trigger gt_show;
trigger gt_test;
trigger gt_settimescale;
trigger gt_setbuildername;
trigger gt_setvampname;
trigger gt_setbuilderscale;
trigger gt_setvampscale;
trigger gt_poweron;
trigger gt_poweroff;
trigger gt_swap;
trigger gt_SwapBuildingSkinsTerran;
trigger gt_SwapBuildingSkinsProtoss;
trigger gt_SwapBuildingSkinsDarkProtoss;
trigger gt_SwapBuildingSkinsZerg;
trigger gt_BuilderSwapto1Model;
trigger gt_BuilderSwapto2Model;
trigger gt_BuilderSwapto3Model;
trigger gt_BuilderSwapto4Model;
trigger gt_BuilderSwapto5Model;
trigger gt_BuilderSwapto6Model;
trigger gt_BuilderSwapto7Model;
trigger gt_BuilderSwapto8Model;
trigger gt_BuilderSwapto9Model;
trigger gt_BuilderSwapto10Model;
trigger gt_BuilderSwapto11Model;
trigger gt_BuilderSwapto12Model;
trigger gt_BuilderSwapto13Model;
trigger gt_BuilderSwapto14Model;
trigger gt_BuilderSwapto15Model;
trigger gt_BuilderSwapto17;
trigger gt_BuilderSwapto18;
trigger gt_BuilderSwapto19;
trigger gt_BuilderSwapto20Model;
trigger gt_BuilderSwapto21;
trigger gt_BuilderSwapto22;
trigger gt_BuilderSwapto23;
trigger gt_BuilderSwapto24;
trigger gt_BuilderSwapto25;
trigger gt_BuilderSwapto26;
trigger gt_BuilderSwapto27;
trigger gt_BuilderSwapto28;
trigger gt_BuilderSwapto29;
trigger gt_BuilderSwapto30;
trigger gt_BuilderSwapto31;
trigger gt_BuilderSwapto32;
trigger gt_BuilderSwapto33;
trigger gt_BuilderSwapto34;
trigger gt_BuilderSwapto35;
trigger gt_BuilderSwapto36;
trigger gt_BuilderSwapto37;
trigger gt_BuilderSwapto38;
trigger gt_BuilderSwapto39;
trigger gt_BuilderSwapto40;
trigger gt_BuilderSwapto41;
trigger gt_BuilderSwapto42;
trigger gt_BuilderSwapto43;
trigger gt_BuilderSwapto46;
trigger gt_SpiritSwapRankS1;
trigger gt_SpiritSwapRankS15;
trigger gt_SpiritSwapRankS25;
trigger gt_SpiritSwapRankS50;
trigger gt_SpiritSwapRankS100;
trigger gt_BuilderSwapRankS1;
trigger gt_BuilderSwapRankS5;
trigger gt_BuilderSwapRankS10;
trigger gt_BuilderSwapRankS20;
trigger gt_BuilderSwapRankS25;
trigger gt_BuilderSwapRankS30;
trigger gt_BuilderSwapRankS40;
trigger gt_BuilderSwapRankS50;
trigger gt_BuilderSwapRankS60;
trigger gt_BuilderSwapRankS70;
trigger gt_BuilderSwapRankS75;
trigger gt_BuilderSwapRankS80;
trigger gt_BuilderSwapRankS90;
trigger gt_BuilderSwapRankS100;
trigger gt_VampireSwaptoModel1;
trigger gt_VampireSwaptoModel2;
trigger gt_VampireSwaptoModel3;
trigger gt_VampireSwaptoModel4;
trigger gt_VampireSwaptoModel5;
trigger gt_VampireSwaptoModel6;
trigger gt_VampireSwaptoModel7;
trigger gt_VampireSwaptoModel8;
trigger gt_VampireSwaptoModel9;
trigger gt_VampireSwaptoModel10;
trigger gt_VampireSwaptoModel11;
trigger gt_VampireSwaptoModel12;
trigger gt_VampireSwaptoModel13;
trigger gt_VampireSwaptoModel14;
trigger gt_VampireSwaptoModel15;
trigger gt_VampireSwaptoModel16;
trigger gt_VampireSwaptoModel17;
trigger gt_VampireSwaptoModel18;
trigger gt_VampireSwaptoModel19;
trigger gt_VampireSwaptoModel20;
trigger gt_VampireSwaptoModel21;
trigger gt_VampireSwaptoModel22;
trigger gt_VampireSwaptoModel23;
trigger gt_VampireSwaptoModel24;
trigger gt_VampireSwaptoModel25;
trigger gt_VampireSwaptoModel26;
trigger gt_VampireSwaptoModel27;
trigger gt_VampireSwaptoModel28;
trigger gt_VampireSwaptoModel29;
trigger gt_VampireSwapRankS1;
trigger gt_VampireSwapRankS5;
trigger gt_VampireSwapRankS10;
trigger gt_VampireSwapRankS15;
trigger gt_VampireSwapRankS20;
trigger gt_VampireSwapRankS25;
trigger gt_VampireSwapRankS30;
trigger gt_VampireSwapRankS35;
trigger gt_VampireSwapRankS40;
trigger gt_VampireSwapRankS45;
trigger gt_VampireSwapRankS50;
trigger gt_obs;
trigger gt_ObserveUnitDeselected;
trigger gt_InitLearnAbilities;
trigger gt_ProbeLearnsAbility;
trigger gt_ProbeFastLearn;
trigger gt_ninjaonoff;
trigger gt_ProbeSpiritUsesInvis;
trigger gt_ProbeInvisExpires;
trigger gt_PerfectMinerCancel;
trigger gt_AutomatedMineLevel8Cancel;
trigger gt_FinalTurretCancel;
trigger gt_RepositoryCancel;
trigger gt_SalvageTurretLevel13;
trigger gt_SalvageTurretLevel14;
trigger gt_SalvageFinalWall;
trigger gt_Sacrifice;
trigger gt_Buy10Minerals;
trigger gt_Buy200Minerals;
trigger gt_Buy4000Minerals;
trigger gt_Sell10Minerals;
trigger gt_Sell200Minerals;
trigger gt_Sell4000Minerals;
trigger gt_SalvageAllOrder;
trigger gt_PlaceFlagRegion;
trigger gt_SelectShopEnable;
trigger gt_SelectShopDisable;
trigger gt_SelectShopUsed;
trigger gt_ZealotUsesInvis;
trigger gt_ZealotInvisExpires;
trigger gt_ZealotUsesTeleportAbility;
trigger gt_suggesteditems;
trigger gt_suggesteditems2;
trigger gt_UnitSellItem;
trigger gt_Buy;
trigger gt_HunterInventory;
trigger gt_SellHotkey;
trigger gt_MineralPalletLevel1;
trigger gt_MineralPalletLevel2;
trigger gt_MineralPalletLevel3;
trigger gt_MineralPalletLevel4;
trigger gt_MineralPalletLevel5;
trigger gt_MineralPalletLevel6;
trigger gt_MineralPalletLevel7;
trigger gt_MineralPalletLevel8;
trigger gt_MineralPalletLevel9;
trigger gt_EnemyUnitsGainsItem;
trigger gt_MagicImmuneisApplied;
trigger gt_UnitGainsBootsofSpeedItem;
trigger gt_UnitLossesBootsofSpeedItem;
trigger gt_UnitGainsHPItem;
trigger gt_UnitLossesHPItem;

// Final's Work
trigger gt_LudiCancel;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_PlayerIsDeveloper (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_dEBUGMODE == true) || (PlayerHandle(lp_playerNumber) == "1-S2-1-4555053") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4183383") || (PlayerHandle(lp_playerNumber) == "1-S2-1-4130515") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4373517") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1268713")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsModerator (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((gf_PlayerIsModeratorLevel2(lp_playerNumber) == true) || (PlayerHandle(lp_playerNumber) == "1-S2-1-2650325") || (PlayerHandle(lp_playerNumber) == "TBA") || (PlayerHandle(lp_playerNumber) == "3-S2-1-4609206") || (PlayerHandle(lp_playerNumber) == "TBA") || (PlayerHandle(lp_playerNumber) == "2-S2-1-5226029") || (PlayerHandle(lp_playerNumber) == "1-S2-1-4078924") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4932355") || (PlayerHandle(lp_playerNumber) == "1-S2-1-5513778") || (PlayerHandle(lp_playerNumber) == "1-S2-1-3893721") || (PlayerHandle(lp_playerNumber) == "2-S2-1-3907071") || (PlayerHandle(lp_playerNumber) == "1-S2-1-5295564") || (PlayerHandle(lp_playerNumber) == "2-S2-1-7917487") || (PlayerHandle(lp_playerNumber) == "2-S2-1-7440361") || (PlayerHandle(lp_playerNumber) == "1-S2-1-9644197") || (PlayerHandle(lp_playerNumber) == "2-S2-1-2865572") || (PlayerHandle(lp_playerNumber) == "2-S2-1-7308525") || (PlayerHandle(lp_playerNumber) == "1-S2-1-5403594")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsModeratorLevel2 (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((gf_PlayerIsModeratorLevelX(lp_playerNumber) == true) || (PlayerHandle(lp_playerNumber) == "1-S2-1-4037094") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4706767") || (PlayerHandle(lp_playerNumber) == "1-S2-1-594678") || (PlayerHandle(lp_playerNumber) == "2-S2-1-3982935") || (PlayerHandle(lp_playerNumber) == "1-S2-1-787549") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4707757") || (PlayerHandle(lp_playerNumber) == "1-S2-1-4343485") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4424003") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1789252") || (PlayerHandle(lp_playerNumber) == "2-S2-1-5210484") || (PlayerHandle(lp_playerNumber) == "1-S2-1-6264838") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4117165") || (PlayerHandle(lp_playerNumber) == "1-S2-1-5036407") || (PlayerHandle(lp_playerNumber) == "2-S2-1-1796699") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1198154") || (PlayerHandle(lp_playerNumber) == "2-S2-1-5697320") || (PlayerHandle(lp_playerNumber) == "Chucki") || (PlayerHandle(lp_playerNumber) == "2-S2-1-1112629") || (PlayerHandle(lp_playerNumber) == "1-S2-1-5431202") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4133780") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4450990") || (PlayerHandle(lp_playerNumber) == "Anatar") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4759000")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsModeratorLevelX (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "1-S2-1-3785924")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsDonor (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "1-S2-1-2567376") || (PlayerHandle(lp_playerNumber) == "1-S2-1-2087196") || (PlayerHandle(lp_playerNumber) == "1-S2-1-3968976") || (PlayerHandle(lp_playerNumber) == "1-S2-1-708851") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1362548") || (PlayerHandle(lp_playerNumber) == "1-S2-1-4505353") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1269427") || (PlayerHandle(lp_playerNumber) == "1-S2-1-2908289") || (PlayerHandle(lp_playerNumber) == "1-S2-1-1006616") || (PlayerHandle(lp_playerNumber) == "1-S2-1-6209473") || (PlayerHandle(lp_playerNumber) == "1-S2-1-2650325") || (PlayerHandle(lp_playerNumber) == "1-S2-1-2873389") || (PlayerHandle(lp_playerNumber) == "1-S2-1-4078924") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4932355")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsTROLL (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "I Am A Troll")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsAwaysKickable (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "I Am A Troll")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerIsTheWiseOne (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_playerNumber) == "1-S2-1-4130515") || (PlayerHandle(lp_playerNumber) == "2-S2-1-4373517")) && ((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_PlayerHasCustomRank (int lp_playerNumber) {
    // Automatic Variable Declarations
    string autoD37D30D5_val;

    // Implementation
    if (((gf_PlayerIsTROLL(lp_playerNumber) == false) && (PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser) && (gv_playerCustomRankDisplay[lp_playerNumber] == true))) {
        autoD37D30D5_val = PlayerHandle(lp_playerNumber);
        if (autoD37D30D5_val == "1-S2-1-2022286") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/89807997");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-4555053") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/31B60D56");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-4183383") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/6DE41D39");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-2580865") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/84199DF7");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-4130515") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/8015A8D9");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-4373517") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/32985B63");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-619861") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/2126E750");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-5294107") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/55A6AB40");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-1916575") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/8C6EFB5C");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-4527612") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/2B3E478B");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-4079104") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/5416DAE2");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-4122701") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/2A472A44");
            return true;
        }
        else if (autoD37D30D5_val == "2-S2-1-4044079") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/B08B1090");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-7833056") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/1B4FE6E0");
            return true;
        }
        else if (autoD37D30D5_val == "1-S2-1-8022733") {
            gv_playerCustomRank[lp_playerNumber] = StringExternal("Param/Value/97F4A9A4");
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool gf_PlayerHasObserverAccess (int lp_playerNumber) {
    // Automatic Variable Declarations
    string autoF9ABBB94_val;

    // Implementation
    if (((gf_PlayerIsTROLL(lp_playerNumber) == false) && (PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        autoF9ABBB94_val = PlayerHandle(lp_playerNumber);
        if (autoF9ABBB94_val == "1-S2-1-4418758") {
            return true;
        }
        else if (autoF9ABBB94_val == "2-S2-1-4728290") {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void gf_ShowHideUnits (playergroup lp_players, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    const int auto3471CC6F_ae = 14;
    int auto3471CC6F_var;
    unitgroup auto40C9A590_g;
    int auto40C9A590_u;
    unit auto40C9A590_var;
    unitgroup autoFB899B7C_g;
    int autoFB899B7C_u;
    unit autoFB899B7C_var;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    auto3471CC6F_var = 1;
    for ( ; auto3471CC6F_var <= auto3471CC6F_ae; auto3471CC6F_var += 1 ) {
        if ((lp_show == false)) {
            auto40C9A590_g = UnitGroup("DarkShrine", auto3471CC6F_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto40C9A590_u = UnitGroupCount(auto40C9A590_g, c_unitCountAll);
            for (;; auto40C9A590_u -= 1) {
                auto40C9A590_var = UnitGroupUnitFromEnd(auto40C9A590_g, auto40C9A590_u);
                if (auto40C9A590_var == null) { break; }
                ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(auto40C9A590_var), "SensorTowerRadar"), "Create TriggerPerPlayerActorAgent");
                lv_agent = ActorFromActor(ActorFromActor(libNtve_gf_MainActorofUnit(auto40C9A590_var), "SensorTowerRadar"), "::LastCreatedActual");
                ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(auto40C9A590_var), "SensorTowerRadar"), "AliasAdd _TriggerTarget");
                ActorSend(lv_agent, "Signal Hide");
                if ((lp_show == true)) {
                    ActorSend(lv_agent, "Signal Show");
                }

                ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(auto40C9A590_var), "SensorTowerRadar"), "AliasRemove _TriggerTarget");
                ActorSend(lv_agent, "Destroy");
            }
            ActorSend(lv_agent, "Signal Show");
        }

        autoFB899B7C_g = UnitGroup(null, auto3471CC6F_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFB899B7C_u = UnitGroupCount(autoFB899B7C_g, c_unitCountAll);
        for (;; autoFB899B7C_u -= 1) {
            autoFB899B7C_var = UnitGroupUnitFromEnd(autoFB899B7C_g, autoFB899B7C_u);
            if (autoFB899B7C_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoFB899B7C_var), "Create TriggerPerPlayerActorAgent");
            lv_agent = ActorFromActor(libNtve_gf_MainActorofUnit(autoFB899B7C_var), "::LastCreatedActual");
            ActorSend(libNtve_gf_MainActorofUnit(autoFB899B7C_var), "AliasAdd _TriggerTarget");
            if ((lp_show == true)) {
                ActorSend(lv_agent, "Signal Show");
            }
            else {
                ActorSend(lv_agent, "Signal Hide");
            }
            ActorSend(libNtve_gf_MainActorofUnit(autoFB899B7C_var), "AliasRemove _TriggerTarget");
            ActorSend(lv_agent, "Destroy");
        }
    }
    UIFlyerHelperClearOverride(PlayerGroupAll());
    if ((lp_show == false)) {
        VisRevealArea(PlayerGroupPlayer(lp_players, 1), RegionPlayableMap(), 1.0, false);
    }

}

void gf_DebugMessageMine () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/7987F420"), true);
}

void gf_PrintInteger (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, IntToText(lp_integer));
}

void gf_PrintReal (fixed lp_real) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, FixedToText(lp_real, 2));
}

fixed gf_PvZ2Time (fixed lp_timeValue) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_timeValue/gv_timescalevalue);
}

void gf_SetZealotSpeed (fixed lp_speed) {
    // Automatic Variable Declarations
    playergroup auto48B78507_g;
    int auto48B78507_var;

    // Implementation
    auto48B78507_g = PlayerGroupAll();
    auto48B78507_var = -1;
    while (true) {
        auto48B78507_var = PlayerGroupNextPlayer(auto48B78507_g, auto48B78507_var);
        if (auto48B78507_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Speed", auto48B78507_var, FixedToString(lp_speed, 2));
        CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", auto48B78507_var, FixedToString(lp_speed, 2));
    }
}

void gf_ResetHackedBank (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "HumanStats");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "VampireStats");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "TotalStats");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "Achievments");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "AchievmentsHuman");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "AchievmentsVampire");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "PreviousGameStats");
    BankSectionRemove(gv_banks[lp_triggeringPlayer], "Rewards");
    BankSave(gv_banks[lp_triggeringPlayer]);
}

void gf_FullPremiumProbe (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin1", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin2", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin3", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin4", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin5", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin6", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin7", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin8", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin9", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin10", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin11", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin12", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin13", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin14", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin15", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "BuilderSkin16", 1);
}

void gf_FullPremiumZealot (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin1", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin2", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin3", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin4", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin5", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin6", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin7", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin8", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin9", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin10", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin11", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin12", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin13", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin14", 1);
    TechTreeUpgradeAddLevel(lp_playerNumber, "VampireSkin15", 1);
}

void gf_CheckPremiumProbe () {
    // Variable Declarations
    int lv_name;

    // Automatic Variable Declarations
    playergroup auto598F6EAC_g;
    int auto598F6EAC_var;

    // Variable Initialization

    // Implementation
    auto598F6EAC_g = PlayerGroupActive();
    auto598F6EAC_var = -1;
    while (true) {
        auto598F6EAC_var = PlayerGroupNextPlayer(auto598F6EAC_g, auto598F6EAC_var);
        if (auto598F6EAC_var < 0) { break; }
        if (((gf_PlayerIsDeveloper(auto598F6EAC_var) == true))) {
            gf_FullPremiumProbe(auto598F6EAC_var);
            gf_SetRankSkinAll(1, auto598F6EAC_var);
            TechTreeUpgradeAddLevel(auto598F6EAC_var, "BuilderSkin17", 1);
            TechTreeUpgradeAddLevel(auto598F6EAC_var, "UnderDevelopment", 1);
            TriggerExecute(gt_TurnonPrivateCommands, true, false);
        }

        if (((gf_PlayerIsModerator(auto598F6EAC_var) == true) || (gf_PlayerIsDonor(auto598F6EAC_var) == true))) {
            gf_FullPremiumProbe(auto598F6EAC_var);
        }

    }
}

void gf_CheckPremiumZealot () {
    // Variable Declarations
    int lv_name;

    // Automatic Variable Declarations
    playergroup auto205D4EA0_g;
    int auto205D4EA0_var;

    // Variable Initialization

    // Implementation
    auto205D4EA0_g = PlayerGroupActive();
    auto205D4EA0_var = -1;
    while (true) {
        auto205D4EA0_var = PlayerGroupNextPlayer(auto205D4EA0_g, auto205D4EA0_var);
        if (auto205D4EA0_var < 0) { break; }
        if (((gf_PlayerIsDeveloper(auto205D4EA0_var) == true) || (gf_PlayerIsModerator(auto205D4EA0_var) == true))) {
            gf_FullPremiumZealot(auto205D4EA0_var);
            TriggerExecute(gt_TurnonPrivateCommands, true, false);
        }

        if (((gf_PlayerIsDonor(auto205D4EA0_var) == true))) {
            gf_FullPremiumZealot(auto205D4EA0_var);
        }

    }
}

void gf_CodeRegionOFF () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(114), null);
}

void gf_CloseTheBar () {
    // Automatic Variable Declarations
    unitgroup auto31B1D31D_g;
    int auto31B1D31D_u;
    unit auto31B1D31D_var;
    unitgroup auto26FD4F4A_g;
    int auto26FD4F4A_u;
    unit auto26FD4F4A_var;

    // Implementation
    gv_barIsOpen = false;
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(200), null);
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(201), null);
    auto31B1D31D_g = UnitGroup(null, 0, RegionFromId(200), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
    auto31B1D31D_u = UnitGroupCount(auto31B1D31D_g, c_unitCountAll);
    for (;; auto31B1D31D_u -= 1) {
        auto31B1D31D_var = UnitGroupUnitFromEnd(auto31B1D31D_g, auto31B1D31D_u);
        if (auto31B1D31D_var == null) { break; }
        UnitSetState(auto31B1D31D_var, c_unitStateHidden, true);
    }
    auto26FD4F4A_g = UnitGroup(null, 0, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
    auto26FD4F4A_u = UnitGroupCount(auto26FD4F4A_g, c_unitCountAll);
    for (;; auto26FD4F4A_u -= 1) {
        auto26FD4F4A_var = UnitGroupUnitFromEnd(auto26FD4F4A_g, auto26FD4F4A_u);
        if (auto26FD4F4A_var == null) { break; }
        UnitSetState(auto26FD4F4A_var, c_unitStateHidden, true);
    }
}

void gf_OpenTheBar () {
    // Automatic Variable Declarations
    playergroup auto39F0C3F0_g;
    int auto39F0C3F0_var;
    const int autoF6BB9BE2_ae = 14;
    int autoF6BB9BE2_var;
    unitgroup auto5967C9BD_g;
    int auto5967C9BD_u;
    unit auto5967C9BD_var;
    unitgroup auto696C6609_g;
    int auto696C6609_u;
    unit auto696C6609_var;
    unitgroup auto564BBBA4_g;
    int auto564BBBA4_u;
    unit auto564BBBA4_var;

    // Implementation
    gv_barIsOpen = true;
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(200)), 5.0, Color(100.00, 100.00, 100.00));
    auto39F0C3F0_g = gv_playerGroupZealots;
    auto39F0C3F0_var = -1;
    while (true) {
        auto39F0C3F0_var = PlayerGroupNextPlayer(auto39F0C3F0_g, auto39F0C3F0_var);
        if (auto39F0C3F0_var < 0) { break; }
        if ((UnitGetType(gv_zealots[auto39F0C3F0_var]) == "PrisonZealot")) {
            gv_barPlayerHasInvite[auto39F0C3F0_var] = true;
        }

    }
    autoF6BB9BE2_var = 1;
    for ( ; autoF6BB9BE2_var <= autoF6BB9BE2_ae; autoF6BB9BE2_var += 1 ) {
        if ((gf_IsPlayerOnline(autoF6BB9BE2_var) == true)) {
            gv_barPlayerHasInvite[autoF6BB9BE2_var] = true;
        }

    }
    auto5967C9BD_g = UnitGroup(null, c_playerAny, RegionFromId(200), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5967C9BD_u = UnitGroupCount(auto5967C9BD_g, c_unitCountAll);
    for (;; auto5967C9BD_u -= 1) {
        auto5967C9BD_var = UnitGroupUnitFromEnd(auto5967C9BD_g, auto5967C9BD_u);
        if (auto5967C9BD_var == null) { break; }
        if (((UnitGetOwner(auto5967C9BD_var) >= 1) && (UnitGetOwner(auto5967C9BD_var) <= 14))) {
            if (((UnitGetType(auto5967C9BD_var) != "Probe") && (UnitGetType(auto5967C9BD_var) != "HighTemplar") && (UnitGetType(auto5967C9BD_var) != "PrisonZealot") && (UnitGetType(auto5967C9BD_var) != "Predator") && (UnitTypeTestFlag(UnitGetType(auto5967C9BD_var), c_unitFlagWorker) == false))) {
                UnitIssueOrder(auto5967C9BD_var, Order(AbilityCommand("Destroy", 0)), c_orderQueueReplace);
                UnitIssueOrder(auto5967C9BD_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
                UnitIssueOrder(auto5967C9BD_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
                UnitIssueOrder(auto5967C9BD_var, Order(AbilityCommand("SelfDestruct", 0)), c_orderQueueReplace);
            }

        }

    }
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(200), null);
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(201), null);
    auto696C6609_g = UnitGroup(null, 0, RegionFromId(200), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
    auto696C6609_u = UnitGroupCount(auto696C6609_g, c_unitCountAll);
    for (;; auto696C6609_u -= 1) {
        auto696C6609_var = UnitGroupUnitFromEnd(auto696C6609_g, auto696C6609_u);
        if (auto696C6609_var == null) { break; }
        UnitSetState(auto696C6609_var, c_unitStateHidden, false);
    }
    auto564BBBA4_g = UnitGroup(null, 0, RegionFromId(201), UnitFilter(0, 0, 0, 0), 0);
    auto564BBBA4_u = UnitGroupCount(auto564BBBA4_g, c_unitCountAll);
    for (;; auto564BBBA4_u -= 1) {
        auto564BBBA4_var = UnitGroupUnitFromEnd(auto564BBBA4_g, auto564BBBA4_u);
        if (auto564BBBA4_var == null) { break; }
        UnitSetState(auto564BBBA4_var, c_unitStateHidden, false);
    }
}

void gf_ShowHideRanks (int lp_localPlayer) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto232288D2_ae = 14;
    const int auto232288D2_ai = 1;
    const int auto80FFBB06_ae = 14;
    const int auto80FFBB06_ai = 1;

    // Variable Initialization

    // Implementation
    if ((gv_labelRankStatus[lp_localPlayer] == false)) {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", lp_localPlayer, "Hide Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", lp_localPlayer, "Icons\\hide ranks.dds");
        gv_labelRankStatus[lp_localPlayer] = false;
        lv_i = 1;
        for ( ; ( (auto80FFBB06_ai >= 0 && lv_i <= auto80FFBB06_ae) || (auto80FFBB06_ai < 0 && lv_i >= auto80FFBB06_ae) ) ; lv_i += auto80FFBB06_ai ) {
            if ((gv_ninjaBuffActiveFlag[lv_i] == 0)) {
                TextTagShow(gv_playersLabelRanks[lv_i], PlayerGroupSingle(lp_localPlayer), true);
            }

        }
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", lp_localPlayer, "Show Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", lp_localPlayer, "Icons\\show ranks.dds");
        gv_labelRankStatus[lp_localPlayer] = true;
        lv_i = 1;
        for ( ; ( (auto232288D2_ai >= 0 && lv_i <= auto232288D2_ae) || (auto232288D2_ai < 0 && lv_i >= auto232288D2_ae) ) ; lv_i += auto232288D2_ai ) {
            TextTagShow(gv_playersLabelRanks[lv_i], PlayerGroupSingle(lp_localPlayer), false);
        }
    }
}

void gf_CreateLabelProbeRank (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_PlayerHasCustomRank(lp_playerNumber) == true)) {
        TextTagCreate((gv_playerCustomRank[lp_playerNumber] + StringToText("")), 16, UnitGetPosition(gv_probes[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/76FEFC6E") + (StringToText(gf_CalculateRankColored(gv_pointsHuman[lp_playerNumber], lp_playerNumber)) + StringExternal("Param/Value/A0BAC1AC"))), 24, UnitGetPosition(gv_probes[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnitPoint(TextTagLastCreated(), gv_probes[lp_playerNumber], "Ref_Head", 0, -50);
    gv_playersLabelRanks[lp_playerNumber] = TextTagLastCreated();
    gv_labelRankStatus[lp_playerNumber] = false;
    gf_ShowHideRanks(lp_playerNumber);
}

void gf_CreateLabelProbeSpiritRank (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_PlayerHasCustomRank(lp_playerNumber) == true)) {
        TextTagCreate((gv_playerCustomRank[lp_playerNumber] + StringToText("")), 16, UnitGetPosition(gv_probeSpirit[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/6D10DFF9") + (StringToText(gf_CalculateRankColored(gv_pointsHuman[lp_playerNumber], lp_playerNumber)) + StringExternal("Param/Value/2D31F0B5"))), 24, UnitGetPosition(gv_probeSpirit[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnitPoint(TextTagLastCreated(), gv_probeSpirit[lp_playerNumber], "Ref_Head", 0, -50);
    gv_playersLabelRanks[lp_playerNumber] = TextTagLastCreated();
    gv_labelRankStatus[lp_playerNumber] = false;
    gf_ShowHideRanks(lp_playerNumber);
}

void gf_CreateLabelHunterRank (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_PlayerHasCustomRank(lp_playerNumber) == true)) {
        TextTagCreate((gv_playerCustomRank[lp_playerNumber] + StringToText("")), 16, UnitGetPosition(gv_zealots[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/77F278A2") + (StringToText(gf_CalculateRankColored(gv_pointsVampire[lp_playerNumber], lp_playerNumber)) + StringExternal("Param/Value/F4957522"))), 24, UnitGetPosition(gv_zealots[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnitPoint(TextTagLastCreated(), gv_zealots[lp_playerNumber], "Ref_Head", 0, -60);
    gv_playersLabelRanks[lp_playerNumber] = TextTagLastCreated();
    gv_labelRankStatus[lp_playerNumber] = false;
    gf_ShowHideRanks(lp_playerNumber);
}

void gf_CreateLabelZealotRank (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_PlayerHasCustomRank(lp_playerNumber) == true)) {
        TextTagCreate((gv_playerCustomRank[lp_playerNumber] + StringToText("")), 16, UnitGetPosition(gv_zealots[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/BD39D1B3") + (StringToText(gf_CalculateRankColored(gv_pointsVampire[lp_playerNumber], lp_playerNumber)) + StringExternal("Param/Value/DC5AB51C"))), 24, UnitGetPosition(gv_zealots[lp_playerNumber]), 1.0, true, true, PlayerGroupActive());
    }
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagAttachToUnitPoint(TextTagLastCreated(), gv_zealots[lp_playerNumber], "Ref_Head", 0, -50);
    gv_playersLabelRanks[lp_playerNumber] = TextTagLastCreated();
    gv_labelRankStatus[lp_playerNumber] = false;
    gf_ShowHideRanks(lp_playerNumber);
}

int gf_PlaceInAchievementQueue (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto44B964B2_ae;
    const int auto44B964B2_ai = 1;

    // Variable Initialization

    // Implementation
    auto44B964B2_ae = gv_achievementsQueueSize;
    lv_i = 1;
    for ( ; ( (auto44B964B2_ai >= 0 && lv_i <= auto44B964B2_ae) || (auto44B964B2_ai < 0 && lv_i >= auto44B964B2_ae) ) ; lv_i += auto44B964B2_ai ) {
        if ((gv_achievementsQueue[lp_player][lv_i] == false)) {
            return lv_i;
        }

    }
    return 0;
}

trigger auto_gf_UnlockAchievement_Trigger = null;
int auto_gf_UnlockAchievement_lp_player;
int auto_gf_UnlockAchievement_lp_achievementId;
int auto_gf_UnlockAchievement_lp_race;
int auto_gf_UnlockAchievement_lp_type;

void gf_UnlockAchievement (int lp_player, int lp_achievementId, int lp_race, int lp_type) {
    auto_gf_UnlockAchievement_lp_player = lp_player;
    auto_gf_UnlockAchievement_lp_achievementId = lp_achievementId;
    auto_gf_UnlockAchievement_lp_race = lp_race;
    auto_gf_UnlockAchievement_lp_type = lp_type;

    if (auto_gf_UnlockAchievement_Trigger == null) {
        auto_gf_UnlockAchievement_Trigger = TriggerCreate("auto_gf_UnlockAchievement_TriggerFunc");
    }

    TriggerExecute(auto_gf_UnlockAchievement_Trigger, false, false);
}

bool auto_gf_UnlockAchievement_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UnlockAchievement_lp_player;
    int lp_achievementId = auto_gf_UnlockAchievement_lp_achievementId;
    int lp_race = auto_gf_UnlockAchievement_lp_race;
    int lp_type = auto_gf_UnlockAchievement_lp_type;

    // Variable Declarations
    int lv_queueIndex;
    string lv_image;
    int lv_dialog;
    int lv_dialogItemAchievementBackground;
    int lv_dialogItemAchievementImage;
    int lv_dialogItemAchievementImageBlack;
    int lv_dialogItemAchievementLabelPoints;
    int lv_dialogItemAchievementLabelAwarded;
    int lv_dialogItemAchievementLabelName;
    color lv_colorAward;
    color lv_colorName;
    string lv_achivAward;
    bool lv_continue;

    // Automatic Variable Declarations
    int auto98C92C50_val;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_dialogItemAchievementBackground = c_invalidDialogControlId;
    lv_dialogItemAchievementImage = c_invalidDialogControlId;
    lv_dialogItemAchievementImageBlack = c_invalidDialogControlId;
    lv_dialogItemAchievementLabelPoints = c_invalidDialogControlId;
    lv_dialogItemAchievementLabelAwarded = c_invalidDialogControlId;
    lv_dialogItemAchievementLabelName = c_invalidDialogControlId;
    lv_colorAward = Color(100,100,100);
    lv_colorName = Color(100,100,100);
    lv_achivAward = "Reward Unlocked!";
    lv_continue = true;

    // Implementation
    if ((lp_type != 3)) {
        lv_achivAward = "Achievement Unlocked!";
    }

    if (((lp_achievementId <= 0) || (lp_achievementId > gv_achievementMax) || (gv_achievements[lp_type][lp_achievementId].lv_active == false))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/563DDFC7") + IntToText(lp_achievementId) + StringExternal("Param/Value/F3FEF2A9")));
        lv_continue = false;
    }

    if ((lv_continue == true)) {
        while (!((gf_PlaceInAchievementQueue(lp_player) != 0))) {
            Wait(0.5, c_timeGame);
        }
        lv_queueIndex = gf_PlaceInAchievementQueue(lp_player);
        gv_achievementsQueue[lp_player][lv_queueIndex] = true;
        auto98C92C50_val = lp_race;
        if (auto98C92C50_val == ge_AchievementRace_Protoss) {
            lv_image = "ui_custom_achievement_metaframe_protoss.tga";
            lv_colorAward = Color(77.25, 96.08, 100.00);
            lv_colorName = Color(21.18, 61.18, 85.49);
        }
        else if (auto98C92C50_val == ge_AchievementRace_Zerg) {
            lv_image = "ui_custom_achievement_metaframe_zerg.tga";
            lv_colorAward = Color(100.00, 54.90, 33.33);
            lv_colorName = Color(90.20, 45.10, 0.00);
        }
        else {
            lv_image = "ui_custom_achievement_metalframe_terran.tga";
            lv_colorAward = Color(0.00, 59.22, 29.41);
            lv_colorName = Color(0.00, 50.20, 0.00);
        }
        DialogCreate(600, 150, c_anchorBottom, 0, (320 + ((lv_queueIndex - 1) * 170)), false);
        lv_dialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(lv_dialog, 600, 150, c_anchorCenter, 0, 0, StringToText(""), lv_image, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        lv_dialogItemAchievementBackground = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(lv_dialog, 77, 80, c_anchorTopLeft, 44, 39, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNone, false, Color(0,0,0), c_triggerBlendModeNormal);
        lv_dialogItemAchievementImageBlack = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(lv_dialog, 77, 80, c_anchorTopLeft, 44, 39, StringToText(""), gv_achievements[lp_type][lp_achievementId].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(gv_achievements[lp_type][lp_achievementId].lv_name), PlayerGroupAll());
        lv_dialogItemAchievementImage = DialogControlLastCreated();
        if ((lp_type != 3)) {
            libNtve_gf_CreateDialogItemLabel(lv_dialog, 100, 80, c_anchorRight, -8, -17, IntToText(gv_achievements[lp_type][lp_achievementId].lv_points), Color(100,100,100), false, 0.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChatDisplay", PlayerGroupAll());
            lv_dialogItemAchievementLabelPoints = DialogControlLastCreated();
        }

        libNtve_gf_CreateDialogItemLabel(lv_dialog, 300, 40, c_anchorTopLeft, 90, 35, StringToText(lv_achivAward), Color(100,100,100), false, 0.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FilePanelDetailsHyphen", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_colorAward, PlayerGroupAll());
        lv_dialogItemAchievementLabelAwarded = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lv_dialog, 300, 40, c_anchorTopLeft, 140, 65, StringToText(gv_achievements[lp_type][lp_achievementId].lv_text), Color(100,100,100), false, 0.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ExitGameText", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_colorName, PlayerGroupAll());
        lv_dialogItemAchievementLabelName = DialogControlLastCreated();
        if ((gv_achievementPlaySound != null)) {
            SoundPlay(gv_achievementPlaySound, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

        DialogControlFadeTransparency(lv_dialogItemAchievementBackground, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImage, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImageBlack, PlayerGroupAll(), 0.0, 100.0);
        if ((lp_type != 3)) {
            DialogControlFadeTransparency(lv_dialogItemAchievementLabelPoints, PlayerGroupAll(), 0.0, 100.0);
        }

        DialogControlFadeTransparency(lv_dialogItemAchievementLabelAwarded, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementLabelName, PlayerGroupAll(), 0.0, 100.0);
        DialogSetImageVisible(lv_dialog, false);
        DialogSetVisible(lv_dialog, PlayerGroupSingle(lp_player), true);
        DialogControlFadeTransparency(lv_dialogItemAchievementBackground, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImage, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImageBlack, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        if ((lp_type != 3)) {
            DialogControlFadeTransparency(lv_dialogItemAchievementLabelPoints, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        }

        DialogControlFadeTransparency(lv_dialogItemAchievementLabelAwarded, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementLabelName, PlayerGroupAll(), gv_achievementFadeInTime, 0.0);
        Wait(gv_achievementFadeInTime, c_timeReal);
        Wait(gv_achievementStayTime, c_timeGame);
        DialogControlFadeTransparency(lv_dialogItemAchievementBackground, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImage, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementImageBlack, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        if ((lp_type != 3)) {
            DialogControlFadeTransparency(lv_dialogItemAchievementLabelPoints, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        }

        DialogControlFadeTransparency(lv_dialogItemAchievementLabelAwarded, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        DialogControlFadeTransparency(lv_dialogItemAchievementLabelName, PlayerGroupAll(), gv_achievementFadeOutTime, 100.0);
        Wait(gv_achievementFadeOutTime, c_timeReal);
        gv_achievementsQueue[lp_player][lv_queueIndex] = false;
        DialogDestroy(lv_dialog);
    }

    return true;
}

void gf_CreateAchievement (int lp_id, string lp_image, int lp_points, string lp_name, string lp_text, int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_id == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/C321061E"));
        return ;
    }

    if ((lp_id < 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/34D9E1E6"));
        return ;
    }

    if ((lp_id > gv_achievementMax)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/80DF9B50") + IntToText(gv_achievementMax) + StringExternal("Param/Value/2FEBAC42")));
        return ;
    }

    gv_achievements[lp_type][lp_id].lv_image = lp_image;
    gv_achievements[lp_type][lp_id].lv_points = lp_points;
    gv_achievements[lp_type][lp_id].lv_name = lp_name;
    gv_achievements[lp_type][lp_id].lv_text = lp_text;
    gv_achievements[lp_type][lp_id].lv_active = true;
}

void gf_SetAchievementSound (soundlink lp_soundLink) {
    // Automatic Variable Declarations
    // Implementation
    gv_achievementPlaySound = lp_soundLink;
}

void gf_SetAchievementTimers (fixed lp_fadeInTime, fixed lp_stayTime, fixed lp_fadeOutTime) {
    // Automatic Variable Declarations
    // Implementation
    gv_achievementFadeInTime = lp_fadeInTime;
    gv_achievementStayTime = lp_stayTime;
    gv_achievementFadeOutTime = lp_fadeOutTime;
}

void gf_SetAchievementMaxNumber (int lp_maxAchievements) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_maxAchievements < 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/0C6D60E5"));
        return ;
    }

    if ((lp_maxAchievements > 5)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/BDCDD708"));
        return ;
    }

    gv_achievementsQueueSize = lp_maxAchievements;
}

void gf_ValidateGameplayOption (int lp_dialogItem, string lp_bankKey, int lp_playerNumber, bool lp_defaultSetting) {
    // Variable Declarations
    bool lv_keyExistsInBankAlready;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_keyExistsInBankAlready = BankKeyExists(gv_gameplayOptionsBanks[lp_playerNumber], gv_gameplayOptionsBanksOptionsSection, lp_bankKey);
    if ((lv_keyExistsInBankAlready == true)) {
    }
    else {
        BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_playerNumber], gv_gameplayOptionsBanksOptionsSection, lp_bankKey, lp_defaultSetting);
        BankSave(gv_gameplayOptionsBanks[lp_playerNumber]);
        BankWait(gv_gameplayOptionsBanks[lp_playerNumber]);
    }
    if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lp_playerNumber], gv_gameplayOptionsBanksOptionsSection, lp_bankKey) == true)) {
        libNtve_gf_SetDialogItemChecked(lp_dialogItem, true, PlayerGroupSingle(lp_playerNumber));
    }
    else {
        libNtve_gf_SetDialogItemChecked(lp_dialogItem, false, PlayerGroupSingle(lp_playerNumber));
    }
}

void gf_SetDefaultSettingsofGameplayOptions (int lp_triggeringPlayer, bool lp_resetAllValue) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemChecked(gv_autoCastRepairAbility, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_autoCastVoidPrisonAbility, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveProbeSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveScaleofProbeSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveColorofProbeSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveNameofProbeSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveZealotSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveColorofZealotSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveNameofZealotSkin, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveProbePopUp, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveZealotSuggested, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveZealotPopUp, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_saveNinjaOnOff, true, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_forceDisplayBuffDialog, false, PlayerGroupSingle(lp_triggeringPlayer));
    libNtve_gf_SetDialogItemChecked(gv_autoShowCustomRank, true, PlayerGroupSingle(lp_triggeringPlayer));
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, true);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog, false);
    BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank, true);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount, 0);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofProbeSkin, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofZealotSkin, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkin, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkin, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probePopUp, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_ninjaOnOff, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotPopUp, 1);
    BankValueSetFromInt(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSuggested, 1);
    BankValueSetFromFixed(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 34.0);
    BankValueSetFromString(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofProbeSkin, "Probe");
    BankValueSetFromString(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofZealotSkin, "Zealot");
    BankSave(gv_gameplayOptionsBanks[lp_triggeringPlayer]);
}

void gf_GameplayOptionisChecked (int lp_dialogItem, string lp_bankKey, int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(lp_dialogItem, lp_triggeringPlayer) == false)) {
        BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, lp_bankKey, false);
    }
    else {
        BankValueSetFromFlag(gv_gameplayOptionsBanks[lp_triggeringPlayer], gv_gameplayOptionsBanksOptionsSection, lp_bankKey, true);
    }
    BankSave(gv_gameplayOptionsBanks[lp_triggeringPlayer]);
}

void gf_UpdateXPBar (int lp_triggeringPlayer) {
    // Variable Declarations
    fixed lv_levelFraction1;
    fixed lv_levelFraction2;
    fixed lv_levelFractionFinal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((PlayerStatus(lp_triggeringPlayer) == c_playerStatusActive) && (PlayerType(lp_triggeringPlayer) == c_playerTypeUser))) {
        if ((PlayerGroupHasPlayer(gv_playerGroupProbes, lp_triggeringPlayer) == true)) {
            libNtve_gf_SetDialogItemText(gv_xPBarLabel, (StringExternal("Param/Value/2FCDEF21") + IntToText(gv_levelofPlayerHuman[lp_triggeringPlayer])), PlayerGroupSingle(lp_triggeringPlayer));
            lv_levelFraction1 = ((gv_xPofPlayerHuman[lp_triggeringPlayer] - gv_xPTable[gv_levelofPlayerHuman[lp_triggeringPlayer]]) + 0.0);
            lv_levelFraction2 = (0.0 + (gv_xPTable[(gv_levelofPlayerHuman[lp_triggeringPlayer] + 1)] - gv_xPTable[gv_levelofPlayerHuman[lp_triggeringPlayer]]));
            if ((lv_levelFraction2 != 0.0)) {
                lv_levelFractionFinal = (lv_levelFraction1 / lv_levelFraction2);
            }

            libNtve_gf_SetDialogItemCurrentValue(gv_xPBarProgressBar, (lv_levelFractionFinal * 100.0), PlayerGroupSingle(lp_triggeringPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_xPBarProgressBar, (StringExternal("Param/Value/A2407C27") + (IntToText(gv_xPofPlayerHuman[lp_triggeringPlayer]) + (StringExternal("Param/Value/93E16D73") + IntToText((gv_xPTable[(gv_levelofPlayerHuman[lp_triggeringPlayer] + 1)] - gv_xPofPlayerHuman[lp_triggeringPlayer]))))), PlayerGroupSingle(lp_triggeringPlayer));
        }

        if ((PlayerGroupHasPlayer(gv_playerGroupZealots, lp_triggeringPlayer) == true)) {
            libNtve_gf_SetDialogItemText(gv_xPBarLabel, (StringExternal("Param/Value/6B991A99") + IntToText(gv_levelofPlayerVampire[lp_triggeringPlayer])), PlayerGroupSingle(lp_triggeringPlayer));
            lv_levelFraction1 = ((gv_xPofPlayerVampire[lp_triggeringPlayer] - gv_xPTable[gv_levelofPlayerVampire[lp_triggeringPlayer]]) + 0.0);
            lv_levelFraction2 = (0.0 + (gv_xPTable[(gv_levelofPlayerVampire[lp_triggeringPlayer] + 1)] - gv_xPTable[gv_levelofPlayerVampire[lp_triggeringPlayer]]));
            if ((lv_levelFraction2 != 0.0)) {
                lv_levelFractionFinal = (lv_levelFraction1 / lv_levelFraction2);
            }

            libNtve_gf_SetDialogItemCurrentValue(gv_xPBarProgressBar, (lv_levelFractionFinal * 100.0), PlayerGroupSingle(lp_triggeringPlayer));
            libNtve_gf_SetDialogItemTooltip(gv_xPBarProgressBar, (StringExternal("Param/Value/21A7FDD3") + (IntToText(gv_xPofPlayerVampire[lp_triggeringPlayer]) + (StringExternal("Param/Value/BA2A22DF") + IntToText((gv_xPTable[(gv_levelofPlayerVampire[lp_triggeringPlayer] + 1)] - gv_xPofPlayerVampire[lp_triggeringPlayer]))))), PlayerGroupSingle(lp_triggeringPlayer));
        }

    }

}

int gf_NumberofPlayers () {
    // Variable Declarations
    int lv_numberofPlayers;

    // Automatic Variable Declarations
    const int autoD0E3F5C3_ae = 14;
    int autoD0E3F5C3_var;

    // Variable Initialization

    // Implementation
    autoD0E3F5C3_var = 1;
    for ( ; autoD0E3F5C3_var <= autoD0E3F5C3_ae; autoD0E3F5C3_var += 1 ) {
        if (((PlayerStatus(autoD0E3F5C3_var) == c_playerStatusActive) && (PlayerType(autoD0E3F5C3_var) == c_playerTypeUser) && (gv_hunterStatus[autoD0E3F5C3_var] == false) && (gv_probeSpiritStatus[autoD0E3F5C3_var] == false) && (gv_side[autoD0E3F5C3_var] != "Zealot"))) {
            lv_numberofPlayers += 1;
        }

    }
    return lv_numberofPlayers;
}

void gf_UpdateRequiredVotes () {
    // Automatic Variable Declarations
    // Implementation
    if ((ModF(IntToFixed(gf_NumberofPlayers()), 2.0) == 0.0)) {
        if ((IntToFixed(gf_NumberofPlayers()) > 4)) {
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardRequiredVotes, (StringExternal("Param/Value/0D47111A") + FixedToText((IntToFixed(gf_NumberofPlayers()) / 1.25), 0)), PlayerGroupAll());
        }
        else {
            if ((IntToFixed(gf_NumberofPlayers()) == 4)) {
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardRequiredVotes, (StringExternal("Param/Value/D68E0C77") + StringExternal("Param/Value/6D4528CE")), PlayerGroupAll());
            }

        }
    }
    else {
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardRequiredVotes, (StringExternal("Param/Value/8C867995") + FixedToText(Round((IntToFixed(gf_NumberofPlayers()) / 1.25)), 0)), PlayerGroupAll());
    }
}

void gf_UpdateKickVotes (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_voteKickValue[lp_playerNumber] == 1)) {
        gv_numberofVotesNo -= 1;
    }
    else {
        if ((gv_voteKickValue[lp_playerNumber] == 2)) {
            gv_numberofVotesYes -= 1;
        }

    }
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/2860B10D") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/96055A37") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
}

void gf_UpdateKickBoard () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto5E29DEF8_g;
    int auto5E29DEF8_var;
    const int auto5CDE36ED_ae = 14;
    const int auto5CDE36ED_ai = 1;

    // Variable Initialization

    // Implementation
    auto5E29DEF8_g = PlayerGroupActive();
    auto5E29DEF8_var = -1;
    while (true) {
        auto5E29DEF8_var = PlayerGroupNextPlayer(auto5E29DEF8_g, auto5E29DEF8_var);
        if (auto5E29DEF8_var < 0) { break; }
        if ((DialogIsVisible(gv_voteKickDialog, auto5E29DEF8_var) == true)) {
            if (((gf_NumberofPlayers() >= 4) && (gv_voteKickCooldownExpired[auto5E29DEF8_var] == true))) {
                lv_i = 1;
                for ( ; ( (auto5CDE36ED_ai >= 0 && lv_i <= auto5CDE36ED_ae) || (auto5CDE36ED_ai < 0 && lv_i >= auto5CDE36ED_ae) ) ; lv_i += auto5CDE36ED_ai ) {
                    if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser) && (lv_i != auto5E29DEF8_var))) {
                        DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupSingle(auto5E29DEF8_var), true);
                    }
                    else {
                        DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupSingle(auto5E29DEF8_var), false);
                        if ((gv_targetPlayer[auto5E29DEF8_var] == lv_i)) {
                            DialogSetVisible(gv_voteKickDialogKickType[auto5E29DEF8_var], PlayerGroupSingle(auto5E29DEF8_var), false);
                        }

                    }
                }
            }
            else {
                DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(auto5E29DEF8_var), false);
                DialogSetVisible(gv_voteKickDialogKickType[auto5E29DEF8_var], PlayerGroupSingle(auto5E29DEF8_var), false);
                if ((gv_voteKickCooldownExpired[auto5E29DEF8_var] == false)) {
                    UIDisplayMessage(PlayerGroupSingle(auto5E29DEF8_var), c_messageAreaDebug, (StringExternal("Param/Value/C9785AE7") + (FixedToText(TimerGetRemaining(gv_voteKickCooldown[auto5E29DEF8_var]), 0) + StringExternal("Param/Value/C54D6EF2"))));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(auto5E29DEF8_var), c_messageAreaDebug, StringExternal("Param/Value/E71609E6"));
                }
            }
        }

    }
}

void gf_CreateDialogItemProfileButton (int lp_dialog, int lp_width, int lp_height, int lp_xOffset, int lp_yOffset, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, lp_width, lp_height, c_anchorTopLeft, lp_xOffset, lp_yOffset, StringToText(""), lp_text, "");
    gv_profileButtons[gv_numberofProfileButton] = DialogControlLastCreated();
}

void gf_CreateDialogItemProfileAchievementButton (int lp_dialog, int lp_width, int lp_height, int lp_xOffset, int lp_yOffset, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, lp_width, lp_height, c_anchorTopLeft, lp_xOffset, lp_yOffset, StringToText(""), lp_text, "");
    gv_profileAchievementsButtons[gv_numberofProfileAchievementButton] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void gf_UpdateandShowProfileofPlayer (int lp_triggeringPlayer, int lp_colorPlayerNumber) {
    // Variable Declarations
    int lv_i;
    text lv_stats;

    // Automatic Variable Declarations
    const int auto4E8C71E8_ae = gv_numberofCommonAchievements;
    const int auto4E8C71E8_ai = 1;
    const int autoBE71B53A_ae = gv_numberofProbeAchievements;
    const int autoBE71B53A_ai = 1;
    const int auto2632176F_ae = gv_numberofZealotAchievements;
    const int auto2632176F_ai = 1;
    int auto0EF64881_val;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(gv_profileDialogNameofPlayer, (StringExternal("Param/Value/89D5B71A") + TextWithColor(PlayerName(lp_colorPlayerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_colorPlayerNumber, false)))), PlayerGroupSingle(lp_triggeringPlayer));
    BankLoad("ProbesvZealot2", lp_colorPlayerNumber);
    lv_i = 1;
    for ( ; ( (auto4E8C71E8_ai >= 0 && lv_i <= auto4E8C71E8_ae) || (auto4E8C71E8_ai < 0 && lv_i >= auto4E8C71E8_ae) ) ; lv_i += auto4E8C71E8_ai ) {
        gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, false, "Common");
        if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsCommon, gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lv_i]) == true)) {
            gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, true, "Common");
        }

    }
    lv_i = 1;
    for ( ; ( (autoBE71B53A_ai >= 0 && lv_i <= autoBE71B53A_ae) || (autoBE71B53A_ai < 0 && lv_i >= autoBE71B53A_ae) ) ; lv_i += autoBE71B53A_ai ) {
        gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, false, "Human");
        if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsHuman, gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lv_i]) == true)) {
            gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, true, "Human");
        }

    }
    lv_i = 1;
    for ( ; ( (auto2632176F_ai >= 0 && lv_i <= auto2632176F_ae) || (auto2632176F_ai < 0 && lv_i >= auto2632176F_ae) ) ; lv_i += auto2632176F_ai ) {
        gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, false, "Vampire");
        if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsVampire, gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lv_i]) == true)) {
            gf_EnableDisableAchievement(lv_i, lp_triggeringPlayer, true, "Vampire");
        }

    }
    if ((DialogIsVisible(gv_profileDialog, lp_triggeringPlayer) == false)) {
        DialogSetVisible(gv_profileDialog, PlayerGroupSingle(lp_triggeringPlayer), true);
        DialogSetVisible(gv_profileDialogButtonArea, PlayerGroupSingle(lp_triggeringPlayer), true);
        DialogSetVisible(gv_profileDialogWorkArea, PlayerGroupSingle(lp_triggeringPlayer), true);
    }

    if (((gv_currentPressedProfileButton[lp_triggeringPlayer] == 1) && (gv_currentProfileSection[lp_triggeringPlayer] == "MainSection"))) {
        lv_stats = (StringExternal("Param/Value/CEE847BC") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "StructuresBuiltCount")) + ((StringExternal("Param/Value/6A18C83D") + IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "UnitsKilledCount"))) + ((StringExternal("Param/Value/2087F762") + IntToText(gv_feed[lp_colorPlayerNumber])) + ((StringExternal("Param/Value/32016561") + IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "APM"))) + ((StringExternal("Param/Value/D0767EDC") + IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "TotalOverview"))) + StringToText("")))))));
        libNtve_gf_SetDialogItemText(gv_profileDialogText[1], (StringExternal("Param/Value/D7679346") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "MineralsCollected")) + (StringExternal("Param/Value/77F8E7C9") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "VespeneCollected")) + (StringExternal("Param/Value/51A27B95") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "MineralsCollectionRate")) + (StringExternal("Param/Value/4F36936C") + (StringExternal("Param/Value/13CF6B30") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "VespeneCollectionRate")) + (StringExternal("Param/Value/539C98CD") + (StringExternal("Param/Value/481599E8") + (IntToText(PlayerScoreValueGetAsInt(lp_colorPlayerNumber, "UnitsLostAll")) + lv_stats)))))))))))), PlayerGroupSingle(lp_triggeringPlayer));
    }

    if ((gv_currentProfileSection[lp_triggeringPlayer] == "AchievementsSection")) {
        auto0EF64881_val = gv_currentPressedProfileAchievementButton[lp_triggeringPlayer];
        if (auto0EF64881_val == 1) {
            gf_ShowandUpdateProgressBar(lp_triggeringPlayer, lp_colorPlayerNumber, gv_profileAchievementsButtons[1]);
        }
        else if (auto0EF64881_val == 2) {
            gf_ShowandUpdateProgressBar(lp_triggeringPlayer, lp_colorPlayerNumber, gv_profileAchievementsButtons[2]);
        }
        else if (auto0EF64881_val == 3) {
            gf_ShowandUpdateProgressBar(lp_triggeringPlayer, lp_colorPlayerNumber, gv_profileAchievementsButtons[3]);
        }
        else {
        }
    }

}

void gf_ShowandUpdateProgressBar (int lp_triggeringPlayer, int lp_colorPlayerNumber, int lp_usedDialogItem) {
    // Variable Declarations
    fixed lv_fraction;
    fixed lv_numberofunlockedachievements;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int autoE346B2E5_val;
    const int auto0CC2394D_ae = gv_numberofCommonAchievements;
    const int auto0CC2394D_ai = 1;
    const int autoA9935CA1_ae = gv_numberofProbeAchievements;
    const int autoA9935CA1_ai = 1;
    const int auto5D237625_ae = gv_numberofZealotAchievements;
    const int auto5D237625_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_usedDialogItem == gv_profileAchievementsButtons[0])) {
        DialogControlSetVisible(gv_progressBarAchievements, PlayerGroupSingle(lp_triggeringPlayer), false);
        DialogControlSetVisible(gv_progressBarName, PlayerGroupSingle(lp_triggeringPlayer), false);
        DialogControlSetVisible(gv_progressBarPercent, PlayerGroupSingle(lp_triggeringPlayer), false);
    }
    else {
        DialogControlSetVisible(gv_progressBarAchievements, PlayerGroupSingle(lp_triggeringPlayer), true);
        DialogControlSetVisible(gv_progressBarName, PlayerGroupSingle(lp_triggeringPlayer), true);
        DialogControlSetVisible(gv_progressBarPercent, PlayerGroupSingle(lp_triggeringPlayer), true);
        autoE346B2E5_val = lp_usedDialogItem;
        if (autoE346B2E5_val == gv_profileAchievementsButtons[1]) {
            lv_i = 1;
            for ( ; ( (auto0CC2394D_ai >= 0 && lv_i <= auto0CC2394D_ae) || (auto0CC2394D_ai < 0 && lv_i >= auto0CC2394D_ae) ) ; lv_i += auto0CC2394D_ai ) {
                if ((BankValueGetAsFlag(gv_banks[lp_colorPlayerNumber], gv_banksSections.lv_achievmentsCommon, gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lv_i]) == true)) {
                    lv_numberofunlockedachievements += 1.0;
                }

            }
            lv_fraction = (lv_numberofunlockedachievements / gv_numberofCommonAchievements);
        }
        else if (autoE346B2E5_val == gv_profileAchievementsButtons[2]) {
            lv_i = 1;
            for ( ; ( (autoA9935CA1_ai >= 0 && lv_i <= autoA9935CA1_ae) || (autoA9935CA1_ai < 0 && lv_i >= autoA9935CA1_ae) ) ; lv_i += autoA9935CA1_ai ) {
                if ((BankValueGetAsFlag(gv_banks[lp_colorPlayerNumber], gv_banksSections.lv_achievmentsHuman, gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lv_i]) == true)) {
                    lv_numberofunlockedachievements += 1.0;
                }

            }
            lv_fraction = (lv_numberofunlockedachievements / gv_numberofProbeAchievements);
        }
        else if (autoE346B2E5_val == gv_profileAchievementsButtons[3]) {
            lv_i = 1;
            for ( ; ( (auto5D237625_ai >= 0 && lv_i <= auto5D237625_ae) || (auto5D237625_ai < 0 && lv_i >= auto5D237625_ae) ) ; lv_i += auto5D237625_ai ) {
                if ((BankValueGetAsFlag(gv_banks[lp_colorPlayerNumber], gv_banksSections.lv_achievmentsVampire, gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lv_i]) == true)) {
                    lv_numberofunlockedachievements += 1.0;
                }

            }
            lv_fraction = (lv_numberofunlockedachievements / gv_numberofZealotAchievements);
        }
        else {
        }
        libNtve_gf_SetDialogItemCurrentValue(gv_progressBarAchievements, (lv_fraction * 100.0), PlayerGroupSingle(lp_triggeringPlayer));
        libNtve_gf_SetDialogItemText(gv_progressBarPercent, ((StringExternal("Param/Value/825E61DC") + FixedToText((lv_fraction * 100.0), 2)) + StringExternal("Param/Value/E09A23DD")), PlayerGroupSingle(lp_triggeringPlayer));
    }
}

void gf_ShowHideRewards (bool lp_showHide, int lp_playerNumber) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCD29E993_ae = gv_numberofRewards;
    const int autoCD29E993_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoCD29E993_ai >= 0 && lv_i <= autoCD29E993_ae) || (autoCD29E993_ai < 0 && lv_i >= autoCD29E993_ae) ) ; lv_i += autoCD29E993_ai ) {
        DialogControlSetVisible(gv_profileRewardsButtons[lv_i], PlayerGroupSingle(lp_playerNumber), lp_showHide);
        DialogControlSetVisible(gv_profileRewardsImage[lv_i], PlayerGroupSingle(lp_playerNumber), lp_showHide);
    }
}

void gf_CommonAchievements () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto081DCCF5_ae = 14;
    const int auto081DCCF5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto081DCCF5_ai >= 0 && lv_i <= auto081DCCF5_ae) || (auto081DCCF5_ai < 0 && lv_i >= auto081DCCF5_ae) ) ; lv_i += auto081DCCF5_ai ) {
        if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
            gf_CheckReachRankAchievement(lv_i, 1, 2000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 2, 10, "Common");
            if (((GameGetMissionTime() <= 600.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(3, lv_i, "Common");
            }

            if (((GameGetMissionTime() >= 1800.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(4, lv_i, "Common");
            }

            gf_CheckWinningStreakAchievement(lv_i, 5, 3, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 6, 600, "Common");
            gf_CheckReachRankAchievement(lv_i, 7, 3000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 8, 25, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 9, 5, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 10, 1500, "Common");
            gf_CheckReachRankAchievement(lv_i, 11, 4000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 12, 50, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 13, 10, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 14, 3000, "Common");
            gf_CheckReachRankAchievement(lv_i, 15, 5000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 16, 100, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 17, 15, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 18, 6000, "Common");
            gf_CheckReachRankAchievement(lv_i, 19, 6000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 20, 250, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 21, 20, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 22, 15000, "Common");
            gf_CheckReachRankAchievement(lv_i, 23, 7000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 24, 500, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 25, 25, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 26, 30000, "Common");
            gf_CheckReachRankAchievement(lv_i, 27, 8000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 28, 750, "Common");
            gf_CheckWinningStreakAchievement(lv_i, 29, 30, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 30, 45000, "Common");
            gf_CheckReachRankAchievement(lv_i, 31, 9000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 32, 1000, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 33, 60000, "Common");
            gf_CheckReachRankAchievement(lv_i, 34, 10000, "Common");
            gf_CheckWinGamesAchievement(lv_i, 35, 2500, "Common");
            gf_CheckPlayHoursAchievement(lv_i, 36, 150000, "Common");
            gf_CheckReachRankAchievement(lv_i, 37, 11000, "Common");
            gf_CheckReachRankAchievement(lv_i, 38, 12000, "Common");
            gf_CheckReachLevelAchievement(lv_i, 39, 5, "Common");
            gf_CheckReachLevelAchievement(lv_i, 40, 10, "Common");
            gf_CheckReachLevelAchievement(lv_i, 41, 20, "Common");
            gf_CheckReachLevelAchievement(lv_i, 42, 30, "Common");
            gf_CheckReachLevelAchievement(lv_i, 43, 40, "Common");
            gf_CheckReachLevelAchievement(lv_i, 44, 50, "Common");
            gf_CheckReachLevelAchievement(lv_i, 45, 60, "Common");
            gf_CheckReachLevelAchievement(lv_i, 46, 70, "Common");
            gf_CheckReachLevelAchievement(lv_i, 47, 80, "Common");
            gf_CheckReachLevelAchievement(lv_i, 48, 90, "Common");
        }

    }
}

void gf_HumanAchievements () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_achievementID;

    // Automatic Variable Declarations
    const int auto7839EC1F_ae = 14;
    const int auto7839EC1F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto7839EC1F_ai >= 0 && lv_i <= auto7839EC1F_ae) || (auto7839EC1F_ai < 0 && lv_i >= auto7839EC1F_ae) ) ; lv_i += auto7839EC1F_ai ) {
        if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
            gf_CheckReachRankAchievement(lv_i, 1, 2000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 2, 10, "Human");
            if (((GameGetMissionTime() <= 600.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(3, lv_i, "Human");
            }

            if (((GameGetMissionTime() >= 1800.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(4, lv_i, "Human");
            }

            gf_CheckWinningStreakAchievement(lv_i, 5, 3, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 6, 600, "Human");
            gf_CheckReachRankAchievement(lv_i, 7, 3000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 8, 25, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 9, 5, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 10, 1500, "Human");
            gf_CheckReachRankAchievement(lv_i, 11, 4000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 12, 50, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 13, 10, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 14, 3000, "Human");
            gf_CheckReachRankAchievement(lv_i, 15, 5000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 16, 100, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 17, 15, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 18, 6000, "Human");
            gf_CheckReachRankAchievement(lv_i, 19, 6000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 20, 250, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 21, 20, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 22, 15000, "Human");
            gf_CheckReachRankAchievement(lv_i, 23, 7000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 24, 500, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 25, 25, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 26, 30000, "Human");
            gf_CheckReachRankAchievement(lv_i, 27, 8000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 28, 750, "Human");
            gf_CheckWinningStreakAchievement(lv_i, 29, 30, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 30, 45000, "Human");
            gf_CheckReachRankAchievement(lv_i, 31, 9000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 32, 1000, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 33, 60000, "Human");
            gf_CheckReachRankAchievement(lv_i, 34, 10000, "Human");
            gf_CheckWinGamesAchievement(lv_i, 35, 2500, "Human");
            gf_CheckPlayHoursAchievement(lv_i, 36, 150000, "Human");
            gf_CheckReachRankAchievement(lv_i, 37, 11000, "Human");
            gf_CheckReachRankAchievement(lv_i, 38, 12000, "Human");
            gf_CheckReachLevelAchievement(lv_i, 39, 5, "Human");
            gf_CheckReachLevelAchievement(lv_i, 40, 10, "Human");
            gf_CheckReachLevelAchievement(lv_i, 41, 20, "Human");
            gf_CheckReachLevelAchievement(lv_i, 42, 30, "Human");
            gf_CheckReachLevelAchievement(lv_i, 43, 40, "Human");
            gf_CheckReachLevelAchievement(lv_i, 44, 50, "Human");
            gf_CheckReachLevelAchievement(lv_i, 45, 60, "Human");
            gf_CheckReachLevelAchievement(lv_i, 46, 70, "Human");
            gf_CheckReachLevelAchievement(lv_i, 47, 80, "Human");
            gf_CheckReachLevelAchievement(lv_i, 48, 90, "Human");
        }

    }
}

void gf_VampireAchievements () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_achievementID;

    // Automatic Variable Declarations
    const int autoA760630D_ae = 14;
    const int autoA760630D_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoA760630D_ai >= 0 && lv_i <= autoA760630D_ae) || (autoA760630D_ai < 0 && lv_i >= autoA760630D_ae) ) ; lv_i += autoA760630D_ai ) {
        if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
            gf_CheckReachRankAchievement(lv_i, 1, 2000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 2, 10, "Vampire");
            if (((GameGetMissionTime() <= 600.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(3, lv_i, "Vampire");
            }

            if (((GameGetMissionTime() >= 1800.0) && (gv_playerWin[lv_i] == true))) {
                gf_CheckStatusofAchievement(4, lv_i, "Vampire");
            }

            gf_CheckWinningStreakAchievement(lv_i, 5, 3, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 6, 600, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 7, 3000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 8, 25, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 9, 5, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 10, 1500, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 11, 4000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 12, 50, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 13, 10, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 14, 3000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 15, 5000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 16, 100, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 17, 15, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 18, 6000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 19, 6000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 20, 250, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 21, 20, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 22, 15000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 23, 7000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 24, 500, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 25, 25, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 26, 30000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 27, 8000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 28, 750, "Vampire");
            gf_CheckWinningStreakAchievement(lv_i, 29, 30, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 30, 45000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 31, 9000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 32, 1000, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 33, 60000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 34, 10000, "Vampire");
            gf_CheckWinGamesAchievement(lv_i, 35, 2500, "Vampire");
            gf_CheckPlayHoursAchievement(lv_i, 36, 150000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 37, 11000, "Vampire");
            gf_CheckReachRankAchievement(lv_i, 38, 12000, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 39, 5, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 40, 10, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 41, 20, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 42, 30, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 43, 40, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 44, 50, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 45, 60, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 46, 70, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 47, 80, "Vampire");
            gf_CheckReachLevelAchievement(lv_i, 48, 90, "Vampire");
        }

    }
}

void gf_CheckKillBuilderAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofBuilders) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsInt(gv_banks[lp_killingPlayerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_killedBuilders) >= lp_numberofBuilders)) {
        gf_CheckStatusofAchievement(lp_achievementID, lp_killingPlayerNumber, "Vampire");
    }

}

void gf_CheckKillProbeinGameAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofBuilders) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_numberofKilledHumans[lp_killingPlayerNumber] >= lp_numberofBuilders)) {
        gf_CheckStatusofAchievement(lp_achievementID, lp_killingPlayerNumber, "Vampire");
    }

}

void gf_CheckKillVampireAchievement (int lp_killingPlayerNumber, int lp_achievementID, int lp_numberofVampires) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankValueGetAsInt(gv_banks[lp_killingPlayerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_killedVampires) >= lp_numberofVampires)) {
        gf_CheckStatusofAchievement(lp_achievementID, lp_killingPlayerNumber, "Human");
    }

}

void gf_CheckReachLevelAchievement (int lp_playerNumber, int lp_achievementID, int lp_level, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string autoF6FE8F19_val;

    // Implementation
    autoF6FE8F19_val = lp_typeofAchievement;
    if (autoF6FE8F19_val == "Common") {
        if ((gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP)) >= lp_level)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Common");
        }

    }
    else if (autoF6FE8F19_val == "Human") {
        if ((gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP)) >= lp_level)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Human");
        }

    }
    else if (autoF6FE8F19_val == "Vampire") {
        if ((gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP)) >= lp_level)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Vampire");
        }

    }
    else {
    }
}

void gf_CheckReachRankAchievement (int lp_playerNumber, int lp_achievementID, int lp_points, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string auto8A147021_val;

    // Implementation
    auto8A147021_val = lp_typeofAchievement;
    if (auto8A147021_val == "Common") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points) >= lp_points)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Common");
        }

    }
    else if (auto8A147021_val == "Human") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) >= lp_points)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Human");
        }

    }
    else if (auto8A147021_val == "Vampire") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points) >= lp_points)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Vampire");
        }

    }
    else {
    }
}

void gf_CheckWinGamesAchievement (int lp_playerNumber, int lp_achievementID, int lp_games, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string autoDB2FA6C7_val;

    // Implementation
    autoDB2FA6C7_val = lp_typeofAchievement;
    if (autoDB2FA6C7_val == "Common") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins) >= lp_games)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Common");
        }

    }
    else if (autoDB2FA6C7_val == "Human") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins) >= lp_games)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Human");
        }

    }
    else if (autoDB2FA6C7_val == "Vampire") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins) >= lp_games)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Vampire");
        }

    }
    else {
    }
}

void gf_CheckWinningStreakAchievement (int lp_playerNumber, int lp_achievementID, int lp_winningStreak, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string auto9776EF8B_val;

    // Implementation
    auto9776EF8B_val = lp_typeofAchievement;
    if (auto9776EF8B_val == "Common") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak) >= lp_winningStreak)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Common");
        }

    }
    else if (auto9776EF8B_val == "Human") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_winningStreak) >= lp_winningStreak)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Human");
        }

    }
    else if (auto9776EF8B_val == "Vampire") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak) >= lp_winningStreak)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Vampire");
        }

    }
    else {
    }
}

void gf_CheckPlayHoursAchievement (int lp_playerNumber, int lp_achievementID, int lp_minutes, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string autoBAA9C093_val;

    // Implementation
    autoBAA9C093_val = lp_typeofAchievement;
    if (autoBAA9C093_val == "Common") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_hours) >= lp_minutes)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Common");
        }

    }
    else if (autoBAA9C093_val == "Human") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_hours) >= lp_minutes)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Human");
        }

    }
    else if (autoBAA9C093_val == "Vampire") {
        if ((BankValueGetAsInt(gv_banks[lp_playerNumber], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_hours) >= lp_minutes)) {
            gf_CheckStatusofAchievement(lp_achievementID, lp_playerNumber, "Vampire");
        }

    }
    else {
    }
}

void gf_EnableDisableAchievement (int lp_achievementNumber, int lp_playerNumber, bool lp_enableDisable, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string autoC2E5BDBB_val;

    // Implementation
    autoC2E5BDBB_val = lp_typeofAchievement;
    if (autoC2E5BDBB_val == "Common") {
        DialogControlSetEnabled(gv_profileCommonAchievementsButtons[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
        DialogControlSetEnabled(gv_profileCommonAchievementsImage[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
    }
    else if (autoC2E5BDBB_val == "Human") {
        DialogControlSetEnabled(gv_profileHumanAchievementsButtons[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
        DialogControlSetEnabled(gv_profileHumanAchievementsImage[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
    }
    else if (autoC2E5BDBB_val == "Vampire") {
        DialogControlSetEnabled(gv_profileVampireAchievementsButtons[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
        DialogControlSetEnabled(gv_profileVampireAchievementsImage[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
    }
    else {
    }
}

void gf_CheckStatusofAchievement (int lp_achievementID, int lp_playerNumber, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string auto8DE65D06_val;
    string autoB09266F5_val;
    string autoCC448E2D_val;
    string auto1DB60D86_val;

    // Implementation
    auto8DE65D06_val = lp_typeofAchievement;
    if (auto8DE65D06_val == "Common") {
        if ((BankValueGetAsFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsCommon, gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lp_achievementID]) == false)) {
            BankValueSetFromFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsCommon, gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lp_achievementID], true);
            BankSave(gv_banks[lp_playerNumber]);
            autoB09266F5_val = PlayerRace(lp_playerNumber);
            if (autoB09266F5_val == "Terr") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Terran, 0);
            }
            else if (autoB09266F5_val == "Prot") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Protoss, 0);
            }
            else if (autoB09266F5_val == "Zerg") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Zerg, 0);
            }
            else {
            }
            DialogControlSetEnabled(gv_profileCommonAchievementsButtons[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
            DialogControlSetEnabled(gv_profileCommonAchievementsImage[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
        }

    }
    else if (auto8DE65D06_val == "Human") {
        if ((BankValueGetAsFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsHuman, gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lp_achievementID]) == false)) {
            BankValueSetFromFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsHuman, gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lp_achievementID], true);
            BankSave(gv_banks[lp_playerNumber]);
            autoCC448E2D_val = PlayerRace(lp_playerNumber);
            if (autoCC448E2D_val == "Terr") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Terran, 1);
            }
            else if (autoCC448E2D_val == "Prot") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Protoss, 1);
            }
            else if (autoCC448E2D_val == "Zerg") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Zerg, 1);
            }
            else {
            }
            DialogControlSetEnabled(gv_profileHumanAchievementsButtons[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
            DialogControlSetEnabled(gv_profileHumanAchievementsImage[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
        }

    }
    else if (auto8DE65D06_val == "Vampire") {
        if ((BankValueGetAsFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsVampire, gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lp_achievementID]) == false)) {
            BankValueSetFromFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_achievmentsVampire, gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lp_achievementID], true);
            BankSave(gv_banks[lp_playerNumber]);
            auto1DB60D86_val = PlayerRace(lp_playerNumber);
            if (auto1DB60D86_val == "Terr") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Terran, 2);
            }
            else if (auto1DB60D86_val == "Prot") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Protoss, 2);
            }
            else if (auto1DB60D86_val == "Zerg") {
                gf_UnlockAchievement(lp_playerNumber, lp_achievementID, ge_AchievementRace_Zerg, 2);
            }
            else {
            }
            DialogControlSetEnabled(gv_profileVampireAchievementsButtons[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
            DialogControlSetEnabled(gv_profileVampireAchievementsImage[lp_achievementID], PlayerGroupSingle(lp_playerNumber), true);
        }

    }
    else {
    }
}

void gf_CreateProfileAchievement (int lp_dialog, int lp_offsetX, int lp_offsetY, text lp_text, int lp_achievementNumber, string lp_image, string lp_typeofAchievement) {
    // Automatic Variable Declarations
    string autoC85393F3_val;
    string autoE209A008_val;

    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, 76, 76, c_anchorTopLeft, lp_offsetX, lp_offsetY, StringToText(""), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    autoC85393F3_val = lp_typeofAchievement;
    if (autoC85393F3_val == "Common") {
        gv_profileCommonAchievementsButtons[lp_achievementNumber] = DialogControlLastCreated();
    }
    else if (autoC85393F3_val == "Human") {
        gv_profileHumanAchievementsButtons[lp_achievementNumber] = DialogControlLastCreated();
    }
    else if (autoC85393F3_val == "Vampire") {
        gv_profileVampireAchievementsButtons[lp_achievementNumber] = DialogControlLastCreated();
    }
    else {
    }
    libNtve_gf_CreateDialogItemImage(lp_dialog, 76, 76, c_anchorTopLeft, lp_offsetX, lp_offsetY, lp_text, lp_image, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    autoE209A008_val = lp_typeofAchievement;
    if (autoE209A008_val == "Common") {
        gv_profileCommonAchievementsImage[lp_achievementNumber] = DialogControlLastCreated();
    }
    else if (autoE209A008_val == "Human") {
        gv_profileHumanAchievementsImage[lp_achievementNumber] = DialogControlLastCreated();
    }
    else if (autoE209A008_val == "Vampire") {
        gv_profileVampireAchievementsImage[lp_achievementNumber] = DialogControlLastCreated();
    }
    else {
    }
}

bool gf_Lastsurvivedhuman (int lp_checkedPlayer) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3908E1CC_ae = 14;
    const int auto3908E1CC_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(gv_probes[lp_checkedPlayer]) == false)) {
        return false;
    }

    lv_i = 1;
    for ( ; ( (auto3908E1CC_ai >= 0 && lv_i <= auto3908E1CC_ae) || (auto3908E1CC_ai < 0 && lv_i >= auto3908E1CC_ae) ) ; lv_i += auto3908E1CC_ai ) {
        if ((lv_i != lp_checkedPlayer)) {
            if ((UnitIsAlive(gv_probes[lv_i]) == false)) {
            }
            else {
                return false;
            }
        }

    }
    return true;
}

void gf_CreateProfileReward (int lp_dialog, int lp_offsetX, int lp_offsetY, text lp_text, int lp_achievementNumber, string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, 76, 76, c_anchorTopLeft, lp_offsetX, lp_offsetY, StringToText(""), StringToText(""), "");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_profileRewardsButtons[lp_achievementNumber] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lp_dialog, 76, 76, c_anchorTopLeft, lp_offsetX, lp_offsetY, lp_text, lp_image, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_profileRewardsImage[lp_achievementNumber] = DialogControlLastCreated();
}

void gf_EnableDisableReward (int lp_achievementNumber, int lp_playerNumber, bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(gv_profileRewardsButtons[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
    DialogControlSetEnabled(gv_profileRewardsImage[lp_achievementNumber], PlayerGroupSingle(lp_playerNumber), lp_enableDisable);
}

void gf_CheckStatusofReward (int lp_rewardID, int lp_playerNumber) {
    // Automatic Variable Declarations
    string auto3B2B6A44_val;

    // Implementation
    if ((BankValueGetAsFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_rewards, gv_banksStats.lv_rewards.lv_rewardsUnlocked[lp_rewardID]) == false)) {
        BankValueSetFromFlag(gv_banks[lp_playerNumber], gv_banksSections.lv_rewards, gv_banksStats.lv_rewards.lv_rewardsUnlocked[lp_rewardID], true);
        BankSave(gv_banks[lp_playerNumber]);
        auto3B2B6A44_val = PlayerRace(lp_playerNumber);
        if (auto3B2B6A44_val == "Terr") {
            gf_UnlockAchievement(lp_playerNumber, lp_rewardID, ge_AchievementRace_Terran, 3);
        }
        else if (auto3B2B6A44_val == "Prot") {
            gf_UnlockAchievement(lp_playerNumber, lp_rewardID, ge_AchievementRace_Protoss, 3);
        }
        else if (auto3B2B6A44_val == "Zerg") {
            gf_UnlockAchievement(lp_playerNumber, lp_rewardID, ge_AchievementRace_Zerg, 3);
        }
        else {
        }
        DialogControlSetEnabled(gv_profileRewardsButtons[lp_rewardID], PlayerGroupSingle(lp_playerNumber), true);
        DialogControlSetEnabled(gv_profileRewardsImage[lp_rewardID], PlayerGroupSingle(lp_playerNumber), true);
    }

}

void gf_CheckProbeReward (int lp_playerNumber, int lp_rewardID, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_levelofPlayerHuman[lp_playerNumber] >= lp_level)) {
        TechTreeUpgradeAddLevel(lp_playerNumber, (("BuilderSkin" + IntToString(lp_rewardID))), 1);
        gf_CheckStatusofReward(lp_rewardID, lp_playerNumber);
    }

}

void gf_CheckZealotReward (int lp_playerNumber, int lp_rewardID, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_levelofPlayerVampire[lp_playerNumber] >= lp_level)) {
        TechTreeUpgradeAddLevel(lp_playerNumber, (("VampireSkin" + IntToString((lp_rewardID - 17)))), 1);
        gf_CheckStatusofReward(lp_rewardID, lp_playerNumber);
    }

}

void gf_SetRankSkinAll (int lp_value, int lp_localPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS1", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS5", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS10", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS15", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS20", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "HunterRankS20", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS25", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS30", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS35", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS40", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS45", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "VampireSkinRankS50", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "SpiritRankS1", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS1", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS5", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS10", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "SpiritRankS15", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS20", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "SpiritRankS25", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS25", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS30", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS40", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "SpiritRankS50", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS50", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS60", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS70", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS75", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS80", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS90", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "ProbeRankS100", lp_value);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_localPlayer, "SpiritRankS100", lp_value);
}

void gf_InitLabelRanks () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF0DEAA60_g;
    int autoF0DEAA60_var;
    playergroup autoD2EDED7D_g;
    int autoD2EDED7D_var;

    // Variable Initialization

    // Implementation
    autoF0DEAA60_g = gv_playerGroupProbes;
    autoF0DEAA60_var = -1;
    while (true) {
        autoF0DEAA60_var = PlayerGroupNextPlayer(autoF0DEAA60_g, autoF0DEAA60_var);
        if (autoF0DEAA60_var < 0) { break; }
        UnitAbilityEnable(gv_probes[autoF0DEAA60_var], "ShowHideRanks", true);
        gf_CreateLabelProbeRank(autoF0DEAA60_var);
    }
    autoD2EDED7D_g = gv_playerGroupZealots;
    autoD2EDED7D_var = -1;
    while (true) {
        autoD2EDED7D_var = PlayerGroupNextPlayer(autoD2EDED7D_g, autoD2EDED7D_var);
        if (autoD2EDED7D_var < 0) { break; }
        gf_CreateLabelZealotRank(autoD2EDED7D_var);
    }
}

void gf_IncreaseNumberofGamesinBank () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto5F04B4D4_ae = 14;
    const int auto5F04B4D4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto5F04B4D4_ai >= 0 && lv_i <= auto5F04B4D4_ae) || (auto5F04B4D4_ai < 0 && lv_i >= auto5F04B4D4_ae) ) ; lv_i += auto5F04B4D4_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_gameEnd == false))) {
            SoundPlay(SoundLink("VampireReady", -1), PlayerGroupAll(), 100.0, 0.0);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games) + 1));
            if (((gv_side[lv_i] != "Zealot") && (UnitIsAlive(gv_probes[lv_i]) == true))) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) + 1));
            }
            else {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games) + 1));
            }
            BankSave(gv_banks[lv_i]);
        }

    }
}

void gf_UpdateLeaderboardRanks () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto48D4D6BD_ae = 14;
    const int auto48D4D6BD_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto48D4D6BD_ai >= 0 && lv_i <= auto48D4D6BD_ae) || (auto48D4D6BD_ai < 0 && lv_i >= auto48D4D6BD_ae) ) ; lv_i += auto48D4D6BD_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BoardItemSetText(gv_leaderboard, 5, gv_rowofPlayer[lv_i], IntToText(gv_pointsHuman[lv_i]));
            BoardItemSetText(gv_leaderboard, 6, gv_rowofPlayer[lv_i], StringToText(gf_CalculateRankColored(gv_pointsHuman[lv_i], lv_i)));
        }

        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BoardItemSetText(gv_leaderboard, 5, gv_rowofPlayer[lv_i], IntToText(gv_pointsVampire[lv_i]));
            BoardItemSetText(gv_leaderboard, 6, gv_rowofPlayer[lv_i], StringToText(gf_CalculateRankColored(gv_pointsVampire[lv_i], gv_yInc)));
        }

    }
    BoardItemSetText(gv_leaderboard, 3, gv_averageRow, (StringExternal("Param/Value/68296D1C") + IntToText(gv_playersUsedforAverageProbePoints) + StringExternal("Param/Value/E9D7751D")));
    BoardItemSetText(gv_leaderboard, 5, gv_averageRow, IntToText(gv_pointsAverageHuman));
    BoardItemSetText(gv_leaderboard, 6, gv_averageRow, StringToText(gf_CalculateRankColored(gv_pointsAverageHuman, lv_i)));
}

void gf_WritePreviousGameData () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto5D3927F8_ae = 14;
    const int auto5D3927F8_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto5D3927F8_ai >= 0 && lv_i <= auto5D3927F8_ae) || (auto5D3927F8_ai < 0 && lv_i >= auto5D3927F8_ae) ) ; lv_i += auto5D3927F8_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman, gv_xPinGameforHuman[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire, gv_xPinGameforVampire[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostHuman, gv_pointsforLossHuman[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostVampire, gv_pointsforLossVampire[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostTotal, gv_pointsforLossTotal[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinHuman, gv_pointsforWinHuman[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinVampire, gv_pointsforWinVampire[lv_i]);
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinTotal, gv_pointsforWinTotal[lv_i]);
            BankSave(gv_banks[lv_i]);
        }

    }
}

void gf_CalculatePreviousGameData (int lp_averagePointsHuman, int lp_averagePointsVampire, int lp_averagePointsTotal) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoE367411C_ae = 14;
    const int autoE367411C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoE367411C_ai >= 0 && lv_i <= autoE367411C_ae) || (autoE367411C_ai < 0 && lv_i >= autoE367411C_ae) ) ; lv_i += autoE367411C_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            gv_pointsforWinHuman[lv_i] = gf_CalculatePointsforWin(gv_pointsHuman[lv_i], lp_averagePointsVampire);
            gv_pointsforLossHuman[lv_i] = gf_CalculatePointsforLoss(gv_pointsHuman[lv_i], lp_averagePointsVampire);
            gv_pointsforWinVampire[lv_i] = 0;
            gv_pointsforLossVampire[lv_i] = 0;
        }

        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            gv_pointsforWinVampire[lv_i] = gf_CalculatePointsforWin(gv_pointsVampire[lv_i], lp_averagePointsHuman);
            gv_pointsforLossVampire[lv_i] = gf_CalculatePointsforLoss(gv_pointsVampire[lv_i], lp_averagePointsHuman);
            gv_pointsforWinHuman[lv_i] = 0;
            gv_pointsforLossHuman[lv_i] = 0;
        }

        gv_pointsforWinTotal[lv_i] = gf_CalculatePointsforWin(gv_pointsTotal[lv_i], lp_averagePointsTotal);
        gv_pointsforLossTotal[lv_i] = gf_CalculatePointsforLoss(gv_pointsTotal[lv_i], lp_averagePointsTotal);
    }
}

void gf_CalculateAveragePoints () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_tempForSort;
    int lv_averagePointsHuman;
    int lv_averagePointsVampire;
    int lv_averagePointsTotal;
    int lv_numberofHumans;
    int lv_numberofVampires;
    int lv_numberofPlayersTotal;
    int[15] lv_playersPointsArray;

    // Automatic Variable Declarations
    const int auto75954F73_ae = 14;
    const int auto75954F73_ai = 1;
    const int autoFD5C81AE_ae = 14;
    const int autoFD5C81AE_ai = 1;
    int autoEE279E87_ae;
    const int autoEE279E87_ai = 1;
    int auto55EE7167_ae;
    const int auto55EE7167_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto75954F73_ai >= 0 && lv_i <= auto75954F73_ae) || (auto75954F73_ai < 0 && lv_i >= auto75954F73_ae) ) ; lv_i += auto75954F73_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman, true);
            BankSave(gv_banks[lv_i]);
            lv_numberofHumans += 1;
            lv_playersPointsArray[(lv_numberofHumans-1)] = gv_pointsHuman[lv_i];
            lv_numberofPlayersTotal += 1;
        }

        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman, false);
            BankSave(gv_banks[lv_i]);
            lv_numberofVampires += 1;
            lv_averagePointsVampire = (lv_averagePointsVampire + gv_pointsVampire[lv_i]);
            lv_numberofPlayersTotal += 1;
        }

    }
    lv_i = 1;
    for ( ; ( (autoFD5C81AE_ai >= 0 && lv_i <= autoFD5C81AE_ae) || (autoFD5C81AE_ai < 0 && lv_i >= autoFD5C81AE_ae) ) ; lv_i += autoFD5C81AE_ai ) {
        lv_averagePointsTotal = (lv_averagePointsTotal + gv_pointsTotal[lv_i]);
    }
    if ((lv_numberofHumans != 0)) {
        autoEE279E87_ae = (lv_numberofHumans-1);
        lv_i = 1;
        for ( ; ( (autoEE279E87_ai >= 0 && lv_i <= autoEE279E87_ae) || (autoEE279E87_ai < 0 && lv_i >= autoEE279E87_ae) ) ; lv_i += autoEE279E87_ai ) {
            lv_tempForSort = lv_playersPointsArray[lv_i];
            lv_j = lv_i;
            while (((lv_j > 0) && (lv_playersPointsArray[(lv_j-1)] > lv_tempForSort))) {
                lv_playersPointsArray[lv_j] = lv_playersPointsArray[(lv_j-1)];
                lv_j -= 1;
            }
            lv_playersPointsArray[lv_j] = lv_tempForSort;
        }
        gv_playersUsedforAverageProbePoints = FixedToInt(Ceiling((lv_numberofHumans / 2.0)));
        gv_playersUsedforAverageProbePoints = MinI(gv_playersUsedforAverageProbePoints, 4);
        auto55EE7167_ae = gv_playersUsedforAverageProbePoints;
        lv_i = 1;
        for ( ; ( (auto55EE7167_ai >= 0 && lv_i <= auto55EE7167_ae) || (auto55EE7167_ai < 0 && lv_i >= auto55EE7167_ae) ) ; lv_i += auto55EE7167_ai ) {
            lv_averagePointsHuman = (lv_averagePointsHuman + lv_playersPointsArray[(lv_numberofHumans - lv_i)]);
        }
        gv_playersUsedforAverageProbePoints = MaxI(gv_playersUsedforAverageProbePoints, 1);
        lv_averagePointsHuman = FloorI((lv_averagePointsHuman / gv_playersUsedforAverageProbePoints));
        gv_pointsAverageHuman = lv_averagePointsHuman;
    }

    if ((lv_numberofPlayersTotal != 0)) {
        lv_averagePointsTotal = (lv_averagePointsTotal / lv_numberofPlayersTotal);
    }

    if ((lv_numberofVampires != 0)) {
        lv_averagePointsVampire = (lv_averagePointsVampire / lv_numberofVampires);
    }

    gf_CalculatePreviousGameData(lv_averagePointsHuman, lv_averagePointsVampire, lv_averagePointsTotal);
}

void gf_CalculateAveragePointsOLD () {
    // Variable Declarations
    int lv_i;
    int lv_averagePointsHuman;
    int lv_averagePointsVampire;
    int lv_averagePointsTotal;
    int lv_numberofHumans;
    int lv_numberofVampires;
    int lv_numberofPlayersTotal;

    // Automatic Variable Declarations
    const int auto6B8C9248_ae = 14;
    const int auto6B8C9248_ai = 1;
    const int auto0B7F6297_ae = 14;
    const int auto0B7F6297_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto6B8C9248_ai >= 0 && lv_i <= auto6B8C9248_ae) || (auto6B8C9248_ai < 0 && lv_i >= auto6B8C9248_ae) ) ; lv_i += auto6B8C9248_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman, true);
            BankSave(gv_banks[lv_i]);
            lv_numberofHumans += 1;
            lv_averagePointsHuman = (lv_averagePointsHuman + gv_pointsHuman[lv_i]);
            lv_numberofPlayersTotal += 1;
        }

        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman, false);
            BankSave(gv_banks[lv_i]);
            lv_numberofVampires += 1;
            lv_averagePointsVampire = (lv_averagePointsVampire + gv_pointsVampire[lv_i]);
            lv_numberofPlayersTotal += 1;
        }

    }
    lv_i = 1;
    for ( ; ( (auto0B7F6297_ai >= 0 && lv_i <= auto0B7F6297_ae) || (auto0B7F6297_ai < 0 && lv_i >= auto0B7F6297_ae) ) ; lv_i += auto0B7F6297_ai ) {
        lv_averagePointsTotal = (lv_averagePointsTotal + gv_pointsTotal[lv_i]);
    }
    if ((lv_numberofHumans != 0)) {
        lv_averagePointsHuman = (lv_averagePointsHuman / lv_numberofHumans);
    }

    if ((lv_numberofPlayersTotal != 0)) {
        lv_averagePointsTotal = (lv_averagePointsTotal / lv_numberofPlayersTotal);
    }

    if ((lv_numberofVampires != 0)) {
        lv_averagePointsVampire = (lv_averagePointsVampire / lv_numberofVampires);
    }

    gf_CalculatePreviousGameData(lv_averagePointsHuman, lv_averagePointsVampire, lv_averagePointsTotal);
}

void gf_UpdateStatsLeaderboard () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int autoF189F6E7_ae = 14;
    const int autoF189F6E7_ai = 1;
    const int auto56503040_ae = 14;
    const int auto56503040_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoF189F6E7_ai >= 0 && lv_i <= autoF189F6E7_ae) || (autoF189F6E7_ai < 0 && lv_i >= autoF189F6E7_ae) ) ; lv_i += autoF189F6E7_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            gv_levelofPlayerHuman[lv_i] = gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP));
            gv_levelofPlayerVampire[lv_i] = gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP));
            gv_levelofPlayerTotal[lv_i] = gf_GetLevelofPlayer(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP));
            gv_xPofPlayerHuman[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP);
            gv_xPofPlayerVampire[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP);
            gv_xPofPlayerTotal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP);
            if ((UnitIsAlive(gv_probes[lv_i]) == true)) {
                gv_xPinGameforHuman[lv_i] = 100;
                gv_xPofPlayerHuman[lv_i] += 100;
                gv_levelofPlayerHuman[lv_i] = gf_GetLevelofPlayer(gv_xPofPlayerHuman[lv_i]);
            }

            if ((UnitIsAlive(gv_zealots[lv_i]) == true)) {
                gv_xPinGameforVampire[lv_i] = 100;
                gv_xPofPlayerVampire[lv_i] += 100;
                gv_levelofPlayerVampire[lv_i] = gf_GetLevelofPlayer(gv_xPofPlayerVampire[lv_i]);
            }

            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) >= 500000)) {
                gv_pointsHuman[lv_i] = 500000;
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, 500000);
                BankSave(gv_banks[lv_i]);
            }
            else {
                gv_pointsHuman[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points);
            }
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points) >= 500000)) {
                gv_pointsTotal[lv_i] = 500000;
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, 500000);
                BankSave(gv_banks[lv_i]);
            }
            else {
                gv_pointsTotal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points);
            }
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points) >= 500000)) {
                gv_pointsVampire[lv_i] = 500000;
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, 500000);
                BankSave(gv_banks[lv_i]);
            }
            else {
                gv_pointsVampire[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points);
            }
            BoardItemSetText(gv_statsLeaderboard[lv_i], 5, 2, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 6, 2, StringToText(BankValueGetAsString(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_rank)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 5, 3, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 6, 3, StringToText(BankValueGetAsString(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_rank)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 5, 4, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 6, 4, StringToText(BankValueGetAsString(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_rank)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 7, 2, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 7, 3, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 7, 4, IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP)));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 8, 2, IntToText(gv_levelofPlayerHuman[lv_i]));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 8, 3, IntToText(gv_levelofPlayerVampire[lv_i]));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 8, 4, IntToText(gv_levelofPlayerTotal[lv_i]));
            BoardMinimizeSetState(gv_statsLeaderboard[lv_i], PlayerGroupAll(), true);
            lv_j = 1;
            for ( ; ( (auto56503040_ai >= 0 && lv_j <= auto56503040_ae) || (auto56503040_ai < 0 && lv_j >= auto56503040_ae) ) ; lv_j += auto56503040_ai ) {
                if ((lv_i != lv_j)) {
                    BoardSetState(gv_statsLeaderboard[lv_i], PlayerGroupSingle(lv_j), c_boardStateShowing, false);
                }

            }
        }

    }
}

void gf_CheckPreviousGame () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto701E886B_ae = 14;
    const int auto701E886B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto701E886B_ai >= 0 && lv_i <= auto701E886B_ae) || (auto701E886B_ai < 0 && lv_i >= auto701E886B_ae) ) ; lv_i += auto701E886B_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame) == false)) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, 0);
                if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman) == true)) {
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_winningStreak, 0);
                }

                if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman) == false)) {
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak, 0);
                }

                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman)));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire)));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal)));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) - BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostHuman)));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points) - BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostVampire)));
                BankSave(gv_banks[lv_i]);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points)) / 2));
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_rank, gf_CalculateRank(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points)));
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_rank, gf_CalculateRank(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points)));
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_rank, gf_CalculateRank(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points)));
                BankSave(gv_banks[lv_i]);
            }

            if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_firstTime) == true)) {
                BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_firstTime, false);
                BankSave(gv_banks[lv_i]);
            }
            else {
                if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_isHuman) == true)) {
                    if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame) == true)) {
                        BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, false);
                        BankSave(gv_banks[lv_i]);
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/28FB9E7F") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinHuman)) + StringExternal("Param/Value/B6EE8FBC"))));
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/524B56AA") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman)) + StringExternal("Param/Value/4F0F634C"))));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/8277CDA6") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostHuman)) + StringExternal("Param/Value/D6C0BF26"))));
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/16698AEC") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman)) + StringExternal("Param/Value/42546DB5"))));
                    }
                }
                else {
                    if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame) == true)) {
                        BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, false);
                        BankSave(gv_banks[lv_i]);
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/2A626185") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinVampire)) + StringExternal("Param/Value/B12C1694"))));
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/ADC452A6") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire)) + StringExternal("Param/Value/10934F67"))));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/1203F9DF") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsLostVampire)) + StringExternal("Param/Value/FFBBD6C5"))));
                        UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/FC4220BA") + (IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire)) + StringExternal("Param/Value/083734A6"))));
                    }
                }
            }
        }

    }
}

void gf_CheckStatsofPlayers () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto40F12438_ae = 14;
    const int auto40F12438_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto40F12438_ai >= 0 && lv_i <= auto40F12438_ae) || (auto40F12438_ai < 0 && lv_i >= auto40F12438_ae) ) ; lv_i += auto40F12438_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) <= 0)) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, 1000);
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_rank, "D");
            }

            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points) <= 0)) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, 1000);
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_rank, "D");
            }

            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points) <= 0)) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, 1000);
                BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_rank, "D");
            }

            BankSave(gv_banks[lv_i]);
        }

    }
}

void gf_CreateStatsLeaderboard () {
    // Variable Declarations
    int lv_i;
    fixed lv_gamerate;
    fixed lv_winrate;
    fixed lv_lossrate;

    // Automatic Variable Declarations
    const int autoF6DD2162_ae = 14;
    const int autoF6DD2162_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoF6DD2162_ai >= 0 && lv_i <= autoF6DD2162_ae) || (autoF6DD2162_ai < 0 && lv_i >= autoF6DD2162_ae) ) ; lv_i += autoF6DD2162_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BoardCreate(8, 4, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/E17DBA71")), Color(100.00, 100.00, 100.00));
            gv_statsLeaderboard[lv_i] = BoardLastCreated();
            BoardItemSetText(gv_statsLeaderboard[lv_i], 2, 1, StringExternal("Param/Value/A26F3A74"));
            BoardItemSetBackgroundColor(gv_statsLeaderboard[lv_i], 2, 1, Color(50.20, 50.20, 50.20));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 3, 1, StringExternal("Param/Value/F7CDB8FA"));
            BoardItemSetBackgroundColor(gv_statsLeaderboard[lv_i], 3, 1, Color(0.00, 50.20, 0.00));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 4, 1, StringExternal("Param/Value/4BA27B90"));
            BoardItemSetBackgroundColor(gv_statsLeaderboard[lv_i], 4, 1, ColorWithAlpha(100.00, 0.00, 0.00, 49.80));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 5, 1, StringExternal("Param/Value/BFE31026"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 6, 1, StringExternal("Param/Value/65B5762A"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 7, 1, StringExternal("Param/Value/5E37E20F"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 8, 1, StringExternal("Param/Value/BEEE466C"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 1, 2, StringExternal("Param/Value/38253977"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 1, 3, StringExternal("Param/Value/97A01FDD"));
            BoardItemSetText(gv_statsLeaderboard[lv_i], 1, 4, StringExternal("Param/Value/D8F48790"));
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) - (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins) + 0)));
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games) - (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins) + 0)));
            BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games) - (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins) + 0)));
            BankSave(gv_banks[lv_i]);
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) != 0)) {
                lv_gamerate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games)));
                lv_winrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games)));
                lv_lossrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games)));
            }

            BoardItemSetText(BoardLastCreated(), 2, 2, ((StringToText("") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games))) + (StringExternal("Param/Value/C2D771BB") + (FixedToText((lv_gamerate * 100.0), 1) + StringExternal("Param/Value/A9094CC9")))));
            BoardItemSetText(BoardLastCreated(), 3, 2, ((StringExternal("Param/Value/ED338922") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins))) + (StringExternal("Param/Value/45FDBD7D") + (FixedToText((lv_winrate * 100.0), 1) + StringExternal("Param/Value/1960526B")))));
            BoardItemSetText(BoardLastCreated(), 4, 2, ((StringExternal("Param/Value/A408D2C3") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses))) + (StringExternal("Param/Value/8DDFC8DB") + (FixedToText((lv_lossrate * 100.0), 1) + StringExternal("Param/Value/1C4124DF")))));
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games) != 0)) {
                lv_gamerate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games)));
                lv_winrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games)));
                lv_lossrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games)));
            }
            else {
                lv_gamerate = 0.0;
                lv_winrate = 0.0;
                lv_lossrate = 0.0;
            }
            BoardItemSetText(BoardLastCreated(), 2, 3, ((StringToText("") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games))) + (StringExternal("Param/Value/15EB17E5") + (FixedToText((lv_gamerate * 100.0), 1) + StringExternal("Param/Value/FED554D2")))));
            BoardItemSetText(BoardLastCreated(), 3, 3, ((StringExternal("Param/Value/A6D8D795") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins))) + (StringExternal("Param/Value/E018E27D") + (FixedToText((lv_winrate * 100.0), 1) + StringExternal("Param/Value/535B7FAC")))));
            BoardItemSetText(BoardLastCreated(), 4, 3, ((StringExternal("Param/Value/C7B49B54") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses))) + (StringExternal("Param/Value/6B9B14E7") + (FixedToText((lv_lossrate * 100.0), 1) + StringExternal("Param/Value/C60B3BEE")))));
            if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games) != 0)) {
                lv_winrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games)));
                lv_lossrate = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games)));
            }
            else {
                lv_gamerate = 0.0;
                lv_winrate = 0.0;
                lv_lossrate = 0.0;
            }
            BoardItemSetText(BoardLastCreated(), 2, 4, ((StringToText("") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games))) + StringToText("")));
            BoardItemSetText(BoardLastCreated(), 3, 4, ((StringExternal("Param/Value/E8C9D488") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins))) + (StringExternal("Param/Value/CDB35519") + (FixedToText((lv_winrate * 100.0), 1) + StringExternal("Param/Value/93A12C2B")))));
            BoardItemSetText(BoardLastCreated(), 4, 4, ((StringExternal("Param/Value/924564C7") + IntToText(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses))) + (StringExternal("Param/Value/86E6D42E") + (FixedToText((lv_lossrate * 100.0), 1) + StringExternal("Param/Value/EB79085D")))));
        }

    }
}

int gf_GetLevelofPlayer (int lp_xP) {
    // Variable Declarations
    int lv_first;
    int lv_last;
    int lv_mid;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_last = 200;

    // Implementation
    while ((lv_first < lv_last)) {
        lv_mid = (lv_first + ((lv_last - lv_first) / 2));
        if ((lp_xP <= gv_xPTable[lv_mid])) {
            lv_last = lv_mid;
        }
        else {
            lv_first = (lv_mid + 1);
        }
    }
    if ((lp_xP == gv_xPTable[lv_last])) {
        return lv_last;
    }
    else {
        return (lv_last - 1);
    }
}

int gf_CalculatePointsMinMaxforTime (int lp_calcualatedPoints, bool lp_playerAlive) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameTimeMinutes >= 50)) {
        if ((lp_playerAlive == true)) {
            return MaxI(lp_calcualatedPoints, 250);
        }
        else {
            return MaxI(lp_calcualatedPoints, 125);
        }
    }

    if (((gv_gameTimeMinutes >= 40) && (gv_gameTimeMinutes <= 49))) {
        if ((lp_playerAlive == true)) {
            return MaxI(lp_calcualatedPoints, 200);
        }
        else {
            return MaxI(lp_calcualatedPoints, 100);
        }
    }

    if (((gv_gameTimeMinutes >= 30) && (gv_gameTimeMinutes <= 39))) {
        if ((lp_playerAlive == true)) {
            return MaxI(lp_calcualatedPoints, 150);
        }
        else {
            return MaxI(lp_calcualatedPoints, 75);
        }
    }

    if (((gv_gameTimeMinutes >= 20) && (gv_gameTimeMinutes <= 29))) {
        if ((lp_playerAlive == true)) {
            return MaxI(lp_calcualatedPoints, 100);
        }
        else {
            return MaxI(lp_calcualatedPoints, 50);
        }
    }

    if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 19))) {
        if ((lp_playerAlive == true)) {
            return MaxI(lp_calcualatedPoints, 50);
        }
        else {
            return MaxI(lp_calcualatedPoints, 25);
        }
    }
    else {
        return lp_calcualatedPoints;
    }
}

int gf_CalculatePointsMinMaxforTimeOLD (int lp_calcualatedPoints) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_gameTimeMinutes >= 50)) {
        if ((lp_calcualatedPoints < 250)) {
            return 250;
        }
        else {
            return lp_calcualatedPoints;
        }
    }

    if (((gv_gameTimeMinutes >= 40) && (gv_gameTimeMinutes <= 49))) {
        if ((lp_calcualatedPoints < 200)) {
            return 200;
        }
        else {
            return lp_calcualatedPoints;
        }
    }

    if (((gv_gameTimeMinutes >= 30) && (gv_gameTimeMinutes <= 39))) {
        if ((lp_calcualatedPoints < 150)) {
            return 150;
        }
        else {
            return lp_calcualatedPoints;
        }
    }

    if (((gv_gameTimeMinutes >= 20) && (gv_gameTimeMinutes <= 29))) {
        if ((lp_calcualatedPoints < 100)) {
            return 100;
        }
        else {
            return lp_calcualatedPoints;
        }
    }

    if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 19))) {
        if ((lp_calcualatedPoints < 50)) {
            return 50;
        }
        else {
            return lp_calcualatedPoints;
        }
    }
    else {
        return lp_calcualatedPoints;
    }
}

int gf_CalculatePointsforWin (int lp_pointsofPlayer, int lp_averagePoints) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_averagePoints - lp_pointsofPlayer) >= 0)) {
        if (((lp_averagePoints - lp_pointsofPlayer) < 1000)) {
            return 100;
        }
        else {
            if ((((lp_averagePoints - lp_pointsofPlayer) >= 1000) && ((lp_averagePoints - lp_pointsofPlayer) < 2000))) {
                return 125;
            }
            else {
                if ((((lp_averagePoints - lp_pointsofPlayer) >= 2000) && ((lp_averagePoints - lp_pointsofPlayer) < 3000))) {
                    return 150;
                }
                else {
                    if ((((lp_averagePoints - lp_pointsofPlayer) >= 3000) && ((lp_averagePoints - lp_pointsofPlayer) < 4000))) {
                        return 175;
                    }
                    else {
                        if ((((lp_averagePoints - lp_pointsofPlayer) >= 4000) && ((lp_averagePoints - lp_pointsofPlayer) < 5000))) {
                            return 200;
                        }
                        else {
                            if ((((lp_averagePoints - lp_pointsofPlayer) >= 5000) && ((lp_averagePoints - lp_pointsofPlayer) < 6000))) {
                                return 225;
                            }
                            else {
                                if ((((lp_averagePoints - lp_pointsofPlayer) >= 6000) && ((lp_averagePoints - lp_pointsofPlayer) < 7000))) {
                                    return 250;
                                }
                                else {
                                    if ((((lp_averagePoints - lp_pointsofPlayer) >= 7000) && ((lp_averagePoints - lp_pointsofPlayer) < 8000))) {
                                        return 275;
                                    }
                                    else {
                                        if ((((lp_averagePoints - lp_pointsofPlayer) >= 8000) && ((lp_averagePoints - lp_pointsofPlayer) < 9000))) {
                                            return 300;
                                        }
                                        else {
                                            if ((((lp_averagePoints - lp_pointsofPlayer) >= 9000) && ((lp_averagePoints - lp_pointsofPlayer) < 10000))) {
                                                return 325;
                                            }
                                            else {
                                                if ((((lp_averagePoints - lp_pointsofPlayer) >= 10000) && ((lp_averagePoints - lp_pointsofPlayer) < 11000))) {
                                                    return 350;
                                                }
                                                else {
                                                    return 375;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if (((lp_pointsofPlayer - lp_averagePoints) < 1000)) {
            return 100;
        }
        else {
            if ((((lp_pointsofPlayer - lp_averagePoints) >= 1000) && ((lp_pointsofPlayer - lp_averagePoints) < 2000))) {
                return 75;
            }
            else {
                if ((((lp_pointsofPlayer - lp_averagePoints) >= 2000) && ((lp_pointsofPlayer - lp_averagePoints) < 3000))) {
                    return 50;
                }
                else {
                    return 50;
                }
            }
        }
    }
}

int gf_CalculatePointsforLoss (int lp_pointsofPlayer, int lp_averagePoints) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_pointsofPlayer - lp_averagePoints) >= 0)) {
        if (((lp_pointsofPlayer - lp_averagePoints) < 1000)) {
            return 100;
        }
        else {
            if ((((lp_pointsofPlayer - lp_averagePoints) >= 1000) && ((lp_pointsofPlayer - lp_averagePoints) < 2000))) {
                return 125;
            }
            else {
                if ((((lp_pointsofPlayer - lp_averagePoints) >= 2000) && ((lp_pointsofPlayer - lp_averagePoints) < 3000))) {
                    return 150;
                }
                else {
                    if ((((lp_pointsofPlayer - lp_averagePoints) >= 3000) && ((lp_pointsofPlayer - lp_averagePoints) < 4000))) {
                        return 175;
                    }
                    else {
                        if ((((lp_pointsofPlayer - lp_averagePoints) >= 4000) && ((lp_pointsofPlayer - lp_averagePoints) < 5000))) {
                            return 200;
                        }
                        else {
                            if ((((lp_pointsofPlayer - lp_averagePoints) >= 5000) && ((lp_pointsofPlayer - lp_averagePoints) < 6000))) {
                                return 225;
                            }
                            else {
                                if ((((lp_pointsofPlayer - lp_averagePoints) >= 6000) && ((lp_pointsofPlayer - lp_averagePoints) < 7000))) {
                                    return 250;
                                }
                                else {
                                    if ((((lp_pointsofPlayer - lp_averagePoints) >= 7000) && ((lp_pointsofPlayer - lp_averagePoints) < 8000))) {
                                        return 275;
                                    }
                                    else {
                                        if ((((lp_pointsofPlayer - lp_averagePoints) >= 8000) && ((lp_pointsofPlayer - lp_averagePoints) < 9000))) {
                                            return 300;
                                        }
                                        else {
                                            if ((((lp_pointsofPlayer - lp_averagePoints) >= 9000) && ((lp_pointsofPlayer - lp_averagePoints) < 10000))) {
                                                return 325;
                                            }
                                            else {
                                                if ((((lp_pointsofPlayer - lp_averagePoints) >= 10000) && ((lp_pointsofPlayer - lp_averagePoints) < 11000))) {
                                                    return 350;
                                                }
                                                else {
                                                    return 350;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        if (((lp_averagePoints - lp_pointsofPlayer) < 1000)) {
            return 100;
        }
        else {
            if ((((lp_averagePoints - lp_pointsofPlayer) >= 1000) && ((lp_averagePoints - lp_pointsofPlayer) < 2000))) {
                return 75;
            }
            else {
                if ((((lp_averagePoints - lp_pointsofPlayer) >= 2000) && ((lp_averagePoints - lp_pointsofPlayer) < 3000))) {
                    return 50;
                }
                else {
                    return 25;
                }
            }
        }
    }
}

string gf_CalculateRankColored (int lp_points, int lp_locPlayerNum) {
    // Variable Declarations
    int lv_sRank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gf_PlayerIsTROLL(lp_locPlayerNum) == true))) {
        return ("<c val=\"FFFF00\">TROLL (Please Kick Me!)" + "</c>");
    }

    if (((gf_PlayerIsModerator(lp_locPlayerNum) == true))) {
        if ((lp_points >= 12000)) {
            lv_sRank = (((lp_points - 12000) / 1000) + 1);
            return ("<c val=\"FFA500\">MOD-" + (IntToString(lv_sRank) + "</c>"));
        }
        else {
            return ("<c val=\"EE82EE\">Moderator" + "</c>");
        }
    }

    if ((lp_points >= 12000)) {
        lv_sRank = (((lp_points - 12000) / 1000) + 1);
        return ("<c val=\"FFFF00\">S-" + (IntToString(lv_sRank) + "</c>"));
    }
    else {
        if ((lp_points < 1000)) {
            return "<c val=\"FF0000\">D-</c>";
        }
        else {
            if (((lp_points >= 1000) && (lp_points < 2000))) {
                return "<c val=\"FF0000\">D</c>";
            }
            else {
                if (((lp_points >= 2000) && (lp_points < 3000))) {
                    return "<c val=\"FF0000\">D+</c>";
                }
                else {
                    if (((lp_points >= 3000) && (lp_points < 4000))) {
                        return "<c val=\"FF8000\">C-</c>";
                    }
                    else {
                        if (((lp_points >= 4000) && (lp_points < 5000))) {
                            return "<c val=\"FF8000\">C</c>";
                        }
                        else {
                            if (((lp_points >= 5000) && (lp_points < 6000))) {
                                return "<c val=\"FF8000\">C+</c>";
                            }
                            else {
                                if (((lp_points >= 6000) && (lp_points < 7000))) {
                                    return "<c val=\"2D2DFF\">B-</c>";
                                }
                                else {
                                    if (((lp_points >= 7000) && (lp_points < 8000))) {
                                        return "<c val=\"2D2DFF\">B</c>";
                                    }
                                    else {
                                        if (((lp_points >= 8000) && (lp_points < 9000))) {
                                            return "<c val=\"2D2DFF\">B+</c>";
                                        }
                                        else {
                                            if (((lp_points >= 9000) && (lp_points < 10000))) {
                                                return "<c val=\"008000\">A-</c>";
                                            }
                                            else {
                                                if (((lp_points >= 10000) && (lp_points < 11000))) {
                                                    return "<c val=\"008000\">A</c>";
                                                }
                                                else {
                                                    return "<c val=\"008000\">A+</c>";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

string gf_CalculateRank (int lp_points) {
    // Variable Declarations
    int lv_sRank;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_points >= 12000)) {
        lv_sRank = (((lp_points - 12000) / 1000) + 1);
        return ("S-" + IntToString(lv_sRank));
    }
    else {
        if ((lp_points < 1000)) {
            return "D-";
        }
        else {
            if (((lp_points >= 1000) && (lp_points < 2000))) {
                return "D";
            }
            else {
                if (((lp_points >= 2000) && (lp_points < 3000))) {
                    return "D+";
                }
                else {
                    if (((lp_points >= 3000) && (lp_points < 4000))) {
                        return "C-";
                    }
                    else {
                        if (((lp_points >= 4000) && (lp_points < 5000))) {
                            return "C";
                        }
                        else {
                            if (((lp_points >= 5000) && (lp_points < 6000))) {
                                return "C+";
                            }
                            else {
                                if (((lp_points >= 6000) && (lp_points < 7000))) {
                                    return "B-";
                                }
                                else {
                                    if (((lp_points >= 7000) && (lp_points < 8000))) {
                                        return "B";
                                    }
                                    else {
                                        if (((lp_points >= 8000) && (lp_points < 9000))) {
                                            return "B+";
                                        }
                                        else {
                                            if (((lp_points >= 9000) && (lp_points < 10000))) {
                                                return "A-";
                                            }
                                            else {
                                                if (((lp_points >= 10000) && (lp_points < 11000))) {
                                                    return "A";
                                                }
                                                else {
                                                    return "A+";
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void gf_WritePlayerInfo () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto842E7606_ae = 14;
    const int auto842E7606_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto842E7606_ai >= 0 && lv_i <= auto842E7606_ae) || (auto842E7606_ai < 0 && lv_i >= auto842E7606_ae) ) ; lv_i += auto842E7606_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BankValueSetFromString(gv_banks[lv_i], gv_banksSections.lv_playerInfo, gv_banksStats.lv_playerInfo.lv_playerHandle, PlayerHandle(lv_i));
            BankValueSetFromText(gv_banks[lv_i], gv_banksSections.lv_playerInfo, gv_banksStats.lv_playerInfo.lv_playerName, PlayerName(lv_i));
            BankSave(gv_banks[lv_i]);
        }

    }
}

void gf_GenerateXPTable () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoFEFC24AC_ae = 200;
    const int autoFEFC24AC_ai = 1;

    // Variable Initialization

    // Implementation
    gv_xPTable[1] = 100;
    lv_i = 2;
    for ( ; ( (autoFEFC24AC_ai >= 0 && lv_i <= autoFEFC24AC_ae) || (autoFEFC24AC_ai < 0 && lv_i >= autoFEFC24AC_ae) ) ; lv_i += autoFEFC24AC_ai ) {
        gv_xPTable[lv_i] = (gv_xPTable[(lv_i - 1)] + (100 * (lv_i - 1)));
    }
}

void gf_AFKDetectStart () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoD4A63DFA_ae = 15;
    const int autoD4A63DFA_ai = 1;
    int autoC8D73ECD_val;
    int auto3EE01E84_val;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (autoD4A63DFA_ai >= 0 && lv_i <= autoD4A63DFA_ae) || (autoD4A63DFA_ai < 0 && lv_i >= autoD4A63DFA_ae) ) ; lv_i += autoD4A63DFA_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            gv_aFKDetectInProgress[lv_i] = true;
            gv_aFKPlayer[lv_i] = true;
            autoC8D73ECD_val = lv_i;
            if (autoC8D73ECD_val == 1) {
                TriggerEnable(gt_AFKDetectPlayer1, true);
            }
            else if (autoC8D73ECD_val == 2) {
                TriggerEnable(gt_AFKDetectPlayer2, true);
            }
            else if (autoC8D73ECD_val == 3) {
                TriggerEnable(gt_AFKDetectPlayer3, true);
            }
            else if (autoC8D73ECD_val == 4) {
                TriggerEnable(gt_AFKDetectPlayer4, true);
            }
            else if (autoC8D73ECD_val == 5) {
                TriggerEnable(gt_AFKDetectPlayer5, true);
            }
            else if (autoC8D73ECD_val == 6) {
                TriggerEnable(gt_AFKDetectPlayer6, true);
            }
            else if (autoC8D73ECD_val == 7) {
                TriggerEnable(gt_AFKDetectPlayer7, true);
            }
            else if (autoC8D73ECD_val == 8) {
                TriggerEnable(gt_AFKDetectPlayer8, true);
            }
            else if (autoC8D73ECD_val == 9) {
                TriggerEnable(gt_AFKDetectPlayer9, true);
            }
            else if (autoC8D73ECD_val == 10) {
                TriggerEnable(gt_AFKDetectPlayer10, true);
            }
            else if (autoC8D73ECD_val == 11) {
                TriggerEnable(gt_AFKDetectPlayer11, true);
            }
            else if (autoC8D73ECD_val == 12) {
                TriggerEnable(gt_AFKDetectPlayer12, true);
            }
            else if (autoC8D73ECD_val == 13) {
                TriggerEnable(gt_AFKDetectPlayer13, true);
            }
            else if (autoC8D73ECD_val == 14) {
                TriggerEnable(gt_AFKDetectPlayer14, true);
            }
            else {
            }
        }
        else {
            gv_aFKDetectInProgress[lv_i] = false;
            gv_aFKPlayer[lv_i] = false;
            auto3EE01E84_val = lv_i;
            if (auto3EE01E84_val == 0) {
                TriggerEnable(gt_AFKDetectPlayer0, false);
            }
            else if (auto3EE01E84_val == 1) {
                TriggerEnable(gt_AFKDetectPlayer1, false);
            }
            else if (auto3EE01E84_val == 2) {
                TriggerEnable(gt_AFKDetectPlayer2, false);
            }
            else if (auto3EE01E84_val == 3) {
                TriggerEnable(gt_AFKDetectPlayer3, false);
            }
            else if (auto3EE01E84_val == 4) {
                TriggerEnable(gt_AFKDetectPlayer4, false);
            }
            else if (auto3EE01E84_val == 5) {
                TriggerEnable(gt_AFKDetectPlayer5, false);
            }
            else if (auto3EE01E84_val == 6) {
                TriggerEnable(gt_AFKDetectPlayer6, false);
            }
            else if (auto3EE01E84_val == 7) {
                TriggerEnable(gt_AFKDetectPlayer7, false);
            }
            else if (auto3EE01E84_val == 8) {
                TriggerEnable(gt_AFKDetectPlayer8, false);
            }
            else if (auto3EE01E84_val == 9) {
                TriggerEnable(gt_AFKDetectPlayer9, false);
            }
            else if (auto3EE01E84_val == 10) {
                TriggerEnable(gt_AFKDetectPlayer10, false);
            }
            else if (auto3EE01E84_val == 11) {
                TriggerEnable(gt_AFKDetectPlayer11, false);
            }
            else if (auto3EE01E84_val == 12) {
                TriggerEnable(gt_AFKDetectPlayer12, false);
            }
            else if (auto3EE01E84_val == 13) {
                TriggerEnable(gt_AFKDetectPlayer13, false);
            }
            else if (auto3EE01E84_val == 14) {
                TriggerEnable(gt_AFKDetectPlayer14, false);
            }
            else if (auto3EE01E84_val == 15) {
                TriggerEnable(gt_AFKDetectPlayer15, false);
            }
            else {
            }
        }
    }
}

void gf_AFKDetectDuration (int lp_duration) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TimerStart(gv_aFKDetectTimer, lp_duration, false, c_timeGame);
    gv_aFKTimerRunning = true;
}

void gf_AFKDetectStop () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto66B1AAEC_ae = 15;
    const int auto66B1AAEC_ai = 1;
    int autoBF984A5F_val;

    // Variable Initialization

    // Implementation
    lv_i = 0;
    for ( ; ( (auto66B1AAEC_ai >= 0 && lv_i <= auto66B1AAEC_ae) || (auto66B1AAEC_ai < 0 && lv_i >= auto66B1AAEC_ae) ) ; lv_i += auto66B1AAEC_ai ) {
        gv_aFKDetectInProgress[lv_i] = false;
        autoBF984A5F_val = lv_i;
        if (autoBF984A5F_val == 0) {
            TriggerEnable(gt_AFKDetectPlayer0, false);
        }
        else if (autoBF984A5F_val == 1) {
            TriggerEnable(gt_AFKDetectPlayer1, false);
        }
        else if (autoBF984A5F_val == 2) {
            TriggerEnable(gt_AFKDetectPlayer2, false);
        }
        else if (autoBF984A5F_val == 3) {
            TriggerEnable(gt_AFKDetectPlayer3, false);
        }
        else if (autoBF984A5F_val == 4) {
            TriggerEnable(gt_AFKDetectPlayer4, false);
        }
        else if (autoBF984A5F_val == 5) {
            TriggerEnable(gt_AFKDetectPlayer5, false);
        }
        else if (autoBF984A5F_val == 6) {
            TriggerEnable(gt_AFKDetectPlayer6, false);
        }
        else if (autoBF984A5F_val == 7) {
            TriggerEnable(gt_AFKDetectPlayer7, false);
        }
        else if (autoBF984A5F_val == 8) {
            TriggerEnable(gt_AFKDetectPlayer8, false);
        }
        else if (autoBF984A5F_val == 9) {
            TriggerEnable(gt_AFKDetectPlayer9, false);
        }
        else if (autoBF984A5F_val == 10) {
            TriggerEnable(gt_AFKDetectPlayer10, false);
        }
        else if (autoBF984A5F_val == 11) {
            TriggerEnable(gt_AFKDetectPlayer11, false);
        }
        else if (autoBF984A5F_val == 12) {
            TriggerEnable(gt_AFKDetectPlayer12, false);
        }
        else if (autoBF984A5F_val == 13) {
            TriggerEnable(gt_AFKDetectPlayer13, false);
        }
        else if (autoBF984A5F_val == 14) {
            TriggerEnable(gt_AFKDetectPlayer14, false);
        }
        else if (autoBF984A5F_val == 15) {
            TriggerEnable(gt_AFKDetectPlayer15, false);
        }
        else {
        }
    }
}

void gf_CheckStage (int lp_minerals, int lp_vespene, int lp_stage, string lp_pickedUnit, abilcmd lp_ability) {
    // Automatic Variable Declarations
    unitgroup auto64B9C3A0_g;
    int auto64B9C3A0_u;
    unit auto64B9C3A0_var;

    // Implementation
    if ((AIHasRes(gv_aIPlayerNumber, lp_minerals, lp_vespene) == true)) {
        auto64B9C3A0_g = UnitGroup(lp_pickedUnit, gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto64B9C3A0_u = UnitGroupCount(auto64B9C3A0_g, c_unitCountAll);
        for (;; auto64B9C3A0_u -= 1) {
            auto64B9C3A0_var = UnitGroupUnitFromEnd(auto64B9C3A0_g, auto64B9C3A0_u);
            if (auto64B9C3A0_var == null) { break; }
            if ((UnitOrderIsValid(auto64B9C3A0_var, Order(lp_ability)) == true)) {
                gv_stage = lp_stage;
                UnitIssueOrder(auto64B9C3A0_var, Order(lp_ability), c_orderQueueAddToEnd);
            }

        }
    }

}

int gf_Create2x2Building (abilcmd lp_ability) {
    // Variable Declarations
    order lv_order;
    point lv_tempPoint;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int autoC5B58C91_ae;
    const int autoC5B58C91_ai = 1;
    int autoAF8D796E_ae;
    const int autoAF8D796E_ai = 1;

    // Variable Initialization

    // Implementation
    autoC5B58C91_ae = FixedToInt(libNtve_gf_WidthOfRegion(gv_regionAI));
    lv_i = 0;
    for ( ; ( (autoC5B58C91_ai >= 0 && lv_i <= autoC5B58C91_ae) || (autoC5B58C91_ai < 0 && lv_i >= autoC5B58C91_ae) ) ; lv_i += autoC5B58C91_ai ) {
        autoAF8D796E_ae = FixedToInt(libNtve_gf_HeightOfRegion(gv_regionAI));
        lv_j = 0;
        for ( ; ( (autoAF8D796E_ai >= 0 && lv_j <= autoAF8D796E_ae) || (autoAF8D796E_ai < 0 && lv_j >= autoAF8D796E_ae) ) ; lv_j += autoAF8D796E_ai ) {
            lv_tempPoint = Point((PointGetX(RegionGetBoundsMin(gv_regionAI)) + (lv_i * 1.0)), (PointGetY(RegionGetBoundsMin(gv_regionAI)) + (lv_j * 1.0)));
            lv_order = OrderTargetingPoint(lp_ability, lv_tempPoint);
            if (((UnitOrderIsValid(gv_probes[gv_aIPlayerNumber], lv_order) == true) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, -1.0)) == c_pathingGround))) {
                UnitIssueOrder(gv_probes[gv_aIPlayerNumber], OrderTargetingPoint(lp_ability, lv_tempPoint), c_orderQueueAddToEnd);
                gv_stage += 1;
                return 0;
            }

        }
    }
    return 1;
}

int gf_Create4x4Building (abilcmd lp_ability) {
    // Variable Declarations
    order lv_order;
    point lv_tempPoint;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    int autoE6C7B81E_ae;
    const int autoE6C7B81E_ai = 1;
    int autoCF47E20F_ae;
    const int autoCF47E20F_ai = 1;

    // Variable Initialization

    // Implementation
    autoE6C7B81E_ae = FixedToInt(libNtve_gf_WidthOfRegion(gv_regionAI));
    lv_i = 0;
    for ( ; ( (autoE6C7B81E_ai >= 0 && lv_i <= autoE6C7B81E_ae) || (autoE6C7B81E_ai < 0 && lv_i >= autoE6C7B81E_ae) ) ; lv_i += autoE6C7B81E_ai ) {
        autoCF47E20F_ae = FixedToInt(libNtve_gf_HeightOfRegion(gv_regionAI));
        lv_j = 0;
        for ( ; ( (autoCF47E20F_ai >= 0 && lv_j <= autoCF47E20F_ae) || (autoCF47E20F_ai < 0 && lv_j >= autoCF47E20F_ae) ) ; lv_j += autoCF47E20F_ai ) {
            lv_tempPoint = Point((PointGetX(RegionGetBoundsMin(gv_regionAI)) + (lv_i * 1.0)), (PointGetY(RegionGetBoundsMin(gv_regionAI)) + (lv_j * 1.0)));
            lv_order = OrderTargetingPoint(lp_ability, lv_tempPoint);
            if (((UnitOrderIsValid(gv_probes[gv_aIPlayerNumber], lv_order) == true) && (PathingType(PointWithOffset(lv_tempPoint, 2.0, 2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 2.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 2.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 2.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 2.0, -2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, 2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 1.0, -2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, 2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, 0.0, -2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, 2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -1.0, -2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -2.0, 2.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -2.0, 1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -2.0, 0.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -2.0, -1.0)) == c_pathingGround) && (PathingType(PointWithOffset(lv_tempPoint, -2.0, -2.0)) == c_pathingGround))) {
                UnitIssueOrder(gv_probes[gv_aIPlayerNumber], OrderTargetingPoint(lp_ability, lv_tempPoint), c_orderQueueAddToEnd);
                gv_stage += 1;
                return 0;
            }

        }
    }
    return 1;
}

void gf_BonusXPtoProbe (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/F8FC69C9"));
    gv_xPinGameforHuman[lp_triggeringPlayer] += 10;
    gv_xPinGameforTotal[lp_triggeringPlayer] += 10;
    gv_xPofPlayerHuman[lp_triggeringPlayer] += 10;
    gv_levelofPlayerHuman[lp_triggeringPlayer] = gf_GetLevelofPlayer(gv_xPofPlayerHuman[lp_triggeringPlayer]);
    gf_UpdateXPBar(lp_triggeringPlayer);
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman, gv_xPinGameforHuman[lp_triggeringPlayer]);
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lp_triggeringPlayer]);
        BankSave(gv_banks[lp_triggeringPlayer]);
    }

}

void gf_BonusXPtoProbe5 (int lp_killingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_killingPlayer), c_messageAreaDebug, StringExternal("Param/Value/F2C40C1F"));
    gv_xPinGameforHuman[lp_killingPlayer] += 5;
    gv_xPinGameforTotal[lp_killingPlayer] += 5;
    gv_xPofPlayerHuman[lp_killingPlayer] += 5;
    gv_levelofPlayerHuman[lp_killingPlayer] = gf_GetLevelofPlayer(gv_xPofPlayerHuman[lp_killingPlayer]);
    gf_UpdateXPBar(lp_killingPlayer);
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[lp_killingPlayer], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman, gv_xPinGameforHuman[lp_killingPlayer]);
        BankValueSetFromInt(gv_banks[lp_killingPlayer], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lp_killingPlayer]);
        BankSave(gv_banks[lp_killingPlayer]);
    }

}

void gf_BonusXPtoZealot (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/6E3C71D0"));
    gv_xPinGameforVampire[lp_triggeringPlayer] += 10;
    gv_xPinGameforTotal[lp_triggeringPlayer] += 10;
    gv_xPofPlayerVampire[lp_triggeringPlayer] += 10;
    gv_levelofPlayerVampire[lp_triggeringPlayer] = gf_GetLevelofPlayer(gv_xPofPlayerVampire[lp_triggeringPlayer]);
    gf_UpdateXPBar(lp_triggeringPlayer);
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire, gv_xPinGameforVampire[lp_triggeringPlayer]);
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lp_triggeringPlayer]);
        BankSave(gv_banks[lp_triggeringPlayer]);
    }

}

void gf_BonusXPtoZealot5 (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/DC32C823"));
    gv_xPinGameforVampire[lp_triggeringPlayer] += 10;
    gv_xPinGameforTotal[lp_triggeringPlayer] += 10;
    gv_xPofPlayerVampire[lp_triggeringPlayer] += 10;
    gv_levelofPlayerVampire[lp_triggeringPlayer] = gf_GetLevelofPlayer(gv_xPofPlayerVampire[lp_triggeringPlayer]);
    gf_UpdateXPBar(lp_triggeringPlayer);
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire, gv_xPinGameforVampire[lp_triggeringPlayer]);
        BankValueSetFromInt(gv_banks[lp_triggeringPlayer], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lp_triggeringPlayer]);
        BankSave(gv_banks[lp_triggeringPlayer]);
    }

}

int gf_NumberofAliveVampires () {
    // Variable Declarations
    int lv_numberofAliveVampires;

    // Automatic Variable Declarations
    const int auto39BD5107_ae = 14;
    int auto39BD5107_var;

    // Variable Initialization

    // Implementation
    auto39BD5107_var = 1;
    for ( ; auto39BD5107_var <= auto39BD5107_ae; auto39BD5107_var += 1 ) {
        if ((UnitIsAlive(gv_zealots[auto39BD5107_var]) == true)) {
            lv_numberofAliveVampires += 1;
        }

    }
    return lv_numberofAliveVampires;
}

int gf_NumberofAliveHumans () {
    // Variable Declarations
    int lv_numerofAliveHumans;

    // Automatic Variable Declarations
    const int auto0A764EE3_ae = 14;
    int auto0A764EE3_var;

    // Variable Initialization

    // Implementation
    auto0A764EE3_var = 1;
    for ( ; auto0A764EE3_var <= auto0A764EE3_ae; auto0A764EE3_var += 1 ) {
        if ((UnitIsAlive(gv_probes[auto0A764EE3_var]) == true)) {
            lv_numerofAliveHumans += 1;
        }

    }
    return lv_numerofAliveHumans;
}

void gf_ProbesWins () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoEBED500B_ae = 14;
    const int autoEBED500B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoEBED500B_ai >= 0 && lv_i <= autoEBED500B_ae) || (autoEBED500B_ai < 0 && lv_i >= autoEBED500B_ae) ) ; lv_i += autoEBED500B_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (UnitIsAlive(gv_probes[lv_i]) == true) && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            GameOver(lv_i, c_gameOverVictory, false, true);
        }
        else {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_diedontheDamnLand[lv_i] == false))) {
                GameOver(lv_i, c_gameOverDefeat, false, true);
            }
            else {
                if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_diedontheDamnLand[lv_i] == true))) {
                    GameOver(lv_i, c_gameOverTie, false, true);
                }

            }
        }
    }
}

void gf_ZealotWins () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoED7371E7_ae = 14;
    const int autoED7371E7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoED7371E7_ai >= 0 && lv_i <= autoED7371E7_ae) || (autoED7371E7_ai < 0 && lv_i >= autoED7371E7_ae) ) ; lv_i += autoED7371E7_ai ) {
        if (((gv_side[lv_i] == "Zealot") && (UnitIsAlive(gv_zealots[lv_i]) == true) && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            GameOver(lv_i, c_gameOverVictory, false, true);
        }
        else {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_diedontheDamnLand[lv_i] == false))) {
                GameOver(lv_i, c_gameOverDefeat, false, true);
            }
            else {
                if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_diedontheDamnLand[lv_i] == true))) {
                    GameOver(lv_i, c_gameOverTie, false, true);
                }

            }
        }
    }
}

void gf_SplitResourcesHuman (int lp_playerNumber, int lp_numberofAliveHumans) {
    // Variable Declarations
    fixed lv_playerMinerals;
    fixed lv_playerVespene;
    fixed lv_mineralsFraction;
    fixed lv_vespeneFraction;

    // Automatic Variable Declarations
    playergroup auto35C9CFDC_g;
    int auto35C9CFDC_var;

    // Variable Initialization

    // Implementation
    lv_playerMinerals = PlayerGetPropertyInt(lp_playerNumber, c_playerPropMinerals);
    lv_playerVespene = PlayerGetPropertyInt(lp_playerNumber, c_playerPropVespene);
    PlayerModifyPropertyInt(lp_playerNumber, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_playerNumber, c_playerPropVespene, c_playerPropOperSetTo, 0);
    if ((lp_numberofAliveHumans != 0)) {
        lv_mineralsFraction = (lv_playerMinerals / lp_numberofAliveHumans);
        lv_vespeneFraction = (lv_playerVespene / lp_numberofAliveHumans);
        auto35C9CFDC_g = PlayerGroupActive();
        auto35C9CFDC_var = -1;
        while (true) {
            auto35C9CFDC_var = PlayerGroupNextPlayer(auto35C9CFDC_g, auto35C9CFDC_var);
            if (auto35C9CFDC_var < 0) { break; }
            if ((UnitIsAlive(gv_probes[auto35C9CFDC_var]) == true)) {
                if ((lv_mineralsFraction > 1)) {
                    PlayerModifyPropertyInt(auto35C9CFDC_var, c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_mineralsFraction));
                    UIDisplayMessage(PlayerGroupSingle(auto35C9CFDC_var), c_messageAreaDebug, (StringExternal("Param/Value/DE426727") + (FixedToText(lv_mineralsFraction, 0) + (StringExternal("Param/Value/BEAE03E9") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                }
                else {
                    if ((lv_mineralsFraction == 1)) {
                        PlayerModifyPropertyInt(auto35C9CFDC_var, c_playerPropMinerals, c_playerPropOperAdd, 1);
                        UIDisplayMessage(PlayerGroupSingle(auto35C9CFDC_var), c_messageAreaDebug, (StringExternal("Param/Value/30530434") + (FixedToText(lv_mineralsFraction, 0) + (StringExternal("Param/Value/A5940F0A") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                    }

                }
                if ((lv_vespeneFraction > 1)) {
                    PlayerModifyPropertyInt(auto35C9CFDC_var, c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_vespeneFraction));
                    UIDisplayMessage(PlayerGroupSingle(auto35C9CFDC_var), c_messageAreaDebug, (StringExternal("Param/Value/5E55B399") + (FixedToText(lv_vespeneFraction, 0) + (StringExternal("Param/Value/BDE7A4F6") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                }
                else {
                    if ((lv_vespeneFraction == 1)) {
                        PlayerModifyPropertyInt(auto35C9CFDC_var, c_playerPropVespene, c_playerPropOperAdd, 1);
                        UIDisplayMessage(PlayerGroupSingle(auto35C9CFDC_var), c_messageAreaDebug, (StringExternal("Param/Value/C9D67F4F") + (FixedToText(lv_vespeneFraction, 0) + (StringExternal("Param/Value/F825734B") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                    }

                }
            }

        }
    }

}

void gf_SplitResourcesVampire (int lp_playerNumber) {
    // Variable Declarations
    fixed lv_playerMinerals;
    fixed lv_playerVespene;
    fixed lv_mineralsFraction;
    fixed lv_vespeneFraction;
    int lv_numberofAliveVampires;

    // Automatic Variable Declarations
    unitgroup auto3C34E52A_g;
    int auto3C34E52A_u;
    unit auto3C34E52A_var;
    unitgroup auto2CB9DF79_g;
    int auto2CB9DF79_u;
    unit auto2CB9DF79_var;
    playergroup auto1DBEEDAE_g;
    int auto1DBEEDAE_var;

    // Variable Initialization

    // Implementation
    lv_playerMinerals = PlayerGetPropertyInt(lp_playerNumber, c_playerPropMinerals);
    lv_playerVespene = PlayerGetPropertyInt(lp_playerNumber, c_playerPropVespene);
    auto3C34E52A_g = UnitInventoryGroup(gv_zealots[lp_playerNumber]);
    auto3C34E52A_u = UnitGroupCount(auto3C34E52A_g, c_unitCountAll);
    for (;; auto3C34E52A_u -= 1) {
        auto3C34E52A_var = UnitGroupUnitFromEnd(auto3C34E52A_g, auto3C34E52A_u);
        if (auto3C34E52A_var == null) { break; }
        lv_playerMinerals += (1.0 * UnitTypeGetCost(UnitGetType(auto3C34E52A_var), c_unitCostMinerals));
        lv_playerVespene += (1.0 * UnitTypeGetCost(UnitGetType(auto3C34E52A_var), c_unitCostVespene));
    }
    auto2CB9DF79_g = UnitGroup(null, lp_playerNumber, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2CB9DF79_u = UnitGroupCount(auto2CB9DF79_g, c_unitCountAll);
    for (;; auto2CB9DF79_u -= 1) {
        auto2CB9DF79_var = UnitGroupUnitFromEnd(auto2CB9DF79_g, auto2CB9DF79_u);
        if (auto2CB9DF79_var == null) { break; }
        UnitRemove(auto2CB9DF79_var);
    }
    PlayerModifyPropertyInt(lp_playerNumber, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_playerNumber, c_playerPropVespene, c_playerPropOperSetTo, 0);
    lv_numberofAliveVampires = gf_NumberofAliveVampires();
    if ((lv_numberofAliveVampires != 0)) {
        lv_mineralsFraction = (lv_playerMinerals / lv_numberofAliveVampires);
        lv_vespeneFraction = (lv_playerVespene / lv_numberofAliveVampires);
        auto1DBEEDAE_g = PlayerGroupActive();
        auto1DBEEDAE_var = -1;
        while (true) {
            auto1DBEEDAE_var = PlayerGroupNextPlayer(auto1DBEEDAE_g, auto1DBEEDAE_var);
            if (auto1DBEEDAE_var < 0) { break; }
            if ((UnitIsAlive(gv_zealots[auto1DBEEDAE_var]) == true)) {
                if ((lv_mineralsFraction > 1)) {
                    PlayerModifyPropertyInt(auto1DBEEDAE_var, c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(lv_mineralsFraction));
                    UIDisplayMessage(PlayerGroupSingle(auto1DBEEDAE_var), c_messageAreaDebug, (StringExternal("Param/Value/ADDC7282") + (FixedToText(lv_mineralsFraction, 0) + (StringExternal("Param/Value/DB7FB23F") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                }
                else {
                    if ((lv_mineralsFraction == 1)) {
                        PlayerModifyPropertyInt(auto1DBEEDAE_var, c_playerPropMinerals, c_playerPropOperAdd, 1);
                        UIDisplayMessage(PlayerGroupSingle(auto1DBEEDAE_var), c_messageAreaDebug, (StringExternal("Param/Value/03B78891") + (FixedToText(lv_mineralsFraction, 0) + (StringExternal("Param/Value/66ADEFFC") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                    }

                }
                if ((lv_vespeneFraction > 1)) {
                    PlayerModifyPropertyInt(auto1DBEEDAE_var, c_playerPropVespene, c_playerPropOperAdd, FixedToInt(lv_vespeneFraction));
                    UIDisplayMessage(PlayerGroupSingle(auto1DBEEDAE_var), c_messageAreaDebug, (StringExternal("Param/Value/0914F500") + (FixedToText(lv_vespeneFraction, 0) + (StringExternal("Param/Value/F3F1BC2B") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                }
                else {
                    if ((lv_vespeneFraction == 1)) {
                        PlayerModifyPropertyInt(auto1DBEEDAE_var, c_playerPropVespene, c_playerPropOperAdd, 1);
                        UIDisplayMessage(PlayerGroupSingle(auto1DBEEDAE_var), c_messageAreaDebug, (StringExternal("Param/Value/98F03AC4") + (FixedToText(lv_vespeneFraction, 0) + (StringExternal("Param/Value/406AD457") + TextWithColor(PlayerName(lp_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_playerNumber, false)))))));
                    }

                }
            }

        }
    }

}

void gf_GiveResourcestoPlayer (int lp_triggeringPlayer, int lp_targetPlayer, int lp_resource, int lp_resourcesAdded) {
    // Variable Declarations
    int lv_resourcesCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_enableTrading == true)) {
        lv_resourcesCount = lp_resourcesAdded;
        if ((lv_resourcesCount > 0)) {
            if ((lv_resourcesCount > 999999999)) {
                lv_resourcesCount = 999999999;
            }

            if ((lp_resource == c_playerPropMinerals)) {
                if ((lv_resourcesCount > PlayerGetPropertyInt(lp_triggeringPlayer, c_playerPropMinerals))) {
                    lv_resourcesCount = PlayerGetPropertyInt(lp_triggeringPlayer, c_playerPropMinerals);
                }

            }
            else {
                if ((lp_resource == c_playerPropVespene)) {
                    if ((lv_resourcesCount > PlayerGetPropertyInt(lp_triggeringPlayer, c_playerPropVespene))) {
                        lv_resourcesCount = (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) - (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) / 5));
                    }

                }

            }
            if ((lp_triggeringPlayer != lp_targetPlayer)) {
                if ((gf_IsPlayerOnline(lp_targetPlayer) == true)) {
                    if ((UnitIsAlive(gv_probes[lp_triggeringPlayer]) == true)) {
                        if ((UnitIsAlive(gv_probes[lp_targetPlayer]) == true)) {
                            PlayerModifyPropertyInt(lp_triggeringPlayer, lp_resource, c_playerPropOperAdd, (0 - lv_resourcesCount));
                            PlayerModifyPropertyInt(lp_targetPlayer, lp_resource, c_playerPropOperAdd, lv_resourcesCount);
                            if ((lp_resource == c_playerPropMinerals)) {
                                if ((lv_resourcesCount > 0)) {
                                    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, (StringExternal("Param/Value/6DAC980E") + (StringExternal("Param/Value/7E69F513") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/75F0CC5F") + TextWithColor(PlayerName(lp_targetPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_targetPlayer, false))))))));
                                    UIDisplayMessage(PlayerGroupSingle(lp_targetPlayer), c_messageAreaDebug, (StringExternal("Param/Value/148E5A7B") + (StringExternal("Param/Value/2CDFFF65") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/18959E61") + TextWithColor(PlayerName(lp_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_triggeringPlayer, false))))))));
                                }

                            }
                            else {
                                if ((lp_resource == c_playerPropVespene)) {
                                    if ((lv_resourcesCount > 0)) {
                                        UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, (StringExternal("Param/Value/D5BA3BBA") + (StringExternal("Param/Value/56EF9BA7") + (IntToText((lv_resourcesCount - (lv_resourcesCount / 5))) + (StringExternal("Param/Value/47936D65") + TextWithColor(PlayerName(lp_targetPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_targetPlayer, false))))))));
                                        UIDisplayMessage(PlayerGroupSingle(lp_targetPlayer), c_messageAreaDebug, (StringExternal("Param/Value/FB2399C2") + (StringExternal("Param/Value/949C4CFB") + (IntToText((lv_resourcesCount - (lv_resourcesCount / 5))) + (StringExternal("Param/Value/01F4B80C") + TextWithColor(PlayerName(lp_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_triggeringPlayer, false))))))));
                                    }

                                }

                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/05C47C29"));
                        }
                    }
                    else {
                        if ((UnitIsAlive(gv_zealots[lp_triggeringPlayer]) == true)) {
                            if ((UnitIsAlive(gv_zealots[lp_targetPlayer]) == true)) {
                                PlayerModifyPropertyInt(lp_triggeringPlayer, lp_resource, c_playerPropOperAdd, (0 - lv_resourcesCount));
                                PlayerModifyPropertyInt(lp_targetPlayer, lp_resource, c_playerPropOperAdd, lv_resourcesCount);
                                if ((lp_resource == c_playerPropMinerals)) {
                                    if ((lv_resourcesCount > 0)) {
                                        UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, (StringExternal("Param/Value/41E92434") + (StringExternal("Param/Value/13829461") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/F0F50B0D") + TextWithColor(PlayerName(lp_targetPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_targetPlayer, false))))))));
                                        UIDisplayMessage(PlayerGroupSingle(lp_targetPlayer), c_messageAreaDebug, (StringExternal("Param/Value/19F9AB57") + (StringExternal("Param/Value/5355675D") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/3C6CA54D") + TextWithColor(PlayerName(lp_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_triggeringPlayer, false))))))));
                                    }

                                }
                                else {
                                    if ((lp_resource == c_playerPropVespene)) {
                                        if ((lv_resourcesCount > 0)) {
                                            UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, (StringExternal("Param/Value/3BEA718D") + (StringExternal("Param/Value/3E2DE5FD") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/EC5B9DBF") + TextWithColor(PlayerName(lp_targetPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_targetPlayer, false))))))));
                                            UIDisplayMessage(PlayerGroupSingle(lp_targetPlayer), c_messageAreaDebug, (StringExternal("Param/Value/B366AAA3") + (StringExternal("Param/Value/25526103") + (IntToText(lv_resourcesCount) + (StringExternal("Param/Value/4AC4EACC") + TextWithColor(PlayerName(lp_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_triggeringPlayer, false))))))));
                                        }

                                    }

                                }
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/4E52C97F"));
                            }
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/7187B921"));
                        }
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/EB495569"));
                }
            }
            else {
                if ((gv_flag[lp_triggeringPlayer] == 0)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/B0D2C4DB"));
                }
                else {
                    gv_flag[lp_triggeringPlayer] = 0;
                }
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/E96C193E"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_triggeringPlayer), c_messageAreaDebug, StringExternal("Param/Value/34C652FE"));
    }
}

void gf_ProbeDiesCheckAchievements (int lp_killingPlayer) {
    // Variable Declarations
    int lv_achievementID;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    BankValueSetFromInt(gv_banks[lp_killingPlayer], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_killedBuilders, (BankValueGetAsInt(gv_banks[lp_killingPlayer], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_killedBuilders) + 1));
    BankSave(gv_banks[lp_killingPlayer]);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 49, 1);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 50, 10);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 51, 25);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 52, 50);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 53, 100);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 54, 250);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 55, 500);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 56, 750);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 57, 1000);
    gf_CheckKillBuilderAchievement(lp_killingPlayer, 58, 2500);
    gv_numberofKilledHumans[libNtve_gf_KillingPlayer()] += 1;
    lv_achievementID = 59;
    gf_CheckKillProbeinGameAchievement(lp_killingPlayer, lv_achievementID, 3);
    lv_achievementID += 1;
    gf_CheckKillProbeinGameAchievement(lp_killingPlayer, lv_achievementID, 5);
    lv_achievementID += 1;
    gf_CheckKillProbeinGameAchievement(lp_killingPlayer, lv_achievementID, 7);
    lv_achievementID += 1;
    gf_CheckKillProbeinGameAchievement(lp_killingPlayer, lv_achievementID, 10);
    lv_achievementID += 1;
}

void gf_ProbeDiesResetVariables (int lp_deadProbePlayer) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto9328BA4C_ae = 14;
    const int auto9328BA4C_ai = 1;
    const int auto84CF8892_ae = 14;
    const int auto84CF8892_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto9328BA4C_ai >= 0 && lv_i <= auto9328BA4C_ae) || (auto9328BA4C_ai < 0 && lv_i >= auto9328BA4C_ae) ) ; lv_i += auto9328BA4C_ai ) {
        libNtve_gf_SetAlliance(lp_deadProbePlayer, lv_i, libNtve_ge_AllianceSetting_Enemy);
    }
    gf_ShowHideUnits(PlayerGroupSingle(lp_deadProbePlayer), false);
    Wait(2.0, c_timeGame);
    gf_ShowHideUnits(PlayerGroupSingle(lp_deadProbePlayer), true);
    PlayerModifyPropertyInt(lp_deadProbePlayer, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_deadProbePlayer, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerGroupRemove(gv_playerGroupProbes, lp_deadProbePlayer);
    PlayerGroupAdd(gv_playerGroupZealots, lp_deadProbePlayer);
    lv_i = 1;
    for ( ; ( (auto84CF8892_ai >= 0 && lv_i <= auto84CF8892_ae) || (auto84CF8892_ai < 0 && lv_i >= auto84CF8892_ae) ) ; lv_i += auto84CF8892_ai ) {
        if ((PlayerGroupHasPlayer(gv_playerGroupZealots, lv_i) == true)) {
            libNtve_gf_SetAlliance(lp_deadProbePlayer, lv_i, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }
        else {
            libNtve_gf_SetAlliance(lp_deadProbePlayer, lv_i, libNtve_ge_AllianceSetting_Enemy);
        }
    }
}

void gf_ProbeDiesCreateHunter (int lp_hunterPlayer) {
    // Automatic Variable Declarations
    playergroup auto9D6D0E30_g;
    int auto9D6D0E30_var;
    playergroup auto2F1F4EC2_g;
    int auto2F1F4EC2_var;

    // Implementation
    if (((PlayerType(lp_hunterPlayer) == c_playerTypeUser) && (PlayerStatus(lp_hunterPlayer) == c_playerStatusActive) && (gv_gameEnd == false))) {
        libNtve_gf_UnitCreateFacingPoint(1, "TerrazineBonus", 0, 0, RegionRandomPoint(RegionFromId(6)), RegionGetCenter(RegionPlayableMap()));
        libNtve_gf_UnitCreateFacingPoint(1, "TerrazineBonus", 0, 0, RegionRandomPoint(RegionFromId(6)), RegionGetCenter(RegionPlayableMap()));
        PlayerGroupAdd(gv_playerGroupHunters, lp_hunterPlayer);
        gv_hunterStatus[lp_hunterPlayer] = true;
        auto9D6D0E30_g = gv_playerGroupHunters;
        auto9D6D0E30_var = -1;
        while (true) {
            auto9D6D0E30_var = PlayerGroupNextPlayer(auto9D6D0E30_g, auto9D6D0E30_var);
            if (auto9D6D0E30_var < 0) { break; }
            libNtve_gf_SetAlliance(lp_hunterPlayer, auto9D6D0E30_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }
        auto2F1F4EC2_g = gv_playerGroupZealots;
        auto2F1F4EC2_var = -1;
        while (true) {
            auto2F1F4EC2_var = PlayerGroupNextPlayer(auto2F1F4EC2_g, auto2F1F4EC2_var);
            if (auto2F1F4EC2_var < 0) { break; }
            libNtve_gf_SetAlliance(lp_hunterPlayer, auto2F1F4EC2_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        }
        DialogSetVisible(gv_marketPricesDialog, PlayerGroupSingle(lp_hunterPlayer), false);
        DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(lp_hunterPlayer), false);
        DialogControlSetEnabled(gv_voteKickPlayers[lp_hunterPlayer], gv_playerGroupProbes, false);
        DialogControlSetEnabled(gv_voteKickPlayers[lp_hunterPlayer], gv_playerGroupHunters, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_hunterPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_hunterPlayer, false))) + (StringExternal("Param/Value/724811EB") + StringToText(""))));
        BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[lp_hunterPlayer], StringExternal("Param/Value/32FA5A43"));
        gf_UpdateXPBar(lp_hunterPlayer);
        TimerStart(gv_hunterspawntimer[lp_hunterPlayer], gf_PvZ2Time(180.0), false, c_timeGame);
        gv_hunterspawntimer[lp_hunterPlayer] = TimerLastStarted();
        TimerWindowCreate(gv_hunterspawntimer[lp_hunterPlayer], StringExternal("Param/Value/E54F81C8"), false, false);
        gv_hunterspawnwindow[lp_hunterPlayer] = TimerWindowLastCreated();
        TimerWindowShow(gv_hunterspawnwindow[lp_hunterPlayer], PlayerGroupSingle(lp_hunterPlayer), true);
    }

}

void gf_ProbeDiesCreateProbeSpirit (int lp_probeSpiritPlayer) {
    // Automatic Variable Declarations
    unitgroup auto61411ABE_g;
    int auto61411ABE_u;
    unit auto61411ABE_var;
    playergroup auto3F8D46B3_g;
    int auto3F8D46B3_var;

    // Implementation
    if (((PlayerType(lp_probeSpiritPlayer) == c_playerTypeUser) && (PlayerStatus(lp_probeSpiritPlayer) == c_playerStatusActive) && (gv_gameEnd == false))) {
        gv_probeSpiritStatus[lp_probeSpiritPlayer] = true;
        VisRevealArea(lp_probeSpiritPlayer, RegionPlayableMap(), 0.05, false);
        DialogSetVisible(gv_marketPricesDialog, PlayerGroupSingle(lp_probeSpiritPlayer), false);
        DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(lp_probeSpiritPlayer), false);
        DialogControlSetEnabled(gv_voteKickPlayers[EventPlayer()], PlayerGroupAll(), false);
        libNtve_gf_UnitCreateFacingPoint(1, "HighTemplar", 0, lp_probeSpiritPlayer, RegionRandomPoint(RegionFromId(6)), gv_centerPoint);
        UnitBehaviorAdd(UnitLastCreated(), "Invul", UnitLastCreated(), 1);
        gv_probeSpirit[lp_probeSpiritPlayer] = UnitLastCreated();
        UnitControlGroupAddUnits(lp_probeSpiritPlayer, 1, UnitLastCreatedGroup());
        auto61411ABE_g = UnitGroupSelected(lp_probeSpiritPlayer);
        auto61411ABE_u = UnitGroupCount(auto61411ABE_g, c_unitCountAll);
        for (;; auto61411ABE_u -= 1) {
            auto61411ABE_var = UnitGroupUnitFromEnd(auto61411ABE_g, auto61411ABE_u);
            if (auto61411ABE_var == null) { break; }
            UnitSelect(auto61411ABE_var, lp_probeSpiritPlayer, false);
        }
        UnitSelect(gv_probeSpirit[lp_probeSpiritPlayer], lp_probeSpiritPlayer, true);
        UISetFrameVisible(PlayerGroupSingle(lp_probeSpiritPlayer), c_syncFrameTypeMinimapPanel, true);
        VisRevealArea(lp_probeSpiritPlayer, RegionPlayableMap(), 0.05, false);
        CameraSetValue(lp_probeSpiritPlayer, c_cameraValueYaw, 90.0, 0.0, -1, 10.0);
        CameraPan(lp_probeSpiritPlayer, gv_centerPoint, 0.0, -1, 10.0, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_probeSpiritPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_probeSpiritPlayer, false))) + (StringExternal("Param/Value/ED5B4EF4") + StringToText(""))));
        BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[lp_probeSpiritPlayer], StringExternal("Param/Value/E334AFB7"));
        gf_CreateLabelProbeSpiritRank(lp_probeSpiritPlayer);
        auto3F8D46B3_g = gv_playerGroupProbes;
        auto3F8D46B3_var = -1;
        while (true) {
            auto3F8D46B3_var = PlayerGroupNextPlayer(auto3F8D46B3_g, auto3F8D46B3_var);
            if (auto3F8D46B3_var < 0) { break; }
            if (((UnitIsAlive(gv_probes[auto3F8D46B3_var]) == true) || (UnitIsAlive(gv_probeSpirit[auto3F8D46B3_var]) == true))) {
                libNtve_gf_SetAlliance(auto3F8D46B3_var, lp_probeSpiritPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }

        }
    }

}

void gf_ProbeSpiritDiesReviveProbeSpirit (int lp_probeSpiritPlayer) {
    // Automatic Variable Declarations
    unitgroup auto09FB26ED_g;
    int auto09FB26ED_u;
    unit auto09FB26ED_var;

    // Implementation
    if (((PlayerType(lp_probeSpiritPlayer) == c_playerTypeUser) && (PlayerStatus(lp_probeSpiritPlayer) == c_playerStatusActive) && (gv_gameEnd == false))) {
        libNtve_gf_UnitCreateFacingPoint(1, "HighTemplar", 0, lp_probeSpiritPlayer, gv_centerPoint, gv_centerPoint);
        UnitBehaviorAdd(UnitLastCreated(), "Invul", UnitLastCreated(), 1);
        UnitControlGroupAddUnits(lp_probeSpiritPlayer, 1, UnitLastCreatedGroup());
        gv_probeSpirit[lp_probeSpiritPlayer] = UnitLastCreated();
        auto09FB26ED_g = UnitGroupSelected(lp_probeSpiritPlayer);
        auto09FB26ED_u = UnitGroupCount(auto09FB26ED_g, c_unitCountAll);
        for (;; auto09FB26ED_u -= 1) {
            auto09FB26ED_var = UnitGroupUnitFromEnd(auto09FB26ED_g, auto09FB26ED_u);
            if (auto09FB26ED_var == null) { break; }
            UnitSelect(auto09FB26ED_var, lp_probeSpiritPlayer, false);
        }
        UnitSelect(gv_probeSpirit[lp_probeSpiritPlayer], lp_probeSpiritPlayer, true);
        CameraSetValue(lp_probeSpiritPlayer, c_cameraValueYaw, 90.0, 0.0, -1, 10.0);
        CameraPan(lp_probeSpiritPlayer, gv_centerPoint, 0.0, -1, 10.0, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_probeSpiritPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_probeSpiritPlayer, false))) + (StringExternal("Param/Value/0F338356") + StringToText(""))));
        BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[lp_probeSpiritPlayer], StringExternal("Param/Value/C8D6E28D"));
        TimerWindowDestroy(gv_timerWindowProbeSpiritDies[lp_probeSpiritPlayer]);
        gf_CreateLabelProbeSpiritRank(lp_probeSpiritPlayer);
    }

}

void gf_ZealotDiesWriteStatstoBank (unit lp_vampire) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, 0);
    BankValueSetFromInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak, 0);
    BankValueSetFromInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses, (BankValueGetAsInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses) + 1));
    BankValueSetFromInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses, (BankValueGetAsInt(gv_banks[UnitGetOwner(lp_vampire)], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses) + 1));
    BankSave(gv_banks[UnitGetOwner(lp_vampire)]);
}

void gf_ZealotDiesCheckAchievements (unit lp_killingUnit) {
    // Automatic Variable Declarations
    // Implementation
    BankValueSetFromInt(gv_banks[UnitGetOwner(lp_killingUnit)], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_killedVampires, (BankValueGetAsInt(gv_banks[UnitGetOwner(lp_killingUnit)], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_killedVampires) + 1));
    BankSave(gv_banks[UnitGetOwner(lp_killingUnit)]);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 59, 1);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 60, 10);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 61, 25);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 62, 50);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 63, 100);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 64, 250);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 65, 500);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 66, 750);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 67, 1000);
    gf_CheckKillVampireAchievement(UnitGetOwner(lp_killingUnit), 68, 2500);
}

void gf_HunterDiesReviveHunter (int lp_hunterPlayer) {
    // Automatic Variable Declarations
    unitgroup auto92210B9B_g;
    int auto92210B9B_u;
    unit auto92210B9B_var;

    // Implementation
    if (((PlayerType(lp_hunterPlayer) == c_playerTypeUser) && (PlayerStatus(lp_hunterPlayer) == c_playerStatusActive) && (gv_gameEnd == false))) {
        UnitSetPosition(gv_zealots[lp_hunterPlayer], RegionRandomPoint(RegionFromId(6)), false);
        UnitRevive(gv_zealots[lp_hunterPlayer]);
        UnitControlGroupAddUnits(lp_hunterPlayer, 1, libNtve_gf_ConvertUnitToUnitGroup(gv_zealots[lp_hunterPlayer]));
        auto92210B9B_g = UnitGroupSelected(lp_hunterPlayer);
        auto92210B9B_u = UnitGroupCount(auto92210B9B_g, c_unitCountAll);
        for (;; auto92210B9B_u -= 1) {
            auto92210B9B_var = UnitGroupUnitFromEnd(auto92210B9B_g, auto92210B9B_u);
            if (auto92210B9B_var == null) { break; }
            UnitSelect(auto92210B9B_var, lp_hunterPlayer, false);
        }
        UnitSelect(gv_zealots[lp_hunterPlayer], lp_hunterPlayer, true);
        UISetFrameVisible(PlayerGroupSingle(lp_hunterPlayer), c_syncFrameTypeMinimapPanel, true);
        CameraSetValue(lp_hunterPlayer, c_cameraValueYaw, 90.0, 0.5, -1, 10.0);
        CameraPan(lp_hunterPlayer, UnitGetPosition(gv_zealots[lp_hunterPlayer]), 0.0, -1, 10.0, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(lp_hunterPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_hunterPlayer, false))) + (StringExternal("Param/Value/F507F6F1") + StringToText(""))));
        BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[lp_hunterPlayer], StringExternal("Param/Value/0332A4CC"));
        TimerWindowDestroy(gv_timerWindowHunterDies[lp_hunterPlayer]);
        gf_CreateLabelHunterRank(lp_hunterPlayer);
    }

}

void gf_SetDamageofHero (int lp_playerNumber, int lp_damage) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_timescalevalue >= 2.0) && ((lp_damage + (lp_damage / 2)) < 262135)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "PsiBlades", "Amount", lp_playerNumber, IntToString((lp_damage + (lp_damage / 2))));
        CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", lp_playerNumber, IntToString((lp_damage + (lp_damage / 2))));
        CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "ResourcesCollected[" + IntToString(0) + "]", lp_playerNumber, IntToString((lp_damage + (lp_damage / 2))));
        gv_damage[lp_playerNumber] = (lp_damage + (lp_damage / 2));
    }
    else {
        if ((gv_timescalevalue >= 1.5) && ((lp_damage + (lp_damage / 4)) < 262135)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "PsiBlades", "Amount", lp_playerNumber, IntToString((lp_damage + (lp_damage / 4))));
            CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", lp_playerNumber, IntToString((lp_damage + (lp_damage / 4))));
            CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "ResourcesCollected[" + IntToString(0) + "]", lp_playerNumber, IntToString((lp_damage + (lp_damage / 4))));
            gv_damage[lp_playerNumber] = (lp_damage + (lp_damage / 4));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "PsiBlades", "Amount", lp_playerNumber, IntToString(lp_damage));
            CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", lp_playerNumber, IntToString(lp_damage));
            CatalogFieldValueSet(c_gameCatalogEffect, "ZealotIncome", "ResourcesCollected[" + IntToString(0) + "]", lp_playerNumber, IntToString(lp_damage));
            gv_damage[lp_playerNumber] = lp_damage;
        }
    }
}

bool gf_IsPlayerOnline (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerStatus(lp_playerNumber) == c_playerStatusActive) && (PlayerType(lp_playerNumber) == c_playerTypeUser))) {
        return true;
    }
    else {
        return false;
    }
}

int gf_GetStringColorNumber (string lp_inputString) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    string auto49F98E83_val;

    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((StringLength(lp_inputString) >= 1)) {
        lv_string = StringCase(lp_inputString, false);
        auto49F98E83_val = StringSub(lv_string, 1, StringLength(lv_string));
        if (auto49F98E83_val == "r") {
            return 1;
        }
        else if (auto49F98E83_val == "red") {
            return 1;
        }
        else if (auto49F98E83_val == "bl") {
            return 2;
        }
        else if (auto49F98E83_val == "blue") {
            return 2;
        }
        else if (auto49F98E83_val == "t") {
            return 3;
        }
        else if (auto49F98E83_val == "teal") {
            return 3;
        }
        else if (auto49F98E83_val == "pl") {
            return 4;
        }
        else if (auto49F98E83_val == "purple") {
            return 4;
        }
        else if (auto49F98E83_val == "y") {
            return 5;
        }
        else if (auto49F98E83_val == "yellow") {
            return 5;
        }
        else if (auto49F98E83_val == "o") {
            return 6;
        }
        else if (auto49F98E83_val == "orange") {
            return 6;
        }
        else if (auto49F98E83_val == "g") {
            return 7;
        }
        else if (auto49F98E83_val == "green") {
            return 7;
        }
        else if (auto49F98E83_val == "lp") {
            return 8;
        }
        else if (auto49F98E83_val == "lightpink") {
            return 8;
        }
        else if (auto49F98E83_val == "light pink") {
            return 8;
        }
        else if (auto49F98E83_val == "v") {
            return 9;
        }
        else if (auto49F98E83_val == "violet") {
            return 9;
        }
        else if (auto49F98E83_val == "lgry") {
            return 10;
        }
        else if (auto49F98E83_val == "lightgrey") {
            return 10;
        }
        else if (auto49F98E83_val == "light grey") {
            return 10;
        }
        else if (auto49F98E83_val == "dgrn") {
            return 11;
        }
        else if (auto49F98E83_val == "darkgreen") {
            return 11;
        }
        else if (auto49F98E83_val == "dark green") {
            return 11;
        }
        else if (auto49F98E83_val == "br") {
            return 12;
        }
        else if (auto49F98E83_val == "brown") {
            return 12;
        }
        else if (auto49F98E83_val == "lgrn") {
            return 13;
        }
        else if (auto49F98E83_val == "lightgreen") {
            return 13;
        }
        else if (auto49F98E83_val == "light green") {
            return 13;
        }
        else if (auto49F98E83_val == "dgry") {
            return 14;
        }
        else if (auto49F98E83_val == "darkgrey") {
            return 14;
        }
        else if (auto49F98E83_val == "dark grey") {
            return 14;
        }
        else if (auto49F98E83_val == "black") {
            return 14;
        }
        else if (auto49F98E83_val == "p") {
            return 15;
        }
        else if (auto49F98E83_val == "pink") {
            return 15;
        }
        else {
            return -1;
        }
    }
    else {
        return -1;
    }
}

void gf_setcolorofunit (string lp_string, unit lp_unit) {
    // Variable Declarations
    int lv_colorNumber;

    // Automatic Variable Declarations
    string auto827262B4_val;

    // Variable Initialization
    lv_colorNumber = 1;

    // Implementation
    auto827262B4_val = StringSub(lp_string, 4, StringLength(lp_string));
    if (auto827262B4_val == "r") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
        lv_colorNumber = 2;
    }
    else if (auto827262B4_val == "bl") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 50.20, 100.00), 1.0, 0.0));
        lv_colorNumber = 3;
    }
    else if (auto827262B4_val == "t") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 100.00, 100.00), 1.0, 0.0));
        lv_colorNumber = 4;
    }
    else if (auto827262B4_val == "pl") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(50.20, 0.00, 100.00), 1.0, 0.0));
        lv_colorNumber = 5;
    }
    else if (auto827262B4_val == "y") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
        lv_colorNumber = 6;
    }
    else if (auto827262B4_val == "o") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 1.0, 0.0));
        lv_colorNumber = 7;
    }
    else if (auto827262B4_val == "g") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 50.20, 0.00), 1.0, 0.0));
        lv_colorNumber = 8;
    }
    else if (auto827262B4_val == "lp") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 50.20, 100.00), 1.0, 0.0));
        lv_colorNumber = 9;
    }
    else if (auto827262B4_val == "v") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 0.00, 97.65), 1.0, 0.0));
        lv_colorNumber = 10;
    }
    else if (auto827262B4_val == "dg") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 25.10, 0.00), 1.0, 0.0));
        lv_colorNumber = 11;
    }
    else if (auto827262B4_val == "br") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
        lv_colorNumber = 12;
    }
    else if (auto827262B4_val == "lg") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
        lv_colorNumber = 13;
    }
    else if (auto827262B4_val == "pk") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 0.00, 50.20), 1.0, 0.0));
        lv_colorNumber = 14;
    }
    else if (auto827262B4_val == "w") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 2.0, 0.0));
        lv_colorNumber = 15;
    }
    else if (auto827262B4_val == "bk") {
        libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_SetTintColor(Color(34.51, 34.51, 34.51), 1.0, 0.0));
        lv_colorNumber = 16;
    }
    else {
    }
    if ((UnitGetType(lp_unit) == "Probe")) {
        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin) == true)) {
            BankValueSetFromInt(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofProbeSkin, lv_colorNumber);
            BankSave(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)]);
        }

    }
    else {
        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin) == true)) {
            BankValueSetFromInt(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofZealotSkin, lv_colorNumber);
            BankSave(gv_gameplayOptionsBanks[UnitGetOwner(lp_unit)]);
        }

    }
}

void gf_SkinSwapModelForUnits (string lp_skinName, int lp_skinRequestor, unitgroup lp_skinUnits) {
    // Automatic Variable Declarations
    string autoADFA4B76_val;
    unitgroup autoD237F019_g;
    int autoD237F019_u;
    unit autoD237F019_var;
    unitgroup auto7837A7EF_g;
    int auto7837A7EF_u;
    unit auto7837A7EF_var;
    unitgroup autoA1B25766_g;
    int autoA1B25766_u;
    unit autoA1B25766_var;
    unitgroup autoA8DC018D_g;
    int autoA8DC018D_u;
    unit autoA8DC018D_var;
    unitgroup autoD704B527_g;
    int autoD704B527_u;
    unit autoD704B527_var;
    unitgroup auto63F89793_g;
    int auto63F89793_u;
    unit auto63F89793_var;
    unitgroup auto009A79D6_g;
    int auto009A79D6_u;
    unit auto009A79D6_var;
    unitgroup auto558F50C0_g;
    int auto558F50C0_u;
    unit auto558F50C0_var;
    unitgroup auto2C91D03A_g;
    int auto2C91D03A_u;
    unit auto2C91D03A_var;
    unitgroup autoD801C1EC_g;
    int autoD801C1EC_u;
    unit autoD801C1EC_var;
    unitgroup autoC2ADE55C_g;
    int autoC2ADE55C_u;
    unit autoC2ADE55C_var;
    unitgroup auto83EE48EA_g;
    int auto83EE48EA_u;
    unit auto83EE48EA_var;
    unitgroup auto35F9024E_g;
    int auto35F9024E_u;
    unit auto35F9024E_var;
    unitgroup autoB462F2A2_g;
    int autoB462F2A2_u;
    unit autoB462F2A2_var;
    unitgroup autoCF2A1681_g;
    int autoCF2A1681_u;
    unit autoCF2A1681_var;
    unitgroup auto3DCF0A05_g;
    int auto3DCF0A05_u;
    unit auto3DCF0A05_var;
    unitgroup autoD591C30B_g;
    int autoD591C30B_u;
    unit autoD591C30B_var;
    unitgroup auto6741C9F2_g;
    int auto6741C9F2_u;
    unit auto6741C9F2_var;
    unitgroup auto5F6DD980_g;
    int auto5F6DD980_u;
    unit auto5F6DD980_var;
    unitgroup auto5D50D833_g;
    int auto5D50D833_u;
    unit auto5D50D833_var;
    unitgroup auto31C94D50_g;
    int auto31C94D50_u;
    unit auto31C94D50_var;
    unitgroup auto5747BB46_g;
    int auto5747BB46_u;
    unit auto5747BB46_var;
    unitgroup autoABF4CC3F_g;
    int autoABF4CC3F_u;
    unit autoABF4CC3F_var;
    unitgroup auto5AE72231_g;
    int auto5AE72231_u;
    unit auto5AE72231_var;
    unitgroup autoC9001D18_g;
    int autoC9001D18_u;
    unit autoC9001D18_var;
    unitgroup autoA805F766_g;
    int autoA805F766_u;
    unit autoA805F766_var;
    unitgroup autoB8F81809_g;
    int autoB8F81809_u;
    unit autoB8F81809_var;
    unitgroup auto6A7A9A6A_g;
    int auto6A7A9A6A_u;
    unit auto6A7A9A6A_var;
    unitgroup auto84D92E44_g;
    int auto84D92E44_u;
    unit auto84D92E44_var;
    unitgroup auto05A088AD_g;
    int auto05A088AD_u;
    unit auto05A088AD_var;
    unitgroup autoCCB7541A_g;
    int autoCCB7541A_u;
    unit autoCCB7541A_var;
    unitgroup autoC7F6103A_g;
    int autoC7F6103A_u;
    unit autoC7F6103A_var;
    unitgroup autoB19693D2_g;
    int autoB19693D2_u;
    unit autoB19693D2_var;
    unitgroup auto6FD12017_g;
    int auto6FD12017_u;
    unit auto6FD12017_var;
    unitgroup auto139F871D_g;
    int auto139F871D_u;
    unit auto139F871D_var;
    unitgroup autoBC9B4185_g;
    int autoBC9B4185_u;
    unit autoBC9B4185_var;
    unitgroup auto1C23AB75_g;
    int auto1C23AB75_u;
    unit auto1C23AB75_var;
    unitgroup autoE27F385B_g;
    int autoE27F385B_u;
    unit autoE27F385B_var;
    unitgroup auto366A8424_g;
    int auto366A8424_u;
    unit auto366A8424_var;
    unitgroup auto77DDF45F_g;
    int auto77DDF45F_u;
    unit auto77DDF45F_var;
    unitgroup auto634F61D6_g;
    int auto634F61D6_u;
    unit auto634F61D6_var;
    unitgroup autoAA8B4D92_g;
    int autoAA8B4D92_u;
    unit autoAA8B4D92_var;
    unitgroup auto27B65A8B_g;
    int auto27B65A8B_u;
    unit auto27B65A8B_var;
    unitgroup autoF483A048_g;
    int autoF483A048_u;
    unit autoF483A048_var;
    unitgroup auto26EDF4A1_g;
    int auto26EDF4A1_u;
    unit auto26EDF4A1_var;
    unitgroup autoDDC643A7_g;
    int autoDDC643A7_u;
    unit autoDDC643A7_var;
    unitgroup auto8FF58CB9_g;
    int auto8FF58CB9_u;
    unit auto8FF58CB9_var;
    unitgroup autoF4225881_g;
    int autoF4225881_u;
    unit autoF4225881_var;
    unitgroup auto2519304C_g;
    int auto2519304C_u;
    unit auto2519304C_var;
    unitgroup autoC2700F32_g;
    int autoC2700F32_u;
    unit autoC2700F32_var;
    unitgroup auto9E3EF76A_g;
    int auto9E3EF76A_u;
    unit auto9E3EF76A_var;
    unitgroup autoA1FED386_g;
    int autoA1FED386_u;
    unit autoA1FED386_var;

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_skinRequestor, "DarkProtoss", 0);
    autoADFA4B76_val = lp_skinName;
    if (autoADFA4B76_val == "666") {
        if ((gf_PlayerIsTheWiseOne(lp_skinRequestor) == true)) {
            autoD237F019_g = lp_skinUnits;
            autoD237F019_u = UnitGroupCount(autoD237F019_g, c_unitCountAll);
            for (;; autoD237F019_u -= 1) {
                autoD237F019_var = UnitGroupUnitFromEnd(autoD237F019_g, autoD237F019_u);
                if (autoD237F019_var == null) { break; }
                UnitSetHeight(autoD237F019_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoD237F019_var, "PenguinBlack");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 666, "Black Penguin", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "667") {
        if ((gf_PlayerIsTheWiseOne(lp_skinRequestor) == true)) {
            auto7837A7EF_g = lp_skinUnits;
            auto7837A7EF_u = UnitGroupCount(auto7837A7EF_g, c_unitCountAll);
            for (;; auto7837A7EF_u -= 1) {
                auto7837A7EF_var = UnitGroupUnitFromEnd(auto7837A7EF_g, auto7837A7EF_u);
                if (auto7837A7EF_var == null) { break; }
                UnitSetHeight(auto7837A7EF_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto7837A7EF_var, "PenguinWhite");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 667, "White Penguin", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "epic") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-2873389"))) {
            autoA1B25766_g = lp_skinUnits;
            autoA1B25766_u = UnitGroupCount(autoA1B25766_g, c_unitCountAll);
            for (;; autoA1B25766_u -= 1) {
                autoA1B25766_var = UnitGroupUnitFromEnd(autoA1B25766_g, autoA1B25766_u);
                if (autoA1B25766_var == null) { break; }
                UnitSetHeight(autoA1B25766_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoA1B25766_var, "Immortal");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 600, "Immortal", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "merlin") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-1792314"))) {
            autoA8DC018D_g = lp_skinUnits;
            autoA8DC018D_u = UnitGroupCount(autoA8DC018D_g, c_unitCountAll);
            for (;; autoA8DC018D_u -= 1) {
                autoA8DC018D_var = UnitGroupUnitFromEnd(autoA8DC018D_g, autoA8DC018D_u);
                if (autoA8DC018D_var == null) { break; }
                UnitSetHeight(autoA8DC018D_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoA8DC018D_var, "Colossus");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 601, "Colossus", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "insult") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4555053") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4183383") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-2580865") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-1112629"))) {
            autoD704B527_g = lp_skinUnits;
            autoD704B527_u = UnitGroupCount(autoD704B527_g, c_unitCountAll);
            for (;; autoD704B527_u -= 1) {
                autoD704B527_var = UnitGroupUnitFromEnd(autoD704B527_g, autoD704B527_u);
                if (autoD704B527_var == null) { break; }
                UnitSetHeight(autoD704B527_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoD704B527_var, "PrimalUltralisk");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 602, "Primal Ultralisk", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "fvz") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "2-S2-1-1796699") || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5036407"))) {
            auto63F89793_g = lp_skinUnits;
            auto63F89793_u = UnitGroupCount(auto63F89793_g, c_unitCountAll);
            for (;; auto63F89793_u -= 1) {
                auto63F89793_var = UnitGroupUnitFromEnd(auto63F89793_g, auto63F89793_u);
                if (auto63F89793_var == null) { break; }
                UnitSetHeight(auto63F89793_var, 0.4, 0.0);
                gf_SwapModel(lp_skinRequestor, auto63F89793_var, "VoidSeeker");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 603, "Void Seeker", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "phantom") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4037094") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4706767"))) {
            auto009A79D6_g = lp_skinUnits;
            auto009A79D6_u = UnitGroupCount(auto009A79D6_g, c_unitCountAll);
            for (;; auto009A79D6_u -= 1) {
                auto009A79D6_var = UnitGroupUnitFromEnd(auto009A79D6_g, auto009A79D6_u);
                if (auto009A79D6_var == null) { break; }
                UnitSetHeight(auto009A79D6_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto009A79D6_var, "HybridD");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 604, "Hybrid", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "bulba") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-6220289") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-6013888"))) {
            auto558F50C0_g = lp_skinUnits;
            auto558F50C0_u = UnitGroupCount(auto558F50C0_g, c_unitCountAll);
            for (;; auto558F50C0_u -= 1) {
                auto558F50C0_var = UnitGroupUnitFromEnd(auto558F50C0_g, auto558F50C0_u);
                if (auto558F50C0_var == null) { break; }
                UnitSetHeight(auto558F50C0_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto558F50C0_var, "Lurker");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 605, "Lurker", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "fire") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-619861") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5294107"))) {
            auto2C91D03A_g = lp_skinUnits;
            auto2C91D03A_u = UnitGroupCount(auto2C91D03A_g, c_unitCountAll);
            for (;; auto2C91D03A_u -= 1) {
                auto2C91D03A_var = UnitGroupUnitFromEnd(auto2C91D03A_g, auto2C91D03A_u);
                if (auto2C91D03A_var == null) { break; }
                UnitSetHeight(auto2C91D03A_var, 0.4, 0.0);
                gf_SwapModel(lp_skinRequestor, auto2C91D03A_var, "Battlecruiser");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 606, "BattleCruiser", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "marcus") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-1789252") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5210484"))) {
            autoD801C1EC_g = lp_skinUnits;
            autoD801C1EC_u = UnitGroupCount(autoD801C1EC_g, c_unitCountAll);
            for (;; autoD801C1EC_u -= 1) {
                autoD801C1EC_var = UnitGroupUnitFromEnd(autoD801C1EC_g, autoD801C1EC_u);
                if (autoD801C1EC_var == null) { break; }
                UnitSetHeight(autoD801C1EC_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoD801C1EC_var, "UrsadakMaleExotic");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 607, "Ursadak Male Exotic", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "marcus1") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-1789252") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5210484"))) {
            autoC2ADE55C_g = lp_skinUnits;
            autoC2ADE55C_u = UnitGroupCount(autoC2ADE55C_g, c_unitCountAll);
            for (;; autoC2ADE55C_u -= 1) {
                autoC2ADE55C_var = UnitGroupUnitFromEnd(autoC2ADE55C_g, autoC2ADE55C_u);
                if (autoC2ADE55C_var == null) { break; }
                UnitSetHeight(autoC2ADE55C_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoC2ADE55C_var, "GiantYeti");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 608, "Giant Yeti", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "marcus2") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-1789252") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5210484"))) {
            auto83EE48EA_g = lp_skinUnits;
            auto83EE48EA_u = UnitGroupCount(auto83EE48EA_g, c_unitCountAll);
            for (;; auto83EE48EA_u -= 1) {
                auto83EE48EA_var = UnitGroupUnitFromEnd(auto83EE48EA_g, auto83EE48EA_u);
                if (auto83EE48EA_var == null) { break; }
                UnitSetHeight(auto83EE48EA_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto83EE48EA_var, "MercHellion");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 609, "Merc Helion", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "diss") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-787549") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4707757"))) {
            auto35F9024E_g = lp_skinUnits;
            auto35F9024E_u = UnitGroupCount(auto35F9024E_g, c_unitCountAll);
            for (;; auto35F9024E_u -= 1) {
                auto35F9024E_var = UnitGroupUnitFromEnd(auto35F9024E_g, auto35F9024E_u);
                if (auto35F9024E_var == null) { break; }
                UnitSetHeight(auto35F9024E_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto35F9024E_var, "StoneZealot");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 610, "Stoned Zealot", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "chill") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5314785"))) {
            autoB462F2A2_g = lp_skinUnits;
            autoB462F2A2_u = UnitGroupCount(autoB462F2A2_g, c_unitCountAll);
            for (;; autoB462F2A2_u -= 1) {
                autoB462F2A2_var = UnitGroupUnitFromEnd(autoB462F2A2_g, autoB462F2A2_u);
                if (autoB462F2A2_var == null) { break; }
                UnitSetHeight(autoB462F2A2_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoB462F2A2_var, "Archon");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 611, "Archon", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "any") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4078924") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4932355"))) {
            autoCF2A1681_g = lp_skinUnits;
            autoCF2A1681_u = UnitGroupCount(autoCF2A1681_g, c_unitCountAll);
            for (;; autoCF2A1681_u -= 1) {
                autoCF2A1681_var = UnitGroupUnitFromEnd(autoCF2A1681_g, autoCF2A1681_u);
                if (autoCF2A1681_var == null) { break; }
                UnitSetHeight(autoCF2A1681_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoCF2A1681_var, "MengskMedic");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 612, "Mengsk Medic", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "any1") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4078924") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4932355"))) {
            auto3DCF0A05_g = lp_skinUnits;
            auto3DCF0A05_u = UnitGroupCount(auto3DCF0A05_g, c_unitCountAll);
            for (;; auto3DCF0A05_u -= 1) {
                auto3DCF0A05_var = UnitGroupUnitFromEnd(auto3DCF0A05_g, auto3DCF0A05_u);
                if (auto3DCF0A05_var == null) { break; }
                UnitSetHeight(auto3DCF0A05_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto3DCF0A05_var, "MercMedic");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 613, "Merc Medic", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "any2") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4078924") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4932355"))) {
            autoD591C30B_g = lp_skinUnits;
            autoD591C30B_u = UnitGroupCount(autoD591C30B_g, c_unitCountAll);
            for (;; autoD591C30B_u -= 1) {
                autoD591C30B_var = UnitGroupUnitFromEnd(autoD591C30B_g, autoD591C30B_u);
                if (autoD591C30B_var == null) { break; }
                UnitSetHeight(autoD591C30B_var, 0.4, 0.0);
                gf_SwapModel(lp_skinRequestor, autoD591C30B_var, "Medivac");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 614, "Medivac", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "simon") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5217427"))) {
            auto6741C9F2_g = lp_skinUnits;
            auto6741C9F2_u = UnitGroupCount(auto6741C9F2_g, c_unitCountAll);
            for (;; auto6741C9F2_u -= 1) {
                auto6741C9F2_var = UnitGroupUnitFromEnd(auto6741C9F2_g, auto6741C9F2_u);
                if (auto6741C9F2_var == null) { break; }
                UnitSetHeight(auto6741C9F2_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto6741C9F2_var, "HybridE");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 615, "Hybrid", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "nuzz") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-708851"))) {
            auto5F6DD980_g = lp_skinUnits;
            auto5F6DD980_u = UnitGroupCount(auto5F6DD980_g, c_unitCountAll);
            for (;; auto5F6DD980_u -= 1) {
                auto5F6DD980_var = UnitGroupUnitFromEnd(auto5F6DD980_g, auto5F6DD980_u);
                if (auto5F6DD980_var == null) { break; }
                UnitSetHeight(auto5F6DD980_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto5F6DD980_var, "Marine");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 616, "Marine", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "nuzz2") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-708851"))) {
            auto5D50D833_g = lp_skinUnits;
            auto5D50D833_u = UnitGroupCount(auto5D50D833_g, c_unitCountAll);
            for (;; auto5D50D833_u -= 1) {
                auto5D50D833_var = UnitGroupUnitFromEnd(auto5D50D833_g, auto5D50D833_u);
                if (auto5D50D833_var == null) { break; }
                UnitSetHeight(auto5D50D833_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto5D50D833_var, "Ghost");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 617, "Ghost", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "mod") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            auto31C94D50_g = lp_skinUnits;
            auto31C94D50_u = UnitGroupCount(auto31C94D50_g, c_unitCountAll);
            for (;; auto31C94D50_u -= 1) {
                auto31C94D50_var = UnitGroupUnitFromEnd(auto31C94D50_g, auto31C94D50_u);
                if (auto31C94D50_var == null) { break; }
                UnitSetHeight(auto31C94D50_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto31C94D50_var, "Zealot3");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 618, "PVZ2 InGame Moderator", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "camo") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModeratorLevelX(lp_skinRequestor) == true))) {
            auto5747BB46_g = lp_skinUnits;
            auto5747BB46_u = UnitGroupCount(auto5747BB46_g, c_unitCountAll);
            for (;; auto5747BB46_u -= 1) {
                auto5747BB46_var = UnitGroupUnitFromEnd(auto5747BB46_g, auto5747BB46_u);
                if (auto5747BB46_var == null) { break; }
                UnitSetHeight(auto5747BB46_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto5747BB46_var, "MineralField");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 619, "Mineral Field", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "aristo") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-3714674"))) {
            autoABF4CC3F_g = lp_skinUnits;
            autoABF4CC3F_u = UnitGroupCount(autoABF4CC3F_g, c_unitCountAll);
            for (;; autoABF4CC3F_u -= 1) {
                autoABF4CC3F_var = UnitGroupUnitFromEnd(autoABF4CC3F_g, autoABF4CC3F_u);
                if (autoABF4CC3F_var == null) { break; }
                UnitSetHeight(autoABF4CC3F_var, 0.4, 0.0);
                gf_SwapModel(lp_skinRequestor, autoABF4CC3F_var, "Phoenix2");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 620, "A very special Cat", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "rofl") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4418758") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4728290"))) {
            auto5AE72231_g = lp_skinUnits;
            auto5AE72231_u = UnitGroupCount(auto5AE72231_g, c_unitCountAll);
            for (;; auto5AE72231_u -= 1) {
                auto5AE72231_var = UnitGroupUnitFromEnd(auto5AE72231_g, auto5AE72231_u);
                if (auto5AE72231_var == null) { break; }
                UnitSetHeight(auto5AE72231_var, 0.0, 0.0);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_skinRequestor, "DarkProtoss", 1);
                gf_SwapModel(lp_skinRequestor, auto5AE72231_var, "Immortal2");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 621, "That is Rof-EL, not rolf.", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "gunny") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-2437553"))) {
            autoC9001D18_g = lp_skinUnits;
            autoC9001D18_u = UnitGroupCount(autoC9001D18_g, c_unitCountAll);
            for (;; autoC9001D18_u -= 1) {
                autoC9001D18_var = UnitGroupUnitFromEnd(autoC9001D18_g, autoC9001D18_u);
                if (autoC9001D18_var == null) { break; }
                UnitSetHeight(autoC9001D18_var, 0.0, 0.0);
                gf_SwapModel(EventPlayer(), autoC9001D18_var, "Archon2");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 622, "Gunny", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "wheme") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4122701") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4044079"))) {
            autoA805F766_g = lp_skinUnits;
            autoA805F766_u = UnitGroupCount(autoA805F766_g, c_unitCountAll);
            for (;; autoA805F766_u -= 1) {
                autoA805F766_var = UnitGroupUnitFromEnd(autoA805F766_g, autoA805F766_u);
                if (autoA805F766_var == null) { break; }
                UnitSetHeight(autoA805F766_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(autoA805F766_var)] == "Probe")) {
                    gf_SwapModel(EventPlayer(), autoA805F766_var, "MurlocMarine");
                }
                else {
                    gf_SwapModel(EventPlayer(), autoA805F766_var, "MurlocMarineLarge");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 623, "Murloc Marine", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "ace") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-464672"))) {
            autoB8F81809_g = lp_skinUnits;
            autoB8F81809_u = UnitGroupCount(autoB8F81809_g, c_unitCountAll);
            for (;; autoB8F81809_u -= 1) {
                autoB8F81809_var = UnitGroupUnitFromEnd(autoB8F81809_g, autoB8F81809_u);
                if (autoB8F81809_var == null) { break; }
                UnitSetHeight(autoB8F81809_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoB8F81809_var, "Infestor");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 625, "Infestor", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "getthis") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-502016") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5701215"))) {
            auto6A7A9A6A_g = lp_skinUnits;
            auto6A7A9A6A_u = UnitGroupCount(auto6A7A9A6A_g, c_unitCountAll);
            for (;; auto6A7A9A6A_u -= 1) {
                auto6A7A9A6A_var = UnitGroupUnitFromEnd(auto6A7A9A6A_g, auto6A7A9A6A_u);
                if (auto6A7A9A6A_var == null) { break; }
                UnitSetHeight(auto6A7A9A6A_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto6A7A9A6A_var, "MengskVikingAssault");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 627, "Get This!", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "bolton") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4862056") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5702728"))) {
            auto84D92E44_g = lp_skinUnits;
            auto84D92E44_u = UnitGroupCount(auto84D92E44_g, c_unitCountAll);
            for (;; auto84D92E44_u -= 1) {
                auto84D92E44_var = UnitGroupUnitFromEnd(auto84D92E44_g, auto84D92E44_u);
                if (auto84D92E44_var == null) { break; }
                UnitSetHeight(auto84D92E44_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto84D92E44_var, "Dehaka");
                libNtve_gf_SendActorMessageToUnit(auto84D92E44_var, libNtve_gf_Signal("RemoveGlow"));
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 628, "Michael Bolton", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "thorru") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-3893721") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-3907071"))) {
            auto05A088AD_g = lp_skinUnits;
            auto05A088AD_u = UnitGroupCount(auto05A088AD_g, c_unitCountAll);
            for (;; auto05A088AD_u -= 1) {
                auto05A088AD_var = UnitGroupUnitFromEnd(auto05A088AD_g, auto05A088AD_u);
                if (auto05A088AD_var == null) { break; }
                UnitSetHeight(auto05A088AD_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto05A088AD_var, "WidowMine");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 629, "Widow Mine", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "helz") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-689340"))) {
            autoCCB7541A_g = lp_skinUnits;
            autoCCB7541A_u = UnitGroupCount(autoCCB7541A_g, c_unitCountAll);
            for (;; autoCCB7541A_u -= 1) {
                autoCCB7541A_var = UnitGroupUnitFromEnd(autoCCB7541A_g, autoCCB7541A_u);
                if (autoCCB7541A_var == null) { break; }
                UnitSetHeight(autoCCB7541A_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoCCB7541A_var, "DesertPlanetSearchlight");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 630, "Search Light", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "rohime") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4555053") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4183383"))) {
            autoC7F6103A_g = lp_skinUnits;
            autoC7F6103A_u = UnitGroupCount(autoC7F6103A_g, c_unitCountAll);
            for (;; autoC7F6103A_u -= 1) {
                autoC7F6103A_var = UnitGroupUnitFromEnd(autoC7F6103A_g, autoC7F6103A_u);
                if (autoC7F6103A_var == null) { break; }
                UnitSetHeight(autoC7F6103A_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoC7F6103A_var, "Brakk");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 631, "Brakk", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "outplay") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-1198154") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5697320"))) {
            autoB19693D2_g = lp_skinUnits;
            autoB19693D2_u = UnitGroupCount(autoB19693D2_g, c_unitCountAll);
            for (;; autoB19693D2_u -= 1) {
                autoB19693D2_var = UnitGroupUnitFromEnd(autoB19693D2_g, autoB19693D2_u);
                if (autoB19693D2_var == null) { break; }
                UnitSetHeight(autoB19693D2_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoB19693D2_var, "Lyote");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 632, "Lyote", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "pyro") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5582741") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-5070028"))) {
            auto6FD12017_g = lp_skinUnits;
            auto6FD12017_u = UnitGroupCount(auto6FD12017_g, c_unitCountAll);
            for (;; auto6FD12017_u -= 1) {
                auto6FD12017_var = UnitGroupUnitFromEnd(auto6FD12017_g, auto6FD12017_u);
                if (auto6FD12017_var == null) { break; }
                UnitSetHeight(auto6FD12017_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto6FD12017_var, "Nova");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 633, "Nova", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "das") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-594678") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-3982935"))) {
            auto139F871D_g = lp_skinUnits;
            auto139F871D_u = UnitGroupCount(auto139F871D_g, c_unitCountAll);
            for (;; auto139F871D_u -= 1) {
                auto139F871D_var = UnitGroupUnitFromEnd(auto139F871D_g, auto139F871D_u);
                if (auto139F871D_var == null) { break; }
                UnitSetHeight(auto139F871D_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto139F871D_var, "DasNoob");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 634, "DasNoob", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "noob") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-594678") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-3982935"))) {
            autoBC9B4185_g = lp_skinUnits;
            autoBC9B4185_u = UnitGroupCount(autoBC9B4185_g, c_unitCountAll);
            for (;; autoBC9B4185_u -= 1) {
                autoBC9B4185_var = UnitGroupUnitFromEnd(autoBC9B4185_g, autoBC9B4185_u);
                if (autoBC9B4185_var == null) { break; }
                UnitSetHeight(autoBC9B4185_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoBC9B4185_var, "DasNoob2");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 635, "DasNoob2", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "bbq") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-6264838") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4117165"))) {
            auto1C23AB75_g = lp_skinUnits;
            auto1C23AB75_u = UnitGroupCount(auto1C23AB75_g, c_unitCountAll);
            for (;; auto1C23AB75_u -= 1) {
                auto1C23AB75_var = UnitGroupUnitFromEnd(auto1C23AB75_g, auto1C23AB75_u);
                if (auto1C23AB75_var == null) { break; }
                UnitSetHeight(auto1C23AB75_var, 0.4, 0.0);
                gf_SwapModel(lp_skinRequestor, auto1C23AB75_var, "Corruptor");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 636, "bbQsauce", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "dragoon") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            autoE27F385B_g = lp_skinUnits;
            autoE27F385B_u = UnitGroupCount(autoE27F385B_g, c_unitCountAll);
            for (;; autoE27F385B_u -= 1) {
                autoE27F385B_var = UnitGroupUnitFromEnd(autoE27F385B_g, autoE27F385B_u);
                if (autoE27F385B_var == null) { break; }
                UnitSetHeight(autoE27F385B_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, autoE27F385B_var, "Dragoon");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 637, "dragoon", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "carbot") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            auto366A8424_g = lp_skinUnits;
            auto366A8424_u = UnitGroupCount(auto366A8424_g, c_unitCountAll);
            for (;; auto366A8424_u -= 1) {
                auto366A8424_var = UnitGroupUnitFromEnd(auto366A8424_g, auto366A8424_u);
                if (auto366A8424_var == null) { break; }
                UnitSetHeight(auto366A8424_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(auto366A8424_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto366A8424_var, "ZerglingCarbot");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto366A8424_var, "ZerglingCarbotLarge");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 638, "CarbotZergling", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "rofl2") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4418758") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4728290"))) {
            auto77DDF45F_g = lp_skinUnits;
            auto77DDF45F_u = UnitGroupCount(auto77DDF45F_g, c_unitCountAll);
            for (;; auto77DDF45F_u -= 1) {
                auto77DDF45F_var = UnitGroupUnitFromEnd(auto77DDF45F_g, auto77DDF45F_u);
                if (auto77DDF45F_var == null) { break; }
                UnitSetHeight(auto77DDF45F_var, 0.0, 0.0);
                gf_SwapModel(lp_skinRequestor, auto77DDF45F_var, "ImmortalTaldarim");
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 639, "Tal'darim Immortal", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "soul") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5513778") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4133780"))) {
            auto634F61D6_g = lp_skinUnits;
            auto634F61D6_u = UnitGroupCount(auto634F61D6_g, c_unitCountAll);
            for (;; auto634F61D6_u -= 1) {
                auto634F61D6_var = UnitGroupUnitFromEnd(auto634F61D6_g, auto634F61D6_u);
                if (auto634F61D6_var == null) { break; }
                UnitSetHeight(auto634F61D6_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(auto634F61D6_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto634F61D6_var, "PitMalashSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto634F61D6_var, "PitMalash");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 640, "Pit Malash", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "hyp") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4343485") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4424003"))) {
            autoAA8B4D92_g = lp_skinUnits;
            autoAA8B4D92_u = UnitGroupCount(autoAA8B4D92_g, c_unitCountAll);
            for (;; autoAA8B4D92_u -= 1) {
                autoAA8B4D92_var = UnitGroupUnitFromEnd(autoAA8B4D92_g, autoAA8B4D92_u);
                if (autoAA8B4D92_var == null) { break; }
                UnitSetHeight(autoAA8B4D92_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(autoAA8B4D92_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoAA8B4D92_var, "RangerW3PvZ2SkinSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoAA8B4D92_var, "RangerW3PvZ2Skin");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 641, "Undead Dark Ranger", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "cali") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4527612") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4079104"))) {
            auto27B65A8B_g = lp_skinUnits;
            auto27B65A8B_u = UnitGroupCount(auto27B65A8B_g, c_unitCountAll);
            for (;; auto27B65A8B_u -= 1) {
                auto27B65A8B_var = UnitGroupUnitFromEnd(auto27B65A8B_g, auto27B65A8B_u);
                if (auto27B65A8B_var == null) { break; }
                UnitSetHeight(auto27B65A8B_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(auto27B65A8B_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto27B65A8B_var, "RavagerSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto27B65A8B_var, "Ravager");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 642, "Ravager", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "road") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-4262336") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-3555668"))) {
            autoF483A048_g = lp_skinUnits;
            autoF483A048_u = UnitGroupCount(autoF483A048_g, c_unitCountAll);
            for (;; autoF483A048_u -= 1) {
                autoF483A048_var = UnitGroupUnitFromEnd(autoF483A048_g, autoF483A048_u);
                if (autoF483A048_var == null) { break; }
                UnitSetHeight(autoF483A048_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(autoF483A048_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoF483A048_var, "Adept");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoF483A048_var, "AdeptLarge");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 643, "Adept", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "fenix") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            auto26EDF4A1_g = lp_skinUnits;
            auto26EDF4A1_u = UnitGroupCount(auto26EDF4A1_g, c_unitCountAll);
            for (;; auto26EDF4A1_u -= 1) {
                auto26EDF4A1_var = UnitGroupUnitFromEnd(auto26EDF4A1_g, auto26EDF4A1_u);
                if (auto26EDF4A1_var == null) { break; }
                UnitSetHeight(auto26EDF4A1_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(auto26EDF4A1_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto26EDF4A1_var, "FenixChampionSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto26EDF4A1_var, "FenixChampion");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 644, "Fenix", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "eviano") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5431202") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4450990"))) {
            autoDDC643A7_g = lp_skinUnits;
            autoDDC643A7_u = UnitGroupCount(autoDDC643A7_g, c_unitCountAll);
            for (;; autoDDC643A7_u -= 1) {
                autoDDC643A7_var = UnitGroupUnitFromEnd(autoDDC643A7_g, autoDDC643A7_u);
                if (autoDDC643A7_var == null) { break; }
                UnitSetHeight(autoDDC643A7_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(autoDDC643A7_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoDDC643A7_var, "TerrorzorSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoDDC643A7_var, "Terrorzor");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 645, "Fenix", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "gunny2") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-2437553"))) {
            auto8FF58CB9_g = lp_skinUnits;
            auto8FF58CB9_u = UnitGroupCount(auto8FF58CB9_g, c_unitCountAll);
            for (;; auto8FF58CB9_u -= 1) {
                auto8FF58CB9_var = UnitGroupUnitFromEnd(auto8FF58CB9_g, auto8FF58CB9_u);
                if (auto8FF58CB9_var == null) { break; }
                UnitSetHeight(auto8FF58CB9_var, 0.0, 0.0);
                if ((gv_side[UnitGetOwner(auto8FF58CB9_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto8FF58CB9_var, "HighTemplarTaldarim");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto8FF58CB9_var, "HighTemplarTaldarimLarge");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 646, "High Templar Teldarim", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "slayn") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            autoF4225881_g = lp_skinUnits;
            autoF4225881_u = UnitGroupCount(autoF4225881_g, c_unitCountAll);
            for (;; autoF4225881_u -= 1) {
                autoF4225881_var = UnitGroupUnitFromEnd(autoF4225881_g, autoF4225881_u);
                if (autoF4225881_var == null) { break; }
                UnitSetHeight(autoF4225881_var, 0.4, 0.0);
                if ((gv_side[UnitGetOwner(autoF4225881_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoF4225881_var, "SlaynElemental");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoF4225881_var, "SlaynElemental");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 647, "Slayn Elemental", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "duck") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true))) {
            auto2519304C_g = lp_skinUnits;
            auto2519304C_u = UnitGroupCount(auto2519304C_g, c_unitCountAll);
            for (;; auto2519304C_u -= 1) {
                auto2519304C_var = UnitGroupUnitFromEnd(auto2519304C_g, auto2519304C_u);
                if (auto2519304C_var == null) { break; }
                UnitSetHeight(auto2519304C_var, 0.25, 0.0);
                if ((gv_side[UnitGetOwner(auto2519304C_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto2519304C_var, "RubberDuck");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto2519304C_var, "RubberDuckLarge");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 648, "Rubber Duck", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "anatar") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "TBA-Anatar") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4759000"))) {
            autoC2700F32_g = lp_skinUnits;
            autoC2700F32_u = UnitGroupCount(autoC2700F32_g, c_unitCountAll);
            for (;; autoC2700F32_u -= 1) {
                autoC2700F32_var = UnitGroupUnitFromEnd(autoC2700F32_g, autoC2700F32_u);
                if (autoC2700F32_var == null) { break; }
                UnitSetHeight(autoC2700F32_var, 0.4, 0.0);
                if ((gv_side[UnitGetOwner(autoC2700F32_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoC2700F32_var, "SelendisSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoC2700F32_var, "Selendis");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 649, "Selendis Hero Carrier", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "pak") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4759000"))) {
            auto9E3EF76A_g = lp_skinUnits;
            auto9E3EF76A_u = UnitGroupCount(auto9E3EF76A_g, c_unitCountAll);
            for (;; auto9E3EF76A_u -= 1) {
                auto9E3EF76A_var = UnitGroupUnitFromEnd(auto9E3EF76A_g, auto9E3EF76A_u);
                if (auto9E3EF76A_var == null) { break; }
                if ((gv_side[UnitGetOwner(auto9E3EF76A_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, auto9E3EF76A_var, "DarkArchon");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, auto9E3EF76A_var, "DarkArchon");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 650, "Dark Archon", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "indo") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_PlayerIsModerator(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "1-S2-1-5315783") || (PlayerHandle(lp_skinRequestor) == "2-S2-1-4509618"))) {
            autoA1FED386_g = lp_skinUnits;
            autoA1FED386_u = UnitGroupCount(autoA1FED386_g, c_unitCountAll);
            for (;; autoA1FED386_u -= 1) {
                autoA1FED386_var = UnitGroupUnitFromEnd(autoA1FED386_g, autoA1FED386_u);
                if (autoA1FED386_var == null) { break; }
                if ((gv_side[UnitGetOwner(autoA1FED386_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "HybridDominatorVoidSmall");
                }
                else {
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "HybridDominatorVoid");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 651, "Hybrid Dominator Void", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "heldrik") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "2-S2-1-7503460"))) {
            autoA1FED386_g = lp_skinUnits;
            autoA1FED386_u = UnitGroupCount(autoA1FED386_g, c_unitCountAll);
            for (;; autoA1FED386_u -= 1) {
                autoA1FED386_var = UnitGroupUnitFromEnd(autoA1FED386_g, autoA1FED386_u);
                if (autoA1FED386_var == null) { break; }
                if ((gv_side[UnitGetOwner(autoA1FED386_var)] == "Probe")) {
                    UnitSetHeight(auto2C91D03A_var, 0.4, 0.0);
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "CarrierTalDarim");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 651, "Carrier TalDarim", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "tomas") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (PlayerHandle(lp_skinRequestor) == "2-S2-1-972544"))) {
            autoA1FED386_g = lp_skinUnits;
            autoA1FED386_u = UnitGroupCount(autoA1FED386_g, c_unitCountAll);
            for (;; autoA1FED386_u -= 1) {
                autoA1FED386_var = UnitGroupUnitFromEnd(autoA1FED386_g, autoA1FED386_u);
                if (autoA1FED386_var == null) { break; }
                if ((gv_side[UnitGetOwner(autoA1FED386_var)] == "Probe")) {
                    UnitSetHeight(auto2C91D03A_var, 0.4, 0.0);
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "CarrierNerazim");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 651, "Carrier Nerazim", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "wbga") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_IsWBGA(lp_skinRequestor) == true))) {
            autoA1FED386_g = lp_skinUnits;
            autoA1FED386_u = UnitGroupCount(autoA1FED386_g, c_unitCountAll);
            for (;; autoA1FED386_u -= 1) {
                autoA1FED386_var = UnitGroupUnitFromEnd(autoA1FED386_g, autoA1FED386_u);
                if (autoA1FED386_var == null) { break; }
                if ((gv_side[UnitGetOwner(autoA1FED386_var)] == "Probe")) {
                    UnitSetHeight(auto2C91D03A_var, 0.4, 0.0);
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "UmojanBattlecruiser");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 651, "Umojan Battlecruiser", lp_skinName);
        }

    }
    else if (autoADFA4B76_val == "pvzas") {
        if (((gf_PlayerIsDeveloper(lp_skinRequestor) == true) || (gf_IsPvZAS(lp_skinRequestor) == true))) {
            autoA1FED386_g = lp_skinUnits;
            autoA1FED386_u = UnitGroupCount(autoA1FED386_g, c_unitCountAll);
            for (;; autoA1FED386_u -= 1) {
                autoA1FED386_var = UnitGroupUnitFromEnd(autoA1FED386_g, autoA1FED386_u);
                if (autoA1FED386_var == null) { break; }
                if ((gv_side[UnitGetOwner(autoA1FED386_var)] == "Probe")) {
                    gf_SwapModel(lp_skinRequestor, autoA1FED386_var, "PurifierArchon");
                }
            }
            gf_SwapModelSaveToBank(lp_skinRequestor, 651, "Purifer Archon", lp_skinName);
        }

    }
    else {
    }
}

void gf_SwapModel (int lp_playerNumber, unit lp_unit, string lp_unitActor) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "Destroy Immediate");
    ActorCreate(ActorScopeFromUnit(lp_unit), lp_unitActor, null, null, null);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_playerNumber, "SwaptoModel", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_playerNumber, "SwaptoModel", 0);
}

void gf_SwapModelSaveToBank (int lp_player, int lp_modelNumber, string lp_modelName, string lp_modelSwapName) {
    // Automatic Variable Declarations
    string autoBC7214BD_val;

    // Implementation
    autoBC7214BD_val = gv_side[lp_player];
    if (autoBC7214BD_val == "Probe") {
        gv_probeModel[lp_player] = lp_modelNumber;
        if ((gv_nameisSetProbe[lp_player] == false)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", lp_player, lp_modelName);
        }

        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin) == true)) {
            BankValueSetFromString(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkinName, lp_modelSwapName);
            BankValueSetFromInt(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkin, lp_modelNumber);
            BankSave(gv_gameplayOptionsBanks[lp_player]);
        }

    }
    else if (autoBC7214BD_val == "Zealot") {
        gv_zealotModel[lp_player] = lp_modelNumber;
        if ((gv_nameisSetZealot[lp_player] == false)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Name", lp_player, lp_modelName);
        }

        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin) == true)) {
            BankValueSetFromString(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkinName, lp_modelSwapName);
            BankValueSetFromInt(gv_gameplayOptionsBanks[lp_player], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkin, lp_modelNumber);
            BankSave(gv_gameplayOptionsBanks[lp_player]);
        }

    }
    else {
    }
}

void gf_ProbeLearnsAbility (abilcmd lp_abilityHide1, abilcmd lp_abilityHide2, abilcmd lp_abilityHide3, abilcmd lp_abilityHide4, int lp_playerNumber, int lp_section, int lp_abilityNumber) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_playerNumber, lp_abilityHide1, false);
    TechTreeAbilityAllow(lp_playerNumber, lp_abilityHide2, false);
    TechTreeAbilityAllow(lp_playerNumber, lp_abilityHide3, false);
    TechTreeAbilityAllow(lp_playerNumber, lp_abilityHide4, false);
    if ((lp_section == 1)) {
        BankValueSetFromInt(gv_gameplayOptionsBanks[lp_playerNumber], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility1, lp_abilityNumber);
    }
    else {
        BankValueSetFromInt(gv_gameplayOptionsBanks[lp_playerNumber], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility2, lp_abilityNumber);
    }
    BankSave(gv_gameplayOptionsBanks[lp_playerNumber]);
}

void gf_SetGroup2 (int lp_playerNumber) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_playerNumber, gv_arrayLearnAbilities[2][1], true);
    TechTreeAbilityAllow(lp_playerNumber, gv_arrayLearnAbilities[2][2], true);
    TechTreeAbilityAllow(lp_playerNumber, gv_arrayLearnAbilities[2][3], true);
    TechTreeAbilityAllow(lp_playerNumber, gv_arrayLearnAbilities[2][4], true);
    TechTreeAbilityAllow(lp_playerNumber, gv_arrayLearnAbilities[2][5], true);
}

void gf_UpdateMineralPalletFeed (int lp_probePlayer, int lp_feed) {
    // Automatic Variable Declarations
    // Implementation
    gv_feed[lp_probePlayer] += lp_feed;
    BoardItemSetText(gv_leaderboard, 4, gv_rowofPlayer[lp_probePlayer], IntToText(gv_feed[lp_probePlayer]));
    gv_totalFeed += lp_feed;
    BoardItemSetText(gv_leaderboard, 4, gv_totalFeedRowLeaderboard, IntToText(gv_totalFeed));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool[17] lv_bankisExists;

    // Automatic Variable Declarations
    playergroup autoE5420815_g;
    int autoE5420815_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("DefaultLight", 0.0);
    PreloadAsset("LocalizedData\\Editor\\EditorStrings.txt", false);
    PreloadAsset("LocalizedData\\Editor\\EditorStringsSC2.txt", false);
    PreloadAsset("LocalizedData\\GameStrings.txt", false);
    PreloadAsset("LocalizedData\\GameHotkeys.txt", false);
    PreloadAsset("LocalizedData\\ConversationStrings.txt", false);
    PreloadAsset("LocalizedData\\TriggerStrings.txt", false);
    PreloadAsset("LocalizedData\\GameStringsProduct.txt", false);
    

    if ((GameAttributeGameValue("1") == "0003")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/14EC02E8"));
        // Game Variant: Fast Mode 1.5x
    }
    else {
        if ((GameAttributeGameValue("1") == "0002")) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/AB258C20"));
            // Game Variant: Small Maps Only
        }
        else {
            if ((GameAttributeGameValue("1") == "0004")) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/08195EE9"));
                // Game Variant: Probe Practice
            }
            else {
                if ((GameAttributeGameValue("1") == "0005")) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("DOCSTR_TrainModeIntro"));
                    // Game Variant: Train Mode
                }else{
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/BEA79910"));
                    // Game Variant: Standard Mode
                }
            }
        }
    }
    if ((GameIsTestMap(false) == true)) {
        gv_dEBUGMODE = true;
        TriggerEnable(gt_debug, true);
        TriggerEnable(gt_debugclose, true);
    }
    else {
        gv_dEBUGMODE = false;
    }
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    libNtve_gf_HideGameUI(false, PlayerGroupActive());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, 15.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CB939B14"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/29501EF6"));
    VisEnable(c_visTypeFog, true);
    gf_CloseTheBar();
    gf_CodeRegionOFF();
    TriggerEnable(gt_VoteButtonPressed, true);
    if ((gv_regame == false)) {
        TriggerExecute(gt_InitCamerasFirstStartup, true, true);
        GameSetSpeedValue(c_gameSpeedFaster);
        DialogCreate(200, 80, c_anchorTopLeft, -3, -3, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 40, c_anchorTopLeft, 0, 0, (StringExternal("Param/Value/B457443B") + gv_version), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "StandardLargePanelButton", PlayerGroupAll());
        libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 40, c_anchorTopLeft, 0, 34, StringToText(""), StringExternal("Param/Value/8505050D"), "");
        gv_uidialog = DialogControlLastCreated();
        autoE5420815_g = PlayerGroupActive();
        autoE5420815_var = -1;
        while (true) {
            autoE5420815_var = PlayerGroupNextPlayer(autoE5420815_g, autoE5420815_var);
            if (autoE5420815_var < 0) { break; }
            PlayerOptionOverride(autoE5420815_var, "selectuncontrolable", "1");
            PlayerOptionOverride(autoE5420815_var, "simplecommandcard", "0");
            VisExploreArea(autoE5420815_var, RegionEntireMap(), false, false);
        }
    }

    Wait(5.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    TriggerExecute(gt_ChooseMapInit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Game
//--------------------------------------------------------------------------------------------------
bool gt_InitGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_tempNumberofPlayer;
    int lv_numberofVampires;
    int lv_randomNumber;
    int lv_p;

    // Automatic Variable Declarations
    int auto8FEC6C29_ae;
    int auto8FEC6C29_var;
    const int autoF96D72F5_ae = 14;
    const int autoF96D72F5_ai = 1;
    int auto244407A2_val;
    const int auto2A912735_ae = 14;
    const int auto2A912735_ai = 1;
    int auto0BC1FEE8_val;
    int auto9D113DAD_val;
    const int autoA3B2014A_ae = 14;
    const int autoA3B2014A_ai = 1;
    const int autoF2D42946_ae = 14;
    const int autoF2D42946_ai = 1;
    const int auto4AD633A7_ae = 14;
    const int auto4AD633A7_ai = 1;
    int auto539DC6E0_ae;
    int auto539DC6E0_var;
    fixed auto7C3C5D2C_val;
    const int auto7302A9A1_ae = 14;
    int auto7302A9A1_var;
    const int autoE4CB8EF8_ae = 14;
    int autoE4CB8EF8_var;
    const int auto3D638921_ae = 14;
    const int auto3D638921_ai = 1;
    playergroup autoA3CBA560_g;
    int autoA3CBA560_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    // Respawn Raynor
    UnitKill(gv_Raynor);
    UnitCreate(1, "Raynor01", c_unitCreateIgnorePlacement, 0, gv_RaynorPoint, 14.8);
    gv_Raynor = UnitLastCreated();

    // Final Blade/Boots

    libNtve_gf_SetUpgradeLevelForPlayer(0, "EnableBoots", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(0, "DisableBoots", 1);

    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1183), true);
    UnitSetState(UnitFromId(1183), c_unitStateHidden, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(1188), true);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, false);
    TriggerEnable(gt_VoteButtonPressed, false);
    DialogDestroy(gv_voteBoard);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePylonButton, false);
    UISetResourceTradingMajorStep(c_resourceTypeTerrazine, 16);
    UISetResourceTradingMinorStep(c_resourceTypeTerrazine, 2);
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 512);
    UISetResourceTradingMinorStep(c_resourceTypeMinerals, 2);
    UISetResourceTradingMajorStep(c_resourceTypeVespene, 16);
    UISetResourceTradingMinorStep(c_resourceTypeVespene, 2);
    TriggerExecute(gt_InitGameplayOptionsBanks, true, true);
    TriggerExecute(gt_InitLearnAbilities, true, true);
    libNtve_gf_UnitCreateFacingPoint(1, "Factory", c_unitCreateIgnorePlacement, 0, gv_centerPoint, gv_centerPoint);
    gv_zShop = UnitLastCreated();
    if ((PlayerGroupCount(PlayerGroupActive()) > 2)) {
        auto8FEC6C29_ae = PlayerGroupCount(PlayerGroupActive());
        auto8FEC6C29_var = 1;
        for ( ; auto8FEC6C29_var <= auto8FEC6C29_ae; auto8FEC6C29_var += 1 ) {
            libNtve_gf_UnitCreateFacingPoint(1, "PalletGas", 0, 0, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
        }
    }

    lv_i = 1;
    for ( ; ( (autoF96D72F5_ai >= 0 && lv_i <= autoF96D72F5_ae) || (autoF96D72F5_ai < 0 && lv_i >= autoF96D72F5_ae) ) ; lv_i += autoF96D72F5_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank) == true)) {
                gv_playerCustomRankDisplay[lv_i] = true;
            }

            auto244407A2_val = PlayerGetColorIndex(lv_i, false);
            if (auto244407A2_val == 1) {
                gv_colorNumberofPlayer[1] = lv_i;
            }
            else if (auto244407A2_val == 2) {
                gv_colorNumberofPlayer[2] = lv_i;
            }
            else if (auto244407A2_val == 3) {
                gv_colorNumberofPlayer[3] = lv_i;
            }
            else if (auto244407A2_val == 4) {
                gv_colorNumberofPlayer[4] = lv_i;
            }
            else if (auto244407A2_val == 5) {
                gv_colorNumberofPlayer[5] = lv_i;
            }
            else if (auto244407A2_val == 6) {
                gv_colorNumberofPlayer[6] = lv_i;
            }
            else if (auto244407A2_val == 7) {
                gv_colorNumberofPlayer[7] = lv_i;
            }
            else if (auto244407A2_val == 8) {
                gv_colorNumberofPlayer[8] = lv_i;
            }
            else if (auto244407A2_val == 9) {
                gv_colorNumberofPlayer[9] = lv_i;
            }
            else if (auto244407A2_val == 10) {
                gv_colorNumberofPlayer[10] = lv_i;
            }
            else if (auto244407A2_val == 11) {
                gv_colorNumberofPlayer[11] = lv_i;
            }
            else if (auto244407A2_val == 12) {
                gv_colorNumberofPlayer[12] = lv_i;
            }
            else if (auto244407A2_val == 13) {
                gv_colorNumberofPlayer[13] = lv_i;
            }
            else if (auto244407A2_val == 14) {
                gv_colorNumberofPlayer[14] = lv_i;
            }
            else if (auto244407A2_val == 15) {
                gv_colorNumberofPlayer[15] = lv_i;
            }
            else {
            }
        }

    }
    lv_i = 1;
    for ( ; ( (auto2A912735_ai >= 0 && lv_i <= auto2A912735_ae) || (auto2A912735_ai < 0 && lv_i >= auto2A912735_ae) ) ; lv_i += auto2A912735_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            PlayerGroupRemove(gv_premiumZealots, lv_i);
            libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_playerGroupProbes, gv_premiumZealots);
            lv_tempNumberofPlayer = 0;
            gv_humanNumberPlayer[lv_i] = lv_i;
            DialogCreate(600, 350, c_anchorLeft, 0, -150, true);
            gv_probepopup[lv_i] = DialogLastCreated();
            DialogSetTitle(gv_probepopup[lv_i], StringExternal("Param/Value/03288870"));
            DialogSetTransparency(gv_probepopup[lv_i], 25.0);
            libNtve_gf_CreateDialogItemButton(gv_probepopup[lv_i], 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/8FAF94BD"), StringExternal("Param/Value/A90F0491"), "");
            gv_closewindow3[lv_i] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_probepopup[lv_i], 100, 50, c_anchorBottom, 0, 25, StringExternal("Param/Value/8FCD60E3"), StringExternal("Param/Value/BCDED78E"), "");
            gv_closewindow4[lv_i] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemCheckBox(gv_probepopup[lv_i], 50, 50, c_anchorBottomLeft, 25, 25, StringExternal("Param/Value/FF4F3D07"), false);
            gv_disablepopup3[lv_i] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_probepopup[lv_i], 200, 50, c_anchorBottomLeft, 75, 8, StringExternal("Param/Value/E91F6682"), ColorWithAlpha(0,0,0,0), false, 2.0);
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_startMineralsHuman);
            PlayerModifyPropertyInt(lv_i, c_playerPropVespene, c_playerPropOperSetTo, gv_startVespeneHuman);
            PlayerModifyPropertyInt(lv_i, c_playerPropTerrazine, c_playerPropOperSetTo, gv_startTerrazineHuman);
            CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", lv_i, "Probe");

            libNtve_gf_UnitCreateFacingPoint(1, "Probe", 0, lv_i, RegionRandomPoint(RegionFromId(6)), RegionRandomPoint(RegionFromId(6)));
            UnitAbilityEnable(UnitLastCreated(), "ShowHideRanks", false);
            UnitAbilityShow(UnitLastCreated(), "VoidPrisonAutoCastOff", false);
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility) == true)) {
                UnitAbilityShow(UnitLastCreated(), "Repair", true);
                UnitAbilityShow(UnitLastCreated(), "RepairAutoCastOff", false);
            }
            else {
                UnitAbilityShow(UnitLastCreated(), "Repair", false);
                UnitAbilityShow(UnitLastCreated(), "RepairAutoCastOff", true);
            }
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin) == true)) {
                auto0BC1FEE8_val = BankValueGetAsInt(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkin);
                if (auto0BC1FEE8_val == 1) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Probe");
                }
                else if (auto0BC1FEE8_val == 2) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "SCV");
                    libNtve_gf_UnitSetVariation(UnitLastCreated(), "SCVFusionWelder", 0, "");
                }
                else if (auto0BC1FEE8_val == 3) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "MinerMale");
                }
                else if (auto0BC1FEE8_val == 4) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "UtilityBot");
                }
                else if (auto0BC1FEE8_val == 5) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DarkProbe");
                }
                else if (auto0BC1FEE8_val == 6) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Dutch");
                }
                else if (auto0BC1FEE8_val == 7) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Bones");
                }
                else if (auto0BC1FEE8_val == 8) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "MULE");
                }
                else if (auto0BC1FEE8_val == 9) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Medic");
                }
                else if (auto0BC1FEE8_val == 10) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Sentry");
                }
                else if (auto0BC1FEE8_val == 11) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PrisonerSpectre");
                }
                else if (auto0BC1FEE8_val == 12) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DevilDog");
                }
                else if (auto0BC1FEE8_val == 13) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Baneling");
                }
                else if (auto0BC1FEE8_val == 14) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Hellion");
                }
                else if (auto0BC1FEE8_val == 15) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeCube");
                }
                else if (auto0BC1FEE8_val == 16) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Probe");
                }
                else if (auto0BC1FEE8_val == 17) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ChangelingZerglingWings");
                }
                else if (auto0BC1FEE8_val == 18) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Larva");
                }
                else if (auto0BC1FEE8_val == 19) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeLemon");
                }
                else if (auto0BC1FEE8_val == 20) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "SpaceDiablo");
                }
                else if (auto0BC1FEE8_val == 21) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Vulture");
                }
                else if (auto0BC1FEE8_val == 22) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "SpiderMineVulture");
                }
                else if (auto0BC1FEE8_val == 23) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Diamondback");
                }
                else if (auto0BC1FEE8_val == 24) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "CargoTruckUnitFlatbed");
                }
                else if (auto0BC1FEE8_val == 25) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DumpTruck");
                }
                else if (auto0BC1FEE8_val == 26) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "CruiserBike");
                }
                else if (auto0BC1FEE8_val == 27) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "AdjutantCapsule");
                }
                else if (auto0BC1FEE8_val == 28) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Changeling");
                }
                else if (auto0BC1FEE8_val == 29) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "SiegeTank");
                }
                else if (auto0BC1FEE8_val == 30) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PickupEnergyFull");
                }
                else if (auto0BC1FEE8_val == 31) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PickupHealthFull");
                }
                else if (auto0BC1FEE8_val == 32) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "CarrionBird");
                }
                else if (auto0BC1FEE8_val == 33) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Dog");
                }
                else if (auto0BC1FEE8_val == 34) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "KarakMale");
                }
                else if (auto0BC1FEE8_val == 35) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Sheep");
                }
                else if (auto0BC1FEE8_val == 36) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Cow");
                }
                else if (auto0BC1FEE8_val == 37) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeSoccerball");
                }
                else if (auto0BC1FEE8_val == 38) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeBasketball");
                }
                else if (auto0BC1FEE8_val == 39) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeFootballColored");
                }
                else if (auto0BC1FEE8_val == 40) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeBanana");
                }
                else if (auto0BC1FEE8_val == 41) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeApple");
                }
                else if (auto0BC1FEE8_val == 42) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapePineapple");
                }
                else if (auto0BC1FEE8_val == 43) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "ShapeWatermelon");
                }
                else if (auto0BC1FEE8_val == 44) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Probe");
                }
                else if (auto0BC1FEE8_val == 45) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Probe");
                }
                else if (auto0BC1FEE8_val == 46) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Shark1");
                }
                else {
                    gf_SkinSwapModelForUnits(BankValueGetAsString(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkinName), lv_i, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()));
                }
            }

            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin) == true)) {
                auto9D113DAD_val = BankValueGetAsInt(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofProbeSkin);
                if (auto9D113DAD_val == 1) {
                }
                else if (auto9D113DAD_val == 2) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 3) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 50.20, 100.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 4) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 100.00, 100.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 5) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 0.00, 100.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 6) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 7) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 8) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 50.20, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 9) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 100.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 10) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 0.00, 97.65), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 11) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 25.10, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 12) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 13) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 14) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 50.20), 1.0, 0.0));
                }
                else if (auto9D113DAD_val == 15) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 2.0, 0.0));
                }
                else if (auto9D113DAD_val == 16) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(34.51, 34.51, 34.51), 1.0, 0.0));
                }
                else {
                }
            }

            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin) == true)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", lv_i, BankValueGetAsString(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofProbeSkin));
                gv_nameisSetProbe[lv_i] = true;
            }

            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin) == true)) {
                if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_scaleofProbeSkin) == true)) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.3, 1.3, 1.3, 0.0));
                }

            }

            UnitSelect(UnitLastCreated(), lv_i, true);
            UnitControlGroupAddUnits(lv_i, 1, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()));
            gv_probes[lv_i] = UnitLastCreated();
            VisRevealArea(lv_i, RegionFromId(6), 5.0, true);
            lv_j = 1;
            for ( ; ( (autoA3B2014A_ai >= 0 && lv_j <= autoA3B2014A_ae) || (autoA3B2014A_ai < 0 && lv_j >= autoA3B2014A_ae) ) ; lv_j += autoA3B2014A_ai ) {
                if (((gv_side[lv_j] != "Zealot") && (PlayerType(lv_j) == c_playerTypeUser))) {
                    libNtve_gf_SetAlliance(lv_i, lv_j, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    if (((gv_side[lv_j] == "Zealot") && (PlayerType(lv_j) == c_playerTypeUser))) {
                        libNtve_gf_SetAlliance(lv_i, lv_j, libNtve_ge_AllianceSetting_Enemy);
                    }

                }
            }
        }

    }
    lv_i = 1;
    for ( ; ( (autoF2D42946_ai >= 0 && lv_i <= autoF2D42946_ae) || (autoF2D42946_ai < 0 && lv_i >= autoF2D42946_ae) ) ; lv_i += autoF2D42946_ai ) {
        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            lv_numberofVampires += 1;
            lv_tempNumberofPlayer = 0;
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_startMineralsZealot);
            PlayerModifyPropertyInt(lv_i, c_playerPropVespene, c_playerPropOperSetTo, gv_startVespeneZealot);
            PlayerModifyPropertyInt(lv_i, c_playerPropTerrazine, c_playerPropOperSetTo, gv_startTerrazineZealot);
            gv_vampireNumberPlayer[lv_i] = lv_i;
            VisRevealArea(lv_i, RegionFromId(6), 65.0, false);
            lv_j = 1;
            for ( ; ( (auto4AD633A7_ai >= 0 && lv_j <= auto4AD633A7_ae) || (auto4AD633A7_ai < 0 && lv_j >= auto4AD633A7_ae) ) ; lv_j += auto4AD633A7_ai ) {
                if (((gv_side[lv_j] == "Zealot") && (PlayerType(lv_j) == c_playerTypeUser))) {
                    libNtve_gf_SetAlliance(lv_i, lv_j, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }

            }
            if ((gv_chosenMap == 10)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "ScannerSweep", "RevealRadius", lv_i, "17");
                CatalogFieldValueSet(c_gameCatalogActor, "ScannerSweepVisual", "Range", lv_i, "17");
                CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Sight", lv_i, "13");
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/E9705354"));
            }

        }

    }
    if ((gv_regame == false)) {
        TriggerExecute(gt_InitTips, true, false);
        TriggerExecute(gt_InitCameras, true, true);
    }

    auto539DC6E0_ae = PlayerGroupCount(PlayerGroupActive());
    auto539DC6E0_var = 1;
    for ( ; auto539DC6E0_var <= auto539DC6E0_ae; auto539DC6E0_var += 1 ) {
        auto7C3C5D2C_val = BankValueGetAsFixed(gv_gameplayOptionsBanks[auto539DC6E0_var], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings);
        if (auto7C3C5D2C_val == 10.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 10.0);
        }
        else if (auto7C3C5D2C_val == 20.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 20.0);
        }
        else if (auto7C3C5D2C_val == 30.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 30.0);
        }
        else if (auto7C3C5D2C_val == 40.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 40.0);
        }
        else if (auto7C3C5D2C_val == 50.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 50.0);
        }
        else if (auto7C3C5D2C_val == 60.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 60.0);
        }
        else if (auto7C3C5D2C_val == 70.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 70.0);
        }
        else if (auto7C3C5D2C_val == 80.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 80.0);
        }
        else if (auto7C3C5D2C_val == 90.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 90.0);
        }
        else if (auto7C3C5D2C_val == 100.0) {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 100.0);
        }
        else {
            CameraInfoSetValue(gv_cameras[auto539DC6E0_var], c_cameraValueDistance, 34.0);
        }
        CameraApplyInfo(auto539DC6E0_var, gv_cameras[auto539DC6E0_var], 3.0, -1, 10.0, true);
        CameraSetValue(auto539DC6E0_var, c_cameraValueYaw, 90.0, 3.0, -1, 10.0);
        CameraSetValue(auto539DC6E0_var, c_cameraValuePitch, 61.45, 3.0, -1, 10.0);
        CameraPan(auto539DC6E0_var, gv_centerPoint, 3.0, -1, 10, true);
    }
    auto7302A9A1_var = 1;
    for ( ; auto7302A9A1_var <= auto7302A9A1_ae; auto7302A9A1_var += 1 ) {
        libNtve_gf_PauseUnit(gv_probes[auto7302A9A1_var], true);
    }
    TriggerExecute(gt_buildbase, true, false);
    TriggerExecute(gt_CheckPremiumProbe, true, false);
    TriggerExecute(gt_CheckPremiumZealot, true, false);
    TriggerExecute(gt_StartGame, true, true);
    autoE4CB8EF8_var = 1;
    for ( ; autoE4CB8EF8_var <= autoE4CB8EF8_ae; autoE4CB8EF8_var += 1 ) {
        libNtve_gf_PauseUnit(gv_probes[autoE4CB8EF8_var], false);
        UnitBehaviorAdd(gv_probes[autoE4CB8EF8_var], "ProbeStartupSpeed", gv_probes[autoE4CB8EF8_var], 1);
    }
    GameTimeOfDaySetLength(480.0);
    GameTimeOfDaySet("06:00:00");
    TriggerExecute(gt_InitMarketPrices, true, true);
    TriggerExecute(gt_ResourcePerSecondInit, true, false);
    lv_i = 1;
    for ( ; ( (auto3D638921_ai >= 0 && lv_i <= auto3D638921_ae) || (auto3D638921_ai < 0 && lv_i >= auto3D638921_ae) ) ; lv_i += auto3D638921_ai ) {
        if ((UnitIsAlive(gv_probes[lv_i]) == true)) {
            DialogSetVisible(gv_marketPricesDialog, PlayerGroupSingle(lv_i), true);
        }

    }
    TriggerExecute(gt_InitLeaderboard, true, false);
    TriggerEnable(gt_GameplayOptionsButtonPressed, true);
    TriggerEnable(gt_DefaultButtonPressed, true);
    TriggerEnable(gt_ReturntoGameButtonPressed, true);
    TriggerEnable(gt_ChooseHelpSidePressed, true);
    TriggerEnable(gt_ResourcePerSecondUpdater, true);
    TimerStart(gv_timerAsktoAllowHunter, gf_PvZ2Time(gv_asktoAllowHunterTime), false, c_timeGame);
    TimerStart(gv_spawnVampires, gf_PvZ2Time(gv_spawnVampiresTime), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/3B9421A1"), true, false);
    gv_spawnVampiresWindow = TimerWindowLastCreated();
    UISetResourceTradeCountdownTime(10);
    TimerStart(gv_timerEnableTrading, gf_PvZ2Time(10.0), false, c_timeGame);
    TimerStart(gv_timerChooseHelpSide, gf_PvZ2Time(300.0), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/63FD1638"), false, false);
    gv_timerWindowChooseHelpSide = TimerWindowLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/99FF5C50"));
    Wait(gf_PvZ2Time(4.0), c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/A7C248B2"));
    if (((GameAttributeGameValue("1") == "0004") || (PlayerGroupCount(PlayerGroupActive()) == 1))) {
        gv_soloMode = true;
        autoA3CBA560_g = PlayerGroupActive();
        autoA3CBA560_var = -1;
        while (true) {
            autoA3CBA560_var = PlayerGroupNextPlayer(autoA3CBA560_g, autoA3CBA560_var);
            if (autoA3CBA560_var < 0) { break; }
            gv_banks[autoA3CBA560_var] = null;
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D050594A"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/B96996AA"));
    }

    if(GameAttributeGameValue("1") == "0005"){
        InitTrainMode();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitGame_Init () {
    gt_InitGame = TriggerCreate("gt_InitGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool gt_StartGame_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[17] lv_countdownRun;
    int[17] lv_countdown1;
    int[17] lv_countdown2;
    int[17] lv_countdown3;

    // Automatic Variable Declarations
    const int autoE2D377EB_ae = 14;
    int autoE2D377EB_var;
    const int auto8271BCF7_ae = 14;
    int auto8271BCF7_var;
    const int auto0915CB42_ae = 14;
    int auto0915CB42_var;
    const int auto1550F73A_ae = 14;
    int auto1550F73A_var;
    const int autoDFB28E0C_ae = 14;
    int autoDFB28E0C_var;
    const int auto3E780FE2_ae = 14;
    int auto3E780FE2_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_countdownRun[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_countdown1[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_countdown2[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_countdown3[init_i] = c_textTagNone;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2D377EB_var = 1;
    for ( ; autoE2D377EB_var <= autoE2D377EB_ae; autoE2D377EB_var += 1 ) {
        if ((PlayerStatus(autoE2D377EB_var) == c_playerStatusActive)) {
            CameraSetValue(autoE2D377EB_var, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            CameraLockInput(autoE2D377EB_var, true);
        }

    }
    Wait(1.0, c_timeReal);
    auto8271BCF7_var = 1;
    for ( ; auto8271BCF7_var <= auto8271BCF7_ae; auto8271BCF7_var += 1 ) {
        if ((PlayerStatus(auto8271BCF7_var) == c_playerStatusActive)) {
            if ((UnitIsAlive(gv_probes[auto8271BCF7_var]) == true)) {
                TextTagCreate(StringExternal("Param/Value/57043F8D"), 64, UnitGetPosition(gv_probes[auto8271BCF7_var]), 2.0, true, false, PlayerGroupSingle(auto8271BCF7_var));
            }
            else {
                TextTagCreate(StringExternal("Param/Value/D476D3E1"), 64, RegionGetCenter(RegionFromId(6)), 2.0, true, false, PlayerGroupSingle(auto8271BCF7_var));
            }
            lv_countdown3[auto8271BCF7_var] = TextTagLastCreated();
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto8271BCF7_var), true);
            SoundPlay(SoundLink("UI_InfoPanelUnitSelect", -1), PlayerGroupSingle(auto8271BCF7_var), 100.0, 0.0);
        }

    }
    Wait(1.0, c_timeReal);
    auto0915CB42_var = 1;
    for ( ; auto0915CB42_var <= auto0915CB42_ae; auto0915CB42_var += 1 ) {
        if ((PlayerStatus(auto0915CB42_var) == c_playerStatusActive)) {
            TextTagDestroy(lv_countdown3[auto0915CB42_var]);
            if ((UnitIsAlive(gv_probes[auto0915CB42_var]) == true)) {
                TextTagCreate(StringExternal("Param/Value/8ECC1903"), 64, UnitGetPosition(gv_probes[auto0915CB42_var]), 2.0, true, false, PlayerGroupSingle(auto0915CB42_var));
            }
            else {
                TextTagCreate(StringExternal("Param/Value/A43F99FD"), 64, RegionGetCenter(RegionFromId(6)), 2.0, true, false, PlayerGroupSingle(auto0915CB42_var));
            }
            lv_countdown2[auto0915CB42_var] = TextTagLastCreated();
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto0915CB42_var), true);
            SoundPlay(SoundLink("UI_InfoPanelUnitSelect", -1), PlayerGroupSingle(auto0915CB42_var), 100.0, 0.0);
        }

    }
    Wait(1.0, c_timeReal);
    auto1550F73A_var = 1;
    for ( ; auto1550F73A_var <= auto1550F73A_ae; auto1550F73A_var += 1 ) {
        if ((PlayerStatus(auto1550F73A_var) == c_playerStatusActive)) {
            TextTagDestroy(lv_countdown2[auto1550F73A_var]);
            if ((UnitIsAlive(gv_probes[auto1550F73A_var]) == true)) {
                TextTagCreate(StringExternal("Param/Value/DA16D84F"), 64, UnitGetPosition(gv_probes[auto1550F73A_var]), 2.0, true, false, PlayerGroupSingle(auto1550F73A_var));
            }
            else {
                TextTagCreate(StringExternal("Param/Value/7B44347B"), 64, RegionGetCenter(RegionFromId(6)), 2.0, true, false, PlayerGroupSingle(auto1550F73A_var));
            }
            lv_countdown1[auto1550F73A_var] = TextTagLastCreated();
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(auto1550F73A_var), true);
            SoundPlay(SoundLink("UI_InfoPanelUnitSelect", -1), PlayerGroupSingle(auto1550F73A_var), 100.0, 0.0);
        }

    }
    Wait(1.0, c_timeReal);
    autoDFB28E0C_var = 1;
    for ( ; autoDFB28E0C_var <= autoDFB28E0C_ae; autoDFB28E0C_var += 1 ) {
        if ((PlayerStatus(autoDFB28E0C_var) == c_playerStatusActive)) {
            TextTagDestroy(lv_countdown1[autoDFB28E0C_var]);
            if ((UnitIsAlive(gv_probes[autoDFB28E0C_var]) == true)) {
                TextTagCreate(StringExternal("Param/Value/574BF419"), 64, UnitGetPosition(gv_probes[autoDFB28E0C_var]), 2.0, true, false, PlayerGroupSingle(autoDFB28E0C_var));
            }
            else {
                TextTagCreate(StringExternal("Param/Value/F99D2F57"), 64, RegionGetCenter(RegionFromId(6)), 2.0, true, false, PlayerGroupSingle(autoDFB28E0C_var));
            }
            lv_countdownRun[autoDFB28E0C_var] = TextTagLastCreated();
            TextTagShow(TextTagLastCreated(), PlayerGroupSingle(autoDFB28E0C_var), true);
            SoundPlay(SoundLink("Probe_Ready", -1), PlayerGroupSingle(autoDFB28E0C_var), 100.0, 0.0);
        }

    }
    Wait(1.0, c_timeReal);
    auto3E780FE2_var = 1;
    for ( ; auto3E780FE2_var <= auto3E780FE2_ae; auto3E780FE2_var += 1 ) {
        if ((PlayerStatus(auto3E780FE2_var) == c_playerStatusActive)) {
            TextTagDestroy(lv_countdownRun[auto3E780FE2_var]);
            CameraLockInput(auto3E780FE2_var, false);
        }

    }
    if ((gv_timescalemode == 1)) {
        GameSetGlobalTimeScale(1.0);
        gv_timescalevalue = 1.0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/E32826F3"));
    }

    if ((gv_timescalemode == 2)) {
        GameSetGlobalTimeScale(1.5);
        gv_timescalevalue = 1.5;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/5461FA29"));
    }

    if ((gv_timescalemode == 3)) {
        GameSetGlobalTimeScale(2.0);
        gv_timescalevalue = 2.0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F311BC89"));
    }

    TriggerEnable(gt_ChooseHunterAllowed, true);
    TriggerEnable(gt_DisableEarlyVision, true);
    TriggerEnable(gt_ReplenishMinerals, true);
    gf_AFKDetectStart();
    TimerStart(gv_timerDisableEarlyVision, gf_PvZ2Time(4.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame_Init () {
    gt_StartGame = TriggerCreate("gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Cameras
//--------------------------------------------------------------------------------------------------
bool gt_InitCameras_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_cameras[1] = CameraInfoFromId(1031);
    gv_cameras[2] = CameraInfoFromId(1032);
    gv_cameras[3] = CameraInfoFromId(1033);
    gv_cameras[4] = CameraInfoFromId(1034);
    gv_cameras[5] = CameraInfoFromId(1035);
    gv_cameras[6] = CameraInfoFromId(1036);
    gv_cameras[7] = CameraInfoFromId(1037);
    gv_cameras[8] = CameraInfoFromId(1038);
    gv_cameras[9] = CameraInfoFromId(1039);
    gv_cameras[10] = CameraInfoFromId(1040);
    gv_cameras[11] = CameraInfoFromId(1041);
    gv_cameras[12] = CameraInfoFromId(1042);
    gv_cameras[13] = CameraInfoFromId(1043);
    gv_cameras[14] = CameraInfoFromId(1044);
    gv_cameras[15] = CameraInfoFromId(1045);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCameras_Init () {
    gt_InitCameras = TriggerCreate("gt_InitCameras_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Cameras - First Startup
//--------------------------------------------------------------------------------------------------
bool gt_InitCamerasFirstStartup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF7043C71_g;
    int autoF7043C71_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7043C71_g = PlayerGroupAll();
    autoF7043C71_var = -1;
    while (true) {
        autoF7043C71_var = PlayerGroupNextPlayer(autoF7043C71_g, autoF7043C71_var);
        if (autoF7043C71_var < 0) { break; }
        VisRevealArea(autoF7043C71_var, RegionFromId(127), 120.0, false);
        CameraApplyInfo(autoF7043C71_var, CameraInfoFromId(945), 0.0, 0.0, 100.0, true);
        CameraSetValue(autoF7043C71_var, c_cameraValueYaw, 90.0, 4.0, -1, 10.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCamerasFirstStartup_Init () {
    gt_InitCamerasFirstStartup = TriggerCreate("gt_InitCamerasFirstStartup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Tips
//--------------------------------------------------------------------------------------------------
bool gt_InitTips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto375DBAB7_ae = 15;
    const int auto375DBAB7_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C3838A94"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/FE45CEB6"), StringToText(""), "Assets\\Textures\\btn-tips-credit.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/50337643"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/31BC6C86"), StringToText(""), "Assets\\Textures\\btn-tips-battlereport.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1A848B18"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/9AE28606"), StringToText(""), "Assets\\Textures\\ui-heroicon-tosh.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/CAB1B6E6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8B2CBA32"), StringToText(""), "Assets\\Textures\\btn-tips-researchunlocked.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/B7BDA9E2"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/D10C37A6"), StringToText(""), "Assets\\Textures\\btn-tips-ripfield.dds");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/825EF3BE"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/087F3207"), StringToText(""), "Assets\\Textures\\btn-tips-crystal.dds");
    TipAlertPanelClear(PlayerGroupAll());
    lv_i = 1;
    for ( ; ( (auto375DBAB7_ai >= 0 && lv_i <= auto375DBAB7_ae) || (auto375DBAB7_ai < 0 && lv_i >= auto375DBAB7_ae) ) ; lv_i += auto375DBAB7_ai ) {
        TechTreeUnitHelp(lv_i, "SentryGun", false);
        TechTreeUnitHelp(lv_i, "FlamingBetty", false);
        TechTreeUnitHelp(lv_i, "MercenaryFortress", false);
        TechTreeUnitHelp(lv_i, "DrakkenLaserDrill", false);
        TechTreeUnitHelp(lv_i, "Odin", false);
        TechTreeUnitHelp(lv_i, "BattlecruiserHeliosMorph", false);
        TechTreeUnitHelp(lv_i, "Loki", false);
        TechTreeUnitHelp(lv_i, "WarPig", false);
        TechTreeUnitHelp(lv_i, "HammerSecurity", false);
        TechTreeUnitHelp(lv_i, "DevilDog", false);
        TechTreeUnitHelp(lv_i, "SpartanCompany", false);
        TechTreeUnitHelp(lv_i, "SiegeBreaker", false);
        TechTreeUnitHelp(lv_i, "HelsAngelFighter", false);
        TechTreeUnitHelp(lv_i, "HelsAngelAssault", false);
        TechTreeUnitHelp(lv_i, "DuskWing", false);
        TechTreeUnitHelp(lv_i, "DukesRevenge", false);
        TechTreeUnitHelp(lv_i, "Raynor", false);
        TechTreeUnitHelp(lv_i, "Raynor01", false);
        TechTreeUnitHelp(lv_i, "RaynorCommando", false);
        TechTreeUnitHelp(lv_i, "TychusChaingun", false);
        TechTreeUnitHelp(lv_i, "TychusCommando", false);
        TechTreeUnitHelp(lv_i, "Nova", false);
        TechTreeUnitHelp(lv_i, "Warbot", false);
        TechTreeUnitHelp(lv_i, "SCV", false);
        TechTreeUnitHelp(lv_i, "Marine", false);
        TechTreeUnitHelp(lv_i, "Firebat", false);
        TechTreeUnitHelp(lv_i, "Reaper", false);
        TechTreeUnitHelp(lv_i, "Ghost", false);
        TechTreeUnitHelp(lv_i, "GhostLaserLines", false);
        TechTreeUnitHelp(lv_i, "Spectre", false);
        TechTreeUnitHelp(lv_i, "Hellion", false);
        TechTreeUnitHelp(lv_i, "Vulture", false);
        TechTreeUnitHelp(lv_i, "Goliath", false);
        TechTreeUnitHelp(lv_i, "Diamondback", false);
        TechTreeUnitHelp(lv_i, "Thor", false);
        TechTreeUnitHelp(lv_i, "VikingFighter", false);
        TechTreeUnitHelp(lv_i, "VikingAssault", false);
        TechTreeUnitHelp(lv_i, "Wraith", false);
        TechTreeUnitHelp(lv_i, "Medivac", false);
        TechTreeUnitHelp(lv_i, "Raven", false);
        TechTreeUnitHelp(lv_i, "Hercules", false);
        TechTreeUnitHelp(lv_i, "Banshee", false);
        TechTreeUnitHelp(lv_i, "Battlecruiser", false);
        TechTreeUnitHelp(lv_i, "PlanetaryFortress", false);
        TechTreeUnitHelp(lv_i, "ScienceVessel", false);
        TechTreeUnitHelp(lv_i, "PsiDisruptor", false);
        TechTreeUnitHelp(lv_i, "HiveMindEmulator", false);
        TechTreeUnitHelp(lv_i, "PerditionTurret", false);
        TechTreeUnitHelp(lv_i, "Bunker", false);
        TechTreeUnitHelp(lv_i, "PointDefenseDrone", false);
        TechTreeUnitHelp(lv_i, "RocketTurretLevel2", false);
        TechTreeUnitHelp(lv_i, "MachineGunLevel2", false);
        TechTreeUnitHelp(lv_i, "SpiderMine", false);
        TechTreeUnitHelp(lv_i, "Larva", false);
        TechTreeUnitHelp(lv_i, "Drone", false);
        TechTreeUnitHelp(lv_i, "Baneling", false);
        TechTreeUnitHelp(lv_i, "Hydralisk", false);
        TechTreeUnitHelp(lv_i, "Mutalisk", false);
        TechTreeUnitHelp(lv_i, "Corruptor", false);
        TechTreeUnitHelp(lv_i, "Infestor", false);
        TechTreeUnitHelp(lv_i, "BroodLord", false);
        TechTreeUnitHelp(lv_i, "Broodling", false);
        TechTreeUnitHelp(lv_i, "Overseer", false);
        TechTreeUnitHelp(lv_i, "Queen", false);
        TechTreeUnitHelp(lv_i, "Scourge", false);
        TechTreeUnitHelp(lv_i, "InfestedTerran", false);
        TechTreeUnitHelp(lv_i, "InfestedCivilian", false);
        TechTreeUnitHelp(lv_i, "InfestorTerran", false);
        TechTreeUnitHelp(lv_i, "InfestedTerranCampaign", false);
        TechTreeUnitHelp(lv_i, "NydusCanal", false);
        TechTreeUnitHelp(lv_i, "Virophage", false);
        TechTreeUnitHelp(lv_i, "SporeCannon", false);
        TechTreeUnitHelp(lv_i, "Brutalisk", false);
        TechTreeUnitHelp(lv_i, "Leviathan", false);
        TechTreeUnitHelp(lv_i, "HybridReaver", false);
        TechTreeUnitHelp(lv_i, "Kerrigan", false);
        TechTreeUnitHelp(lv_i, "Sentry", false);
        TechTreeUnitHelp(lv_i, "Probe", false);
        TechTreeUnitHelp(lv_i, "HighTemplar", false);
        TechTreeUnitHelp(lv_i, "Observer", false);
        TechTreeUnitHelp(lv_i, "WarpPrismPhasing", false);
        TechTreeUnitHelp(lv_i, "WarpPrism", false);
        TechTreeUnitHelp(lv_i, "Immortal", false);
        TechTreeUnitHelp(lv_i, "Colossus", false);
        TechTreeUnitHelp(lv_i, "Phoenix", false);
        TechTreeUnitHelp(lv_i, "Scout", false);
        TechTreeUnitHelp(lv_i, "VoidRay", false);
        TechTreeUnitHelp(lv_i, "Carrier", false);
        TechTreeUnitHelp(lv_i, "Interceptor", false);
        TechTreeUnitHelp(lv_i, "Mothership", false);
        TechTreeUnitHelp(lv_i, "Zeratul", false);
        TechTreeUnitHelp(lv_i, "Urun", false);
        TechTreeUnitHelp(lv_i, "Mohandar", false);
        TechTreeUnitHelp(lv_i, "Selendis", false);
        TechTreeUnitHelp(lv_i, "Artanis", false);
        TechTreeUnitHelp(lv_i, "StoneZealot", false);
        TechTreeUnitHelp(lv_i, "Karass", false);
        TechTreeUnitHelp(lv_i, "PreserverA", false);
        TechTreeUnitHelp(lv_i, "PreserverB", false);
        TechTreeUnitHelp(lv_i, "PreserverC", false);
        TechTreeUnitHelp(lv_i, "Purifier", false);
        TechTreeUnitHelp(lv_i, "HybridDestroyer", false);
        TechTreeUnitHelp(lv_i, "Maar", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
        HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitTips_Init () {
    gt_InitTips = TriggerCreate("gt_InitTips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Recording
//--------------------------------------------------------------------------------------------------
bool gt_StartRecording_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_numberofHumans;
    int lv_numberofVampires;

    // Automatic Variable Declarations
    const int autoA69B8801_ae = 14;
    const int autoA69B8801_ai = 1;
    const int autoB70AFDFC_ae = 14;
    const int autoB70AFDFC_ai = 1;
    const int auto4D06148C_ae = 14;
    int auto4D06148C_var;
    playergroup auto0D7AFD70_g;
    int auto0D7AFD70_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_gameEnd == false) && (gv_soloMode == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoA69B8801_ai >= 0 && lv_i <= autoA69B8801_ae) || (autoA69B8801_ai < 0 && lv_i >= autoA69B8801_ae) ) ; lv_i += autoA69B8801_ai ) {
        if ((UnitIsAlive(gv_probes[lv_i]) == true)) {
            lv_numberofHumans += 1;
        }

    }
    if (((lv_numberofHumans == 0) && (gv_gameEnd == false))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/E8784092"));
        gv_gameEnd = true;
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_RegameInit, true, false);
        TriggerStop(TriggerGetCurrent());
    }

    lv_i = 1;
    for ( ; ( (autoB70AFDFC_ai >= 0 && lv_i <= autoB70AFDFC_ae) || (autoB70AFDFC_ai < 0 && lv_i >= autoB70AFDFC_ae) ) ; lv_i += autoB70AFDFC_ai ) {
        if ((UnitIsAlive(gv_zealots[lv_i]) == true)) {
            lv_numberofVampires += 1;
        }

    }
    if (((lv_numberofVampires == 0) && (gv_gameEnd == false))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/6063F9D0"));
        gv_gameEnd = true;
        Wait(3.0, c_timeGame);
        TriggerExecute(gt_RegameInit, true, false);
        TriggerStop(TriggerGetCurrent());
    }

    gv_startRecording = true;
    TriggerExecute(gt_InitVoteKick, true, false);
    TriggerEnable(gt_ZealotDies, true);
    TriggerEnable(gt_HunterDies, true);
    TriggerEnable(gt_VoteKickPressed, true);
    TriggerEnable(gt_SpiritVotePressed, true);
    TriggerEnable(gt_ForceSalvageFeederPressed, true);
    TriggerEnable(gt_RemoverPlayerPressed, true);
    TriggerEnable(gt_KickPlayerPressed, true);
    TriggerEnable(gt_KickVoteYesNo, true);
    TriggerEnable(gt_WaitSpawnHunter, true);
    TriggerExecute(gt_InitChooseHelpSide, true, false);
    if ((gv_gameEnd == false)) {
        if (true) {
            gv_rankedGame = true;
            if ((gv_regame == false)) {
                TriggerExecute(gt_InitCommonAchievementsLibrary, true, true);
                TriggerExecute(gt_InitProbeAchievementsLibrary, true, true);
                TriggerExecute(gt_InitZealotAchievementsLibrary, true, true);
                TriggerExecute(gt_InitRewardsLibrary, true, true);
            }

            Wait(0.1, c_timeGame);
            TriggerExecute(gt_InitBanks, true, true);
            TriggerEnable(gt_WriteHoursandresourcesAchievements, true);
            TriggerEnable(gt_CheckSpendResourcesAchievements, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/D9199FF3") + TextWithColor(PlayerName(PlayerGroupPlayer(gv_playerGroupZealots, 1)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(gv_playerGroupZealots, 1), false)))) + (StringExternal("Param/Value/EDC50053") + StringToText(gf_CalculateRankColored(gv_pointsVampire[PlayerGroupPlayer(gv_playerGroupZealots, 1)], PlayerGroupPlayer(gv_playerGroupZealots, 1))))));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/A1582C11"));
        }
    }

    TriggerExecute(gt_autostatsresetzankza, true, false);
    auto4D06148C_var = 1;
    for ( ; auto4D06148C_var <= auto4D06148C_ae; auto4D06148C_var += 1 ) {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", auto4D06148C_var, "Hide Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", auto4D06148C_var, "Icons\\hide ranks.dds");
        gv_labelRankStatus[auto4D06148C_var] = false;
        auto0D7AFD70_g = PlayerGroupActive();
        auto0D7AFD70_var = -1;
        while (true) {
            auto0D7AFD70_var = PlayerGroupNextPlayer(auto0D7AFD70_g, auto0D7AFD70_var);
            if (auto0D7AFD70_var < 0) { break; }
            TextTagShow(gv_playersLabelRanks[auto0D7AFD70_var], PlayerGroupSingle(auto4D06148C_var), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartRecording_Init () {
    gt_StartRecording = TriggerCreate("gt_StartRecording_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Zealot Expires
//--------------------------------------------------------------------------------------------------
bool gt_SpawnZealotExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto3C7F7F77_ae = 14;
    const int auto3C7F7F77_ai = 1;
    int autoE41A3F17_val;
    int auto89B9826A_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameEnd == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(800, 625, c_anchorTopRight, 0, 125, true);
    gv_suggesteddialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 25.0);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/2458F3F5"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 750, 50, c_anchorTopLeft, 100, 100, StringExternal("Param/Value/9705EAA8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 750, 600, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/A34C7D13"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(gv_suggesteddialog, 50, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/94705155"), false);
    gv_disablepopup2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_suggesteddialog, 200, 50, c_anchorTopLeft, 75, 35, StringExternal("Param/Value/013F73A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogCreate(600, 250, c_anchorLeft, 0, -150, true);
    gv_zealotpopup = DialogLastCreated();
    DialogSetTitle(gv_zealotpopup, StringExternal("Param/Value/2D40EFC0"));
    DialogSetTransparency(gv_zealotpopup, 25.0);
    libNtve_gf_CreateDialogItemButton(gv_zealotpopup, 50, 50, c_anchorTopRight, 0, 0, StringExternal("Param/Value/F4DAE2DF"), StringExternal("Param/Value/0DCBDA73"), "");
    gv_closewindow = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_zealotpopup, 100, 50, c_anchorBottom, 0, 25, StringExternal("Param/Value/72919323"), StringExternal("Param/Value/8EC1FBE1"), "");
    gv_closewindow2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_zealotpopup, 50, 50, c_anchorBottomLeft, 25, 25, StringExternal("Param/Value/A673548C"), false);
    gv_disablepopup = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 200, 50, c_anchorBottomLeft, 75, 8, StringExternal("Param/Value/6612C748"), ColorWithAlpha(0,0,0,0), false, 2.0);
    TimerWindowDestroy(gv_spawnVampiresWindow);
    lv_i = 1;
    for ( ; ( (auto3C7F7F77_ai >= 0 && lv_i <= auto3C7F7F77_ae) || (auto3C7F7F77_ai < 0 && lv_i >= auto3C7F7F77_ae) ) ; lv_i += auto3C7F7F77_ai ) {
        VisRevealArea(lv_i, RegionFromId(6), 0.01, false);
        if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Name", lv_i, "Zealot");
            CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Name", lv_i, "Predator");
            libNtve_gf_UnitCreateFacingPoint(1, "PrisonZealot", 0, lv_i, gv_centerPoint, gv_centerPoint);
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin) == true)) {
                autoE41A3F17_val = BankValueGetAsInt(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkin);
                if (autoE41A3F17_val == 1) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PrisonZealot");
                }
                else if (autoE41A3F17_val == 2) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "InfestedTerran");
                }
                else if (autoE41A3F17_val == 3) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "InfestedCivilian");
                }
                else if (autoE41A3F17_val == 4) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "QueenOfBlades");
                }
                else if (autoE41A3F17_val == 5) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Roach");
                }
                else if (autoE41A3F17_val == 6) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Queen");
                }
                else if (autoE41A3F17_val == 7) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Brutalisk");
                }
                else if (autoE41A3F17_val == 8) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Hydralisk");
                }
                else if (autoE41A3F17_val == 9) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PredatorSkin");
                }
                else if (autoE41A3F17_val == 10) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DarkZealot");
                }
                else if (autoE41A3F17_val == 11) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DarkTemplar");
                }
                else if (autoE41A3F17_val == 12) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "HybridE");
                }
                else if (autoE41A3F17_val == 13) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Zealot");
                }
                else if (autoE41A3F17_val == 14) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "InfestedAbomination");
                }
                else if (autoE41A3F17_val == 15) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Ultralisk");
                }
                else if (autoE41A3F17_val == 16) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Zergling");
                }
                else if (autoE41A3F17_val == 17) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Broodling");
                }
                else if (autoE41A3F17_val == 18) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Zeratul");
                }
                else if (autoE41A3F17_val == 19) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "DeathwingGround");
                }
                else if (autoE41A3F17_val == 20) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Alexstraza");
                }
                else if (autoE41A3F17_val == 21) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Nozdomu");
                }
                else if (autoE41A3F17_val == 22) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Ysera");
                }
                else if (autoE41A3F17_val == 23) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Malygos");
                }
                else if (autoE41A3F17_val == 24) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "PhoenixDark");
                }
                else if (autoE41A3F17_val == 25) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "GreenTurtle");
                }
                else if (autoE41A3F17_val == 26) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "RaptorGreen");
                }
                else if (autoE41A3F17_val == 27) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "GreenRex");
                }
                else if (autoE41A3F17_val == 28) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "Diematradon");
                }
                else if (autoE41A3F17_val == 29) {
                    gf_SwapModel(lv_i, UnitLastCreated(), "AlarakChampion");
                }
                else {
                    gf_SkinSwapModelForUnits(BankValueGetAsString(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkinName), lv_i, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()));
                }
            }

            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin) == true)) {
                auto89B9826A_val = BankValueGetAsInt(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_colorofZealotSkin);
                if (auto89B9826A_val == 1) {
                }
                else if (auto89B9826A_val == 2) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 3) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 50.20, 100.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 4) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 100.00, 100.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 5) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 0.00, 100.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 6) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 100.00, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 7) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 8) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 50.20, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 9) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 50.20, 100.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 10) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 0.00, 97.65), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 11) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 25.10, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 12) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 13) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 100.00, 0.00), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 14) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 50.20), 1.0, 0.0));
                }
                else if (auto89B9826A_val == 15) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 2.0, 0.0));
                }
                else if (auto89B9826A_val == 16) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(34.51, 34.51, 34.51), 1.0, 0.0));
                }
                else {
                }
            }

            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin) == true)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Name", lv_i, BankValueGetAsString(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofZealotSkin));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Name", lv_i, BankValueGetAsString(gv_gameplayOptionsBanks[lv_i], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofZealotSkin));
                gv_nameisSetZealot[lv_i] = true;
            }
            else {
                CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Name", lv_i, "Zealot");
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Name", lv_i, "Hunter");
            }
            gv_zealots[lv_i] = UnitLastCreated();
            gv_zealotsTemp[lv_i] = UnitLastCreated();
            UnitControlGroupAddUnits(lv_i, 1, libNtve_gf_ConvertUnitToUnitGroup(gv_zealots[lv_i]));
            CameraSetValue(lv_i, c_cameraValueYaw, 90.0, 0.0, -1, 10.0);
            CameraPan(lv_i, UnitGetPosition(gv_zealots[lv_i]), 1.0, -1, 10, false);
            UnitSelect(gv_zealots[lv_i], lv_i, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/3B1C0A2D") + TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)))) + StringExternal("Param/Value/319E5641")));
            UnitInventoryCreate(gv_zealots[lv_i], "RingofSight1");
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_startMineralsZealot);
            PlayerModifyPropertyInt(lv_i, c_playerPropVespene, c_playerPropOperSetTo, gv_startVespeneZealot);
            PlayerModifyPropertyInt(lv_i, c_playerPropTerrazine, c_playerPropOperSetTo, gv_startTerrazineZealot);
            if ((gv_timescalemode == 1)) {
                GameSetGlobalTimeScale(1.0);
                gv_timescalevalue = 1.0;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/66E33582"));
            }

            if ((gv_timescalemode == 2)) {
                GameSetGlobalTimeScale(1.5);
                gv_timescalevalue = 1.5;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/DC74EB2B"));
                UnitBehaviorAddPlayer(gv_zealots[lv_i], "25FeedBuff2", 0, 1);
                UnitBehaviorAddPlayer(gv_zealots[lv_i], "ZealotMoveSpeedBonus15xMap", 0, 1);
            }

            if ((gv_timescalemode == 3)) {
                GameSetGlobalTimeScale(2.0);
                gv_timescalevalue = 2.0;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F9C932B5"));
                UnitBehaviorAddPlayer(gv_zealots[lv_i], "50FeedBuff", 0, 1);
                UnitBehaviorAddPlayer(gv_zealots[lv_i], "ZealotMoveSpeedBonus2xMap", 0, 1);
            }

            if (((PlayerGroupCount(gv_playerGroupProbes) < 10) && ((gv_chosenMap == 4) || (gv_chosenMap == 5) || (gv_chosenMap == 6) || (gv_chosenMap == 7) || (gv_chosenMap == 9) || (gv_chosenMap == 10)))) {
                UnitInventoryCreate(gv_zealots[lv_i], "BasicBootsofSpeedLevel1");
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/2A4936CF"));
            }

        }
        else {
            if (((gv_side[lv_i] == "Probe") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                DialogSetVisible(gv_resourcePerSecond[lv_i], PlayerGroupSingle(lv_i), true);
            }

        }
    }
    TriggerExecute(gt_StartRecording, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnZealotExpires_Init () {
    gt_SpawnZealotExpires = TriggerCreate("gt_SpawnZealotExpires_Func");
    TriggerAddEventTimer(gt_SpawnZealotExpires, gv_spawnVampires);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Early Vision
//--------------------------------------------------------------------------------------------------
bool gt_DisableEarlyVision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetPlayerGroupAlliance(gv_playerGroupProbes, libNtve_ge_AllianceSetting_Ally);
    TriggerEnable(gt_DisableEarlyVision, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableEarlyVision_Init () {
    gt_DisableEarlyVision = TriggerCreate("gt_DisableEarlyVision_Func");
    TriggerEnable(gt_DisableEarlyVision, false);
    TriggerAddEventTimer(gt_DisableEarlyVision, gv_timerDisableEarlyVision);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Map Init
//--------------------------------------------------------------------------------------------------
bool gt_ChooseMapInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[11] lv_recommendedMapArray;
    int lv_i;
    int lv_additionalVotes;
    bool[17] lv_bankisExists;
    string lv_tempImage;

    // Automatic Variable Declarations
    const int autoB2A1051B_ae = 14;
    int autoB2A1051B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_IsPlayerOnline(1) == true)) {
    }

    if ((gf_IsPlayerOnline(2) == true)) {
    }

    if ((gf_IsPlayerOnline(3) == true)) {
    }

    if ((gf_IsPlayerOnline(4) == true)) {
    }

    if ((gf_IsPlayerOnline(5) == true)) {
    }

    if ((gf_IsPlayerOnline(6) == true)) {
    }

    if ((gf_IsPlayerOnline(7) == true)) {
    }

    if ((gf_IsPlayerOnline(8) == true)) {
    }

    if ((gf_IsPlayerOnline(9) == true)) {
    }

    if ((gf_IsPlayerOnline(10) == true)) {
    }

    if ((gf_IsPlayerOnline(11) == true)) {
    }

    if ((gf_IsPlayerOnline(12) == true)) {
    }

    if ((gf_IsPlayerOnline(13) == true)) {
    }

    if ((gf_IsPlayerOnline(14) == true)) {
    }

    autoB2A1051B_var = 1;
    for ( ; autoB2A1051B_var <= autoB2A1051B_ae; autoB2A1051B_var += 1 ) {
        if ((gf_IsPlayerOnline(autoB2A1051B_var) == true)) {
            if ((BankExists("ProbesvZealot2", autoB2A1051B_var) == false)) {
                UIDisplayMessage(PlayerGroupSingle(autoB2A1051B_var), c_messageAreaDebug, StringExternal("Param/Value/20BBD02F"));
                lv_bankisExists[autoB2A1051B_var] = false;
            }
            else {
                lv_bankisExists[autoB2A1051B_var] = true;
            }
            BankLoad("ProbesvZealot2", autoB2A1051B_var);
            gv_banks[autoB2A1051B_var] = BankLastCreated();
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            if (((BankVerify(BankLastCreated()) == false) && (lv_bankisExists[autoB2A1051B_var] == true))) {
                gf_ResetHackedBank(autoB2A1051B_var);
                UIDisplayMessage(PlayerGroupSingle(autoB2A1051B_var), c_messageAreaDebug, StringExternal("Param/Value/D0CE6D58"));
                gv_bankisInvalid[autoB2A1051B_var] = true;
            }

            Wait(0.0625, c_timeGame);
        }

    }
    TriggerExecute(gt_VerifyBankonHack, true, true);
    TimerStart(gv_voteTimerMap, gv_voteTime, false, c_timeGame);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, true);
    DialogCreate(1200, 1200, c_anchorCenter, 0, 0, true);
    gv_voteBoard = DialogLastCreated();
    lv_tempImage = "PvZ2 Rohime v2-28-6.tga";
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1024, 1024, c_anchorCenter, 0, 0, StringToText(""), lv_tempImage, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/A12E0908"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorCenter, -350, -450, StringExternal("Param/Value/EF93A688"), StringExternal("Param/Value/0DB864D9"), "");
    gv_voteButtonDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorCenter, 0, -450, StringExternal("Param/Value/D4E74BB2"), StringExternal("Param/Value/BDB07FE2"), "");
    gv_voteButtonDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorCenter, 330, -450, StringExternal("Param/Value/135152E8"), StringExternal("Param/Value/C1CB34FC"), "");
    gv_voteButtonDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 670, 50, c_anchorCenter, 0, 100, StringExternal("Param/Value/E7B31823"), StringExternal("Param/Value/E0E7E49D"), "");
    gv_voteButtonDialogItem[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 670, 50, c_anchorCenter, 0, 400, StringExternal("Param/Value/DE536A87"), StringExternal("Param/Value/461B8417"), "");
    gv_voteButtonDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 450, 50, c_anchorCenter, 260, 300, StringExternal("Param/Value/B2BF1598"), StringExternal("Param/Value/23E953EE"), "");
    gv_voteButtonDialogItem[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 450, 50, c_anchorCenter, -260, 300, StringExternal("Param/Value/285EC345"), StringExternal("Param/Value/FCC1D6E3"), "");
    gv_voteButtonDialogItem[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorCenter, -250, 200, StringExternal("Param/Value/877FB162"), StringExternal("Param/Value/A2A45434"), "");
    gv_voteButtonDialogItem[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, -200, StringExternal("Param/Value/67E8E66F"), StringExternal("Param/Value/CE5D61BE"), "");
    gv_voteButtonDialogItem[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 25, StringExternal("Param/Value/AD5B148E"), StringExternal("Param/Value/4D57C741"), "");
    gv_voteButtonDialogItem[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorCenter, 235, 200, StringExternal("Param/Value/2628C46B"), StringExternal("Param/Value/65664A4E"), "");
    gv_voteButtonDialogItem[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 650, 50, c_anchorLeft, 100, -300, StringExternal("Param/Value/E7EEBD88"), StringExternal("Param/Value/F7A79384"), "");
    gv_voteButtonDialogItem[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 650, 50, c_anchorRight, 100, -350, StringExternal("Param/Value/FFA1B25B"), StringExternal("Param/Value/BB5E6897"), "");
    gv_voteButtonDialogItem[12] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -275, -400, StringExternal("Param/Value/BB0BFA0A"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 75, -400, StringExternal("Param/Value/F5B312C1"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 425, -400, StringExternal("Param/Value/026FCBFD"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 75, 150, StringExternal("Param/Value/FBCC0740"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 75, 450, StringExternal("Param/Value/DAD529FC"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 360, 350, StringExternal("Param/Value/05B937B9"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -210, 350, StringExternal("Param/Value/F5EFF531"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -175, 250, StringExternal("Param/Value/3A95BA9B"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 75, -150, StringExternal("Param/Value/11EE0E01"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 75, 75, StringExternal("Param/Value/4CA49D33"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 310, 250, StringExternal("Param/Value/8313411C"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -175, -250, StringExternal("Param/Value/F1923D5A"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 325, -300, StringExternal("Param/Value/80F83E3D"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[12] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    gv_progressBar = DialogControlLastCreated();
    if ((PlayerGroupCount(PlayerGroupActive()) < 10)) {
        libNtve_gf_SetDialogItemDesaturated(gv_voteButtonDialogItem[9], true, PlayerGroupAll());
        DialogControlSetVisible(gv_voteButtonDialogItem[9], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[9], PlayerGroupAll(), false);
        DialogControlDestroy(gv_voteButtonDialogItem[9]);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 25, StringExternal("Param/Value/B2F48085"), ColorWithAlpha(0,0,0,0), true, 3.0);
        gv_voteButtonDialogItem[9] = DialogControlLastCreated();
    }

    if ((GameAttributeGameValue("1") == "0002")) {
        DialogControlSetVisible(gv_voteButtonDialogItem[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[3], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteButtonDialogItem[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[4], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteButtonDialogItem[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[6], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteButtonDialogItem[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[8], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteButtonDialogItem[9], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_voteTextDialogItem[9], PlayerGroupAll(), false);
    }

    if ((GameAttributeGameValue("1") != "0002")) {
        lv_i = PlayerGroupCount(PlayerGroupActive());
        lv_recommendedMapArray[0] = 1;
        lv_recommendedMapArray[1] = RandomInt(0, gv_maxMaps1);
        lv_additionalVotes = 0;
        if (((lv_i >= 2) && (lv_i <= 5))) {
            lv_recommendedMapArray[0] = 5;
            lv_additionalVotes = 1;
            lv_recommendedMapArray[1] = 0;
            lv_recommendedMapArray[2] = 1;
            lv_recommendedMapArray[3] = 2;
            lv_recommendedMapArray[4] = 7;
            lv_recommendedMapArray[5] = 10;
        }

        if (((lv_i >= 6) && (lv_i <= 9))) {
            lv_recommendedMapArray[0] = 4;
            lv_additionalVotes = 2;
            lv_recommendedMapArray[1] = 11;
            lv_recommendedMapArray[2] = 12;
            lv_recommendedMapArray[3] = 4;
            lv_recommendedMapArray[4] = 5;
        }

        if (((lv_i >= 10) && (lv_i <= 14))) {
            lv_recommendedMapArray[0] = 3;
            lv_additionalVotes = 3;
            lv_recommendedMapArray[1] = 3;
            lv_recommendedMapArray[2] = 6;
            lv_recommendedMapArray[3] = 8;
        }

        gv_recommendedMap = lv_recommendedMapArray[RandomInt(1, lv_recommendedMapArray[0])];
        gv_votesCountButton[gv_recommendedMap] += lv_additionalVotes;
        libNtve_gf_SetDialogItemText(gv_voteTextDialogItem[gv_recommendedMap], (StringExternal("Param/Value/B5D5D1AD") + IntToText(gv_votesCountButton[gv_recommendedMap])), PlayerGroupAll());
        lv_i = DialogControlGetWidth(gv_voteButtonDialogItem[gv_recommendedMap], PlayerGroupPlayer(PlayerGroupActive(), 1));
        libNtve_gf_CreateDialogItemImage(gv_voteBoard, (lv_i + 50), 125, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\ui_challenge_border_normalover.dds", c_triggerImageTypeBorder, true, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeAdd);
        libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_voteButtonDialogItem[gv_recommendedMap], c_anchorCenter, 0, 12);
        libNtve_gf_CreateDialogItemLabel(gv_voteBoard, lv_i, 25, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/3E892241"), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, gv_voteButtonDialogItem[gv_recommendedMap], c_anchorTopLeft, -10, -15);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseMapInit_Init () {
    gt_ChooseMapInit = TriggerCreate("gt_ChooseMapInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Timer Map Expires
//--------------------------------------------------------------------------------------------------
bool gt_VoteTimerMapExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_maxVotes;
    int[14] lv_mapsWhichHaveMaxVotes;
    int lv_numberofMaxMaps;

    // Automatic Variable Declarations
    int auto84EB6409_ae;
    const int auto84EB6409_ai = 1;
    int auto87D69E06_ae;
    const int auto87D69E06_ai = 1;
    int auto18BC5EC3_val;
    const int autoF926441B_ae = 15;
    const int autoF926441B_ai = 1;
    const int auto5147DF13_ae = 9;
    const int auto5147DF13_ai = 1;
    int autoEE1D3252_val;
    unitgroup autoBAFB467B_g;
    int autoBAFB467B_u;
    unit autoBAFB467B_var;
    unitgroup autoDC31AF48_g;
    int autoDC31AF48_u;
    unit autoDC31AF48_var;
    unitgroup autoDB7AA0F4_g;
    int autoDB7AA0F4_u;
    unit autoDB7AA0F4_var;
    unitgroup auto40562825_g;
    int auto40562825_u;
    unit auto40562825_var;
    unitgroup auto981392C1_g;
    int auto981392C1_u;
    unit auto981392C1_var;
    unitgroup auto97BEE28F_g;
    int auto97BEE28F_u;
    unit auto97BEE28F_var;
    unitgroup autoDE48B02F_g;
    int autoDE48B02F_u;
    unit autoDE48B02F_var;
    unitgroup autoA1E327AE_g;
    int autoA1E327AE_u;
    unit autoA1E327AE_var;
    unitgroup auto0000363C_g;
    int auto0000363C_u;
    unit auto0000363C_var;
    unitgroup autoCCCB284A_g;
    int autoCCCB284A_u;
    unit autoCCCB284A_var;
    unitgroup auto37C87155_g;
    int auto37C87155_u;
    unit auto37C87155_var;
    unitgroup auto752D93BD_g;
    int auto752D93BD_u;
    unit auto752D93BD_var;
    unitgroup auto3EA5645F_g;
    int auto3EA5645F_u;
    unit auto3EA5645F_var;
    unitgroup auto7587DD79_g;
    int auto7587DD79_u;
    unit auto7587DD79_var;
    unitgroup auto0D263944_g;
    int auto0D263944_u;
    unit auto0D263944_var;
    unitgroup auto9BE21A41_g;
    int auto9BE21A41_u;
    unit auto9BE21A41_var;
    unitgroup autoA2CF8692_g;
    int autoA2CF8692_u;
    unit autoA2CF8692_var;
    unitgroup auto654D824F_g;
    int auto654D824F_u;
    unit auto654D824F_var;
    unitgroup autoD0CEAD56_g;
    int autoD0CEAD56_u;
    unit autoD0CEAD56_var;
    unitgroup auto9851F934_g;
    int auto9851F934_u;
    unit auto9851F934_var;
    unitgroup autoC9DD5094_g;
    int autoC9DD5094_u;
    unit autoC9DD5094_var;
    unitgroup autoCC1502BE_g;
    int autoCC1502BE_u;
    unit autoCC1502BE_var;
    unitgroup auto5BDCE6ED_g;
    int auto5BDCE6ED_u;
    unit auto5BDCE6ED_var;
    unitgroup auto854CBEA2_g;
    int auto854CBEA2_u;
    unit auto854CBEA2_var;
    unitgroup auto4A55AD74_g;
    int auto4A55AD74_u;
    unit auto4A55AD74_var;
    unitgroup autoB041EDED_g;
    int autoB041EDED_u;
    unit autoB041EDED_var;
    unitgroup auto7C716880_g;
    int auto7C716880_u;
    unit auto7C716880_var;
    unitgroup auto291B5630_g;
    int auto291B5630_u;
    unit auto291B5630_var;
    unitgroup auto96F37BAB_g;
    int auto96F37BAB_u;
    unit auto96F37BAB_var;
    unitgroup autoA59B279D_g;
    int autoA59B279D_u;
    unit autoA59B279D_var;
    unitgroup autoBE4EEAD9_g;
    int autoBE4EEAD9_u;
    unit autoBE4EEAD9_var;
    unitgroup auto95E97083_g;
    int auto95E97083_u;
    unit auto95E97083_var;
    unitgroup autoC1988F06_g;
    int autoC1988F06_u;
    unit autoC1988F06_var;
    unitgroup auto3F24664B_g;
    int auto3F24664B_u;
    unit auto3F24664B_var;
    unitgroup auto1CCCDCE9_g;
    int auto1CCCDCE9_u;
    unit auto1CCCDCE9_var;
    unitgroup auto71BF3A46_g;
    int auto71BF3A46_u;
    unit auto71BF3A46_var;
    unitgroup auto437E4ED4_g;
    int auto437E4ED4_u;
    unit auto437E4ED4_var;
    unitgroup autoCACBCFA2_g;
    int autoCACBCFA2_u;
    unit autoCACBCFA2_var;
    unitgroup auto4A22554F_g;
    int auto4A22554F_u;
    unit auto4A22554F_var;
    unitgroup autoF8AB5727_g;
    int autoF8AB5727_u;
    unit autoF8AB5727_var;
    unitgroup autoB889CB29_g;
    int autoB889CB29_u;
    unit autoB889CB29_var;
    unitgroup auto9ED4BD8E_g;
    int auto9ED4BD8E_u;
    unit auto9ED4BD8E_var;
    unitgroup auto3B562DEF_g;
    int auto3B562DEF_u;
    unit auto3B562DEF_var;
    unitgroup auto558F5F56_g;
    int auto558F5F56_u;
    unit auto558F5F56_var;
    unitgroup autoF2BFF302_g;
    int autoF2BFF302_u;
    unit autoF2BFF302_var;
    unitgroup autoDB63A1FA_g;
    int autoDB63A1FA_u;
    unit autoDB63A1FA_var;
    unitgroup autoE807C096_g;
    int autoE807C096_u;
    unit autoE807C096_var;
    unitgroup auto9C4118E3_g;
    int auto9C4118E3_u;
    unit auto9C4118E3_var;
    unitgroup autoA41A201D_g;
    int autoA41A201D_u;
    unit autoA41A201D_var;
    unitgroup autoB9AE78E6_g;
    int autoB9AE78E6_u;
    unit autoB9AE78E6_var;
    unitgroup autoD6382D69_g;
    int autoD6382D69_u;
    unit autoD6382D69_var;
    unitgroup autoAC889722_g;
    int autoAC889722_u;
    unit autoAC889722_var;
    unitgroup auto01676A5E_g;
    int auto01676A5E_u;
    unit auto01676A5E_var;
    unitgroup autoB07C3B2A_g;
    int autoB07C3B2A_u;
    unit autoB07C3B2A_var;
    unitgroup auto09658BCB_g;
    int auto09658BCB_u;
    unit auto09658BCB_var;
    unitgroup auto533B2052_g;
    int auto533B2052_u;
    unit auto533B2052_var;
    unitgroup autoCD47F752_g;
    int autoCD47F752_u;
    unit autoCD47F752_var;
    unitgroup auto8A8ACB41_g;
    int auto8A8ACB41_u;
    unit auto8A8ACB41_var;
    unitgroup autoA8C25855_g;
    int autoA8C25855_u;
    unit autoA8C25855_var;
    unitgroup auto4E21A52E_g;
    int auto4E21A52E_u;
    unit auto4E21A52E_var;
    unitgroup auto947FD153_g;
    int auto947FD153_u;
    unit auto947FD153_var;
    unitgroup auto5D583F79_g;
    int auto5D583F79_u;
    unit auto5D583F79_var;
    unitgroup auto9ED8F68C_g;
    int auto9ED8F68C_u;
    unit auto9ED8F68C_var;
    unitgroup autoE85A292D_g;
    int autoE85A292D_u;
    unit autoE85A292D_var;
    unitgroup auto93247635_g;
    int auto93247635_u;
    unit auto93247635_var;
    const int autoA17AF7FB_ae = 15;
    int autoA17AF7FB_var;
    const int auto21BDC2F0_ae = 14;
    const int auto21BDC2F0_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupAll(), c_soundCategoryAmbient);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, false);
    if ((GameAttributeGameValue("1") == "0002")) {
        DialogControlSetVisible(gv_voteButtonDialogItem[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteTextDialogItem[3], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteButtonDialogItem[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteTextDialogItem[4], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteButtonDialogItem[6], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteTextDialogItem[6], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteButtonDialogItem[8], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteTextDialogItem[8], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteButtonDialogItem[9], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_voteTextDialogItem[9], PlayerGroupAll(), true);
    }

    DialogDestroy(gv_voteBoard);
    auto84EB6409_ae = gv_maxMaps1;
    lv_i = 0;
    for ( ; ( (auto84EB6409_ai >= 0 && lv_i <= auto84EB6409_ae) || (auto84EB6409_ai < 0 && lv_i >= auto84EB6409_ae) ) ; lv_i += auto84EB6409_ai ) {
        if ((gv_votesCountButton[lv_i] > lv_maxVotes)) {
            lv_maxVotes = gv_votesCountButton[lv_i];
        }

    }
    auto87D69E06_ae = gv_maxMaps1;
    lv_i = 0;
    for ( ; ( (auto87D69E06_ai >= 0 && lv_i <= auto87D69E06_ae) || (auto87D69E06_ai < 0 && lv_i >= auto87D69E06_ae) ) ; lv_i += auto87D69E06_ai ) {
        if ((gv_votesCountButton[lv_i] == lv_maxVotes)) {
            lv_numberofMaxMaps += 1;
            lv_mapsWhichHaveMaxVotes[lv_numberofMaxMaps] = (lv_i + 1);
        }

    }
    if (((GameAttributeGameValue("1") == "0002") && (lv_maxVotes == 0))) {
        gv_chosenMap = lv_mapsWhichHaveMaxVotes[RandomInt(1, 3)];
    }
    else {
        gv_chosenMap = lv_mapsWhichHaveMaxVotes[RandomInt(1, lv_numberofMaxMaps)];
    }
    if ((gv_chosenMap == 9) && (lv_numberofMaxMaps > 1)) {
        auto18BC5EC3_val = lv_mapsWhichHaveMaxVotes[1];
        if (auto18BC5EC3_val == 9) {
            gv_chosenMap = lv_mapsWhichHaveMaxVotes[2];
        }
        else {
            gv_chosenMap = lv_mapsWhichHaveMaxVotes[1];
        }
    }

    lv_i = 0;
    for ( ; ( (autoF926441B_ai >= 0 && lv_i <= autoF926441B_ae) || (autoF926441B_ai < 0 && lv_i >= autoF926441B_ae) ) ; lv_i += autoF926441B_ai ) {
        gv_votePlayerValue[lv_i] = -1;
    }
    lv_i = 0;
    for ( ; ( (auto5147DF13_ai >= 0 && lv_i <= auto5147DF13_ae) || (auto5147DF13_ai < 0 && lv_i >= auto5147DF13_ae) ) ; lv_i += auto5147DF13_ai ) {
        gv_votesCountButton[lv_i] = 0;
        gv_voteButtonDialogItem[lv_i] = c_invalidDialogControlId;
    }
    if (((gv_setMapCmdIssued == true) && ((gv_setMapCmd >= 1) && (gv_setMapCmd <= 13)))) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/93F69DF9") + TextWithColor(PlayerName(PlayerGroupPlayer(gv_setMapCmdPlayer, 1)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupPlayer(gv_setMapCmdPlayer, 1), false)))));
        gv_chosenMap = gv_setMapCmd;
        gv_setMapCmdIssued = false;
        gv_setMapCmdPlayer = PlayerGroupEmpty();
        gv_setMapCmd = 0;
    }

    if((GameAttributeGameValue("2") == "0002")){
        gv_chosenMap = 9;
    }

    autoEE1D3252_val = gv_chosenMap;
    if (autoEE1D3252_val == 1) {
        RegionPlayableMapSet(RegionFromId(2));
        RegionSetCenter(RegionFromId(6), PointFromId(13));
        gv_centerPoint = PointFromId(13);
        gf_SetZealotSpeed(3.75);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/C6C8C0B6"));
        autoBAFB467B_g = UnitGroup("RichMineralField", 0, RegionFromId(161), UnitFilter(0, 0, 0, 0), 0);
        autoBAFB467B_u = UnitGroupCount(autoBAFB467B_g, c_unitCountAll);
        for (;; autoBAFB467B_u -= 1) {
            autoBAFB467B_var = UnitGroupUnitFromEnd(autoBAFB467B_g, autoBAFB467B_u);
            if (autoBAFB467B_var == null) { break; }
            UnitRemove(autoBAFB467B_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoBAFB467B_var), UnitGetPosition(autoBAFB467B_var));
        }
        autoDC31AF48_g = UnitGroup("MineralField", 0, RegionFromId(16), UnitFilter(0, 0, 0, 0), 0);
        autoDC31AF48_u = UnitGroupCount(autoDC31AF48_g, c_unitCountAll);
        for (;; autoDC31AF48_u -= 1) {
            autoDC31AF48_var = UnitGroupUnitFromEnd(autoDC31AF48_g, autoDC31AF48_u);
            if (autoDC31AF48_var == null) { break; }
            UnitRemove(autoDC31AF48_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoDC31AF48_var), UnitGetPosition(autoDC31AF48_var));
        }
    }
    else if (autoEE1D3252_val == 2) {
        RegionPlayableMapSet(RegionFromId(3));
        RegionSetCenter(RegionFromId(6), PointFromId(14));
        gv_centerPoint = PointFromId(14);
        gf_SetZealotSpeed(3.75);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/81ECB0DC"));
        autoDB7AA0F4_g = UnitGroup("RichMineralField", 0, RegionFromId(161), UnitFilter(0, 0, 0, 0), 0);
        autoDB7AA0F4_u = UnitGroupCount(autoDB7AA0F4_g, c_unitCountAll);
        for (;; autoDB7AA0F4_u -= 1) {
            autoDB7AA0F4_var = UnitGroupUnitFromEnd(autoDB7AA0F4_g, autoDB7AA0F4_u);
            if (autoDB7AA0F4_var == null) { break; }
            UnitRemove(autoDB7AA0F4_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoDB7AA0F4_var), UnitGetPosition(autoDB7AA0F4_var));
        }
        auto40562825_g = UnitGroup("RichMineralField", 0, RegionFromId(164), UnitFilter(0, 0, 0, 0), 0);
        auto40562825_u = UnitGroupCount(auto40562825_g, c_unitCountAll);
        for (;; auto40562825_u -= 1) {
            auto40562825_var = UnitGroupUnitFromEnd(auto40562825_g, auto40562825_u);
            if (auto40562825_var == null) { break; }
            UnitRemove(auto40562825_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto40562825_var), UnitGetPosition(auto40562825_var));
        }
        auto981392C1_g = UnitGroup("RichMineralField", 0, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0);
        auto981392C1_u = UnitGroupCount(auto981392C1_g, c_unitCountAll);
        for (;; auto981392C1_u -= 1) {
            auto981392C1_var = UnitGroupUnitFromEnd(auto981392C1_g, auto981392C1_u);
            if (auto981392C1_var == null) { break; }
            UnitRemove(auto981392C1_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto981392C1_var), UnitGetPosition(auto981392C1_var));
        }
        auto97BEE28F_g = UnitGroup("RichMineralField", 0, RegionFromId(199), UnitFilter(0, 0, 0, 0), 0);
        auto97BEE28F_u = UnitGroupCount(auto97BEE28F_g, c_unitCountAll);
        for (;; auto97BEE28F_u -= 1) {
            auto97BEE28F_var = UnitGroupUnitFromEnd(auto97BEE28F_g, auto97BEE28F_u);
            if (auto97BEE28F_var == null) { break; }
            UnitRemove(auto97BEE28F_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto97BEE28F_var), UnitGetPosition(auto97BEE28F_var));
        }
        autoDE48B02F_g = UnitGroup("MineralField", 0, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
        autoDE48B02F_u = UnitGroupCount(autoDE48B02F_g, c_unitCountAll);
        for (;; autoDE48B02F_u -= 1) {
            autoDE48B02F_var = UnitGroupUnitFromEnd(autoDE48B02F_g, autoDE48B02F_u);
            if (autoDE48B02F_var == null) { break; }
            UnitRemove(autoDE48B02F_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoDE48B02F_var), UnitGetPosition(autoDE48B02F_var));
        }
    }
    else if (autoEE1D3252_val == 3) {
        RegionPlayableMapSet(RegionFromId(4));
        RegionSetCenter(RegionFromId(6), PointFromId(15));
        gv_centerPoint = PointFromId(15);
        gf_SetZealotSpeed(3.75);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/5E0C5EFE"));
        autoA1E327AE_g = UnitGroup("RichMineralField", 0, RegionFromId(164), UnitFilter(0, 0, 0, 0), 0);
        autoA1E327AE_u = UnitGroupCount(autoA1E327AE_g, c_unitCountAll);
        for (;; autoA1E327AE_u -= 1) {
            autoA1E327AE_var = UnitGroupUnitFromEnd(autoA1E327AE_g, autoA1E327AE_u);
            if (autoA1E327AE_var == null) { break; }
            UnitRemove(autoA1E327AE_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoA1E327AE_var), UnitGetPosition(autoA1E327AE_var));
        }
        auto0000363C_g = UnitGroup("MineralField", 0, RegionFromId(17), UnitFilter(0, 0, 0, 0), 0);
        auto0000363C_u = UnitGroupCount(auto0000363C_g, c_unitCountAll);
        for (;; auto0000363C_u -= 1) {
            auto0000363C_var = UnitGroupUnitFromEnd(auto0000363C_g, auto0000363C_u);
            if (auto0000363C_var == null) { break; }
            UnitRemove(auto0000363C_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto0000363C_var), UnitGetPosition(auto0000363C_var));
        }
    }
    else if (autoEE1D3252_val == 4) {
        RegionPlayableMapSet(RegionFromId(1));
        RegionSetCenter(RegionFromId(6), PointFromId(9));
        gv_centerPoint = PointFromId(9);
        gf_SetZealotSpeed(4.5);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/3FD04883"));
        autoCCCB284A_g = UnitGroup("RichMineralField", 0, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        autoCCCB284A_u = UnitGroupCount(autoCCCB284A_g, c_unitCountAll);
        for (;; autoCCCB284A_u -= 1) {
            autoCCCB284A_var = UnitGroupUnitFromEnd(autoCCCB284A_g, autoCCCB284A_u);
            if (autoCCCB284A_var == null) { break; }
            UnitRemove(autoCCCB284A_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoCCCB284A_var), UnitGetPosition(autoCCCB284A_var));
        }
        auto37C87155_g = UnitGroup("RichMineralField", 0, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        auto37C87155_u = UnitGroupCount(auto37C87155_g, c_unitCountAll);
        for (;; auto37C87155_u -= 1) {
            auto37C87155_var = UnitGroupUnitFromEnd(auto37C87155_g, auto37C87155_u);
            if (auto37C87155_var == null) { break; }
            UnitRemove(auto37C87155_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto37C87155_var), UnitGetPosition(auto37C87155_var));
        }
        auto752D93BD_g = UnitGroup("RichMineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        auto752D93BD_u = UnitGroupCount(auto752D93BD_g, c_unitCountAll);
        for (;; auto752D93BD_u -= 1) {
            auto752D93BD_var = UnitGroupUnitFromEnd(auto752D93BD_g, auto752D93BD_u);
            if (auto752D93BD_var == null) { break; }
            UnitRemove(auto752D93BD_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto752D93BD_var), UnitGetPosition(auto752D93BD_var));
        }
        auto3EA5645F_g = UnitGroup("RichMineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        auto3EA5645F_u = UnitGroupCount(auto3EA5645F_g, c_unitCountAll);
        for (;; auto3EA5645F_u -= 1) {
            auto3EA5645F_var = UnitGroupUnitFromEnd(auto3EA5645F_g, auto3EA5645F_u);
            if (auto3EA5645F_var == null) { break; }
            UnitRemove(auto3EA5645F_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto3EA5645F_var), UnitGetPosition(auto3EA5645F_var));
        }
        auto7587DD79_g = UnitGroup("RichMineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        auto7587DD79_u = UnitGroupCount(auto7587DD79_g, c_unitCountAll);
        for (;; auto7587DD79_u -= 1) {
            auto7587DD79_var = UnitGroupUnitFromEnd(auto7587DD79_g, auto7587DD79_u);
            if (auto7587DD79_var == null) { break; }
            UnitRemove(auto7587DD79_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto7587DD79_var), UnitGetPosition(auto7587DD79_var));
        }
        auto0D263944_g = UnitGroup("MineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        auto0D263944_u = UnitGroupCount(auto0D263944_g, c_unitCountAll);
        for (;; auto0D263944_u -= 1) {
            auto0D263944_var = UnitGroupUnitFromEnd(auto0D263944_g, auto0D263944_u);
            if (auto0D263944_var == null) { break; }
            UnitRemove(auto0D263944_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto0D263944_var), UnitGetPosition(auto0D263944_var));
        }
    }
    else if (autoEE1D3252_val == 5) {
        RegionPlayableMapSet(RegionFromId(7));
        RegionSetCenter(RegionFromId(6), PointFromId(17));
        gv_centerPoint = PointFromId(17);
        gf_SetZealotSpeed(4.5);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0B624493"));
        auto9BE21A41_g = UnitGroup("RichMineralField", 0, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        auto9BE21A41_u = UnitGroupCount(auto9BE21A41_g, c_unitCountAll);
        for (;; auto9BE21A41_u -= 1) {
            auto9BE21A41_var = UnitGroupUnitFromEnd(auto9BE21A41_g, auto9BE21A41_u);
            if (auto9BE21A41_var == null) { break; }
            UnitRemove(auto9BE21A41_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9BE21A41_var), UnitGetPosition(auto9BE21A41_var));
        }
        autoA2CF8692_g = UnitGroup("RichMineralField", 0, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        autoA2CF8692_u = UnitGroupCount(autoA2CF8692_g, c_unitCountAll);
        for (;; autoA2CF8692_u -= 1) {
            autoA2CF8692_var = UnitGroupUnitFromEnd(autoA2CF8692_g, autoA2CF8692_u);
            if (autoA2CF8692_var == null) { break; }
            UnitRemove(autoA2CF8692_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoA2CF8692_var), UnitGetPosition(autoA2CF8692_var));
        }
        auto654D824F_g = UnitGroup("MineralField", 0, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        auto654D824F_u = UnitGroupCount(auto654D824F_g, c_unitCountAll);
        for (;; auto654D824F_u -= 1) {
            auto654D824F_var = UnitGroupUnitFromEnd(auto654D824F_g, auto654D824F_u);
            if (auto654D824F_var == null) { break; }
            UnitRemove(auto654D824F_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", 0, 0, UnitGetPosition(auto654D824F_var), UnitGetPosition(auto654D824F_var));
        }
    }
    else if (autoEE1D3252_val == 6) {
        RegionPlayableMapSet(RegionFromId(5));
        RegionSetCenter(RegionFromId(6), PointFromId(16));
        gv_centerPoint = PointFromId(16);
        gf_SetZealotSpeed(4.5);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/8C92B0D7"));
        autoD0CEAD56_g = UnitGroup("RichMineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        autoD0CEAD56_u = UnitGroupCount(autoD0CEAD56_g, c_unitCountAll);
        for (;; autoD0CEAD56_u -= 1) {
            autoD0CEAD56_var = UnitGroupUnitFromEnd(autoD0CEAD56_g, autoD0CEAD56_u);
            if (autoD0CEAD56_var == null) { break; }
            UnitRemove(autoD0CEAD56_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoD0CEAD56_var), UnitGetPosition(autoD0CEAD56_var));
        }
        auto9851F934_g = UnitGroup("RichMineralField", 0, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        auto9851F934_u = UnitGroupCount(auto9851F934_g, c_unitCountAll);
        for (;; auto9851F934_u -= 1) {
            auto9851F934_var = UnitGroupUnitFromEnd(auto9851F934_g, auto9851F934_u);
            if (auto9851F934_var == null) { break; }
            UnitRemove(auto9851F934_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9851F934_var), UnitGetPosition(auto9851F934_var));
        }
        autoC9DD5094_g = UnitGroup("RichMineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        autoC9DD5094_u = UnitGroupCount(autoC9DD5094_g, c_unitCountAll);
        for (;; autoC9DD5094_u -= 1) {
            autoC9DD5094_var = UnitGroupUnitFromEnd(autoC9DD5094_g, autoC9DD5094_u);
            if (autoC9DD5094_var == null) { break; }
            UnitRemove(autoC9DD5094_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoC9DD5094_var), UnitGetPosition(autoC9DD5094_var));
        }
        autoCC1502BE_g = UnitGroup("RichMineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        autoCC1502BE_u = UnitGroupCount(autoCC1502BE_g, c_unitCountAll);
        for (;; autoCC1502BE_u -= 1) {
            autoCC1502BE_var = UnitGroupUnitFromEnd(autoCC1502BE_g, autoCC1502BE_u);
            if (autoCC1502BE_var == null) { break; }
            UnitRemove(autoCC1502BE_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoCC1502BE_var), UnitGetPosition(autoCC1502BE_var));
        }
        auto5BDCE6ED_g = UnitGroup("RichMineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        auto5BDCE6ED_u = UnitGroupCount(auto5BDCE6ED_g, c_unitCountAll);
        for (;; auto5BDCE6ED_u -= 1) {
            auto5BDCE6ED_var = UnitGroupUnitFromEnd(auto5BDCE6ED_g, auto5BDCE6ED_u);
            if (auto5BDCE6ED_var == null) { break; }
            UnitRemove(auto5BDCE6ED_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto5BDCE6ED_var), UnitGetPosition(auto5BDCE6ED_var));
        }
        auto854CBEA2_g = UnitGroup("MineralField", 0, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        auto854CBEA2_u = UnitGroupCount(auto854CBEA2_g, c_unitCountAll);
        for (;; auto854CBEA2_u -= 1) {
            auto854CBEA2_var = UnitGroupUnitFromEnd(auto854CBEA2_g, auto854CBEA2_u);
            if (auto854CBEA2_var == null) { break; }
            UnitRemove(auto854CBEA2_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto854CBEA2_var), UnitGetPosition(auto854CBEA2_var));
        }
    }
    else if (autoEE1D3252_val == 7) {
        RegionPlayableMapSet(RegionFromId(8));
        RegionSetCenter(RegionFromId(6), PointFromId(1055));
        gv_centerPoint = PointFromId(1055);
        gf_SetZealotSpeed(4.5);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/FD9174EF"));
        auto4A55AD74_g = UnitGroup("RichMineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        auto4A55AD74_u = UnitGroupCount(auto4A55AD74_g, c_unitCountAll);
        for (;; auto4A55AD74_u -= 1) {
            auto4A55AD74_var = UnitGroupUnitFromEnd(auto4A55AD74_g, auto4A55AD74_u);
            if (auto4A55AD74_var == null) { break; }
            UnitRemove(auto4A55AD74_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto4A55AD74_var), UnitGetPosition(auto4A55AD74_var));
        }
        autoB041EDED_g = UnitGroup("RichMineralField", 0, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        autoB041EDED_u = UnitGroupCount(autoB041EDED_g, c_unitCountAll);
        for (;; autoB041EDED_u -= 1) {
            autoB041EDED_var = UnitGroupUnitFromEnd(autoB041EDED_g, autoB041EDED_u);
            if (autoB041EDED_var == null) { break; }
            UnitRemove(autoB041EDED_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoB041EDED_var), UnitGetPosition(autoB041EDED_var));
        }
        auto7C716880_g = UnitGroup("RichMineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        auto7C716880_u = UnitGroupCount(auto7C716880_g, c_unitCountAll);
        for (;; auto7C716880_u -= 1) {
            auto7C716880_var = UnitGroupUnitFromEnd(auto7C716880_g, auto7C716880_u);
            if (auto7C716880_var == null) { break; }
            UnitRemove(auto7C716880_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto7C716880_var), UnitGetPosition(auto7C716880_var));
        }
        auto291B5630_g = UnitGroup("RichMineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        auto291B5630_u = UnitGroupCount(auto291B5630_g, c_unitCountAll);
        for (;; auto291B5630_u -= 1) {
            auto291B5630_var = UnitGroupUnitFromEnd(auto291B5630_g, auto291B5630_u);
            if (auto291B5630_var == null) { break; }
            UnitRemove(auto291B5630_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto291B5630_var), UnitGetPosition(auto291B5630_var));
        }
        auto96F37BAB_g = UnitGroup("RichMineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        auto96F37BAB_u = UnitGroupCount(auto96F37BAB_g, c_unitCountAll);
        for (;; auto96F37BAB_u -= 1) {
            auto96F37BAB_var = UnitGroupUnitFromEnd(auto96F37BAB_g, auto96F37BAB_u);
            if (auto96F37BAB_var == null) { break; }
            UnitRemove(auto96F37BAB_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto96F37BAB_var), UnitGetPosition(auto96F37BAB_var));
        }
        autoA59B279D_g = UnitGroup("MineralField", 0, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        autoA59B279D_u = UnitGroupCount(autoA59B279D_g, c_unitCountAll);
        for (;; autoA59B279D_u -= 1) {
            autoA59B279D_var = UnitGroupUnitFromEnd(autoA59B279D_g, autoA59B279D_u);
            if (autoA59B279D_var == null) { break; }
            UnitRemove(autoA59B279D_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoA59B279D_var), UnitGetPosition(autoA59B279D_var));
        }
    }
    else if (autoEE1D3252_val == 8) {
        RegionPlayableMapSet(RegionFromId(9));
        RegionSetCenter(RegionFromId(6), PointFromId(1103));
        gv_centerPoint = PointFromId(1103);
        gf_SetZealotSpeed(4.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/84CE5B73"));
        autoBE4EEAD9_g = UnitGroup("RichMineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        autoBE4EEAD9_u = UnitGroupCount(autoBE4EEAD9_g, c_unitCountAll);
        for (;; autoBE4EEAD9_u -= 1) {
            autoBE4EEAD9_var = UnitGroupUnitFromEnd(autoBE4EEAD9_g, autoBE4EEAD9_u);
            if (autoBE4EEAD9_var == null) { break; }
            UnitRemove(autoBE4EEAD9_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoBE4EEAD9_var), UnitGetPosition(autoBE4EEAD9_var));
        }
        auto95E97083_g = UnitGroup("RichMineralField", 0, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        auto95E97083_u = UnitGroupCount(auto95E97083_g, c_unitCountAll);
        for (;; auto95E97083_u -= 1) {
            auto95E97083_var = UnitGroupUnitFromEnd(auto95E97083_g, auto95E97083_u);
            if (auto95E97083_var == null) { break; }
            UnitRemove(auto95E97083_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto95E97083_var), UnitGetPosition(auto95E97083_var));
        }
        autoC1988F06_g = UnitGroup("RichMineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        autoC1988F06_u = UnitGroupCount(autoC1988F06_g, c_unitCountAll);
        for (;; autoC1988F06_u -= 1) {
            autoC1988F06_var = UnitGroupUnitFromEnd(autoC1988F06_g, autoC1988F06_u);
            if (autoC1988F06_var == null) { break; }
            UnitRemove(autoC1988F06_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoC1988F06_var), UnitGetPosition(autoC1988F06_var));
        }
        auto3F24664B_g = UnitGroup("MineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        auto3F24664B_u = UnitGroupCount(auto3F24664B_g, c_unitCountAll);
        for (;; auto3F24664B_u -= 1) {
            auto3F24664B_var = UnitGroupUnitFromEnd(auto3F24664B_g, auto3F24664B_u);
            if (auto3F24664B_var == null) { break; }
            UnitRemove(auto3F24664B_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto3F24664B_var), UnitGetPosition(auto3F24664B_var));
        }
    }
    else if (autoEE1D3252_val == 9) {
        RegionPlayableMapSet(RegionFromId(15));
        RegionSetCenter(RegionFromId(6), PointFromId(1160));
        gv_centerPoint = PointFromId(1160);
        gf_SetZealotSpeed(4.5);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/C0C11296"));
        gv_largeswitch = 1;
        auto1CCCDCE9_g = UnitGroup("RichMineralField", 0, RegionFromId(16), UnitFilter(0, 0, 0, 0), 0);
        auto1CCCDCE9_u = UnitGroupCount(auto1CCCDCE9_g, c_unitCountAll);
        for (;; auto1CCCDCE9_u -= 1) {
            auto1CCCDCE9_var = UnitGroupUnitFromEnd(auto1CCCDCE9_g, auto1CCCDCE9_u);
            if (auto1CCCDCE9_var == null) { break; }
            UnitRemove(auto1CCCDCE9_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto1CCCDCE9_var), UnitGetPosition(auto1CCCDCE9_var));
        }
        auto71BF3A46_g = UnitGroup("RichMineralField", 0, RegionFromId(17), UnitFilter(0, 0, 0, 0), 0);
        auto71BF3A46_u = UnitGroupCount(auto71BF3A46_g, c_unitCountAll);
        for (;; auto71BF3A46_u -= 1) {
            auto71BF3A46_var = UnitGroupUnitFromEnd(auto71BF3A46_g, auto71BF3A46_u);
            if (auto71BF3A46_var == null) { break; }
            UnitRemove(auto71BF3A46_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto71BF3A46_var), UnitGetPosition(auto71BF3A46_var));
        }
        auto437E4ED4_g = UnitGroup("RichMineralField", 0, RegionFromId(161), UnitFilter(0, 0, 0, 0), 0);
        auto437E4ED4_u = UnitGroupCount(auto437E4ED4_g, c_unitCountAll);
        for (;; auto437E4ED4_u -= 1) {
            auto437E4ED4_var = UnitGroupUnitFromEnd(auto437E4ED4_g, auto437E4ED4_u);
            if (auto437E4ED4_var == null) { break; }
            UnitRemove(auto437E4ED4_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto437E4ED4_var), UnitGetPosition(auto437E4ED4_var));
        }
        autoCACBCFA2_g = UnitGroup("RichMineralField", 0, RegionFromId(164), UnitFilter(0, 0, 0, 0), 0);
        autoCACBCFA2_u = UnitGroupCount(autoCACBCFA2_g, c_unitCountAll);
        for (;; autoCACBCFA2_u -= 1) {
            autoCACBCFA2_var = UnitGroupUnitFromEnd(autoCACBCFA2_g, autoCACBCFA2_u);
            if (autoCACBCFA2_var == null) { break; }
            UnitRemove(autoCACBCFA2_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoCACBCFA2_var), UnitGetPosition(autoCACBCFA2_var));
        }
        auto4A22554F_g = UnitGroup("MineralField", 0, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
        auto4A22554F_u = UnitGroupCount(auto4A22554F_g, c_unitCountAll);
        for (;; auto4A22554F_u -= 1) {
            auto4A22554F_var = UnitGroupUnitFromEnd(auto4A22554F_g, auto4A22554F_u);
            if (auto4A22554F_var == null) { break; }
            UnitRemove(auto4A22554F_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto4A22554F_var), UnitGetPosition(auto4A22554F_var));
        }
        autoF8AB5727_g = UnitGroup("MineralField", 0, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0);
        autoF8AB5727_u = UnitGroupCount(autoF8AB5727_g, c_unitCountAll);
        for (;; autoF8AB5727_u -= 1) {
            autoF8AB5727_var = UnitGroupUnitFromEnd(autoF8AB5727_g, autoF8AB5727_u);
            if (autoF8AB5727_var == null) { break; }
            UnitRemove(autoF8AB5727_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoF8AB5727_var), UnitGetPosition(autoF8AB5727_var));
        }
        autoB889CB29_g = UnitGroup("MineralField", 0, RegionFromId(199), UnitFilter(0, 0, 0, 0), 0);
        autoB889CB29_u = UnitGroupCount(autoB889CB29_g, c_unitCountAll);
        for (;; autoB889CB29_u -= 1) {
            autoB889CB29_var = UnitGroupUnitFromEnd(autoB889CB29_g, autoB889CB29_u);
            if (autoB889CB29_var == null) { break; }
            UnitRemove(autoB889CB29_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoB889CB29_var), UnitGetPosition(autoB889CB29_var));
        }
    }
    else if (autoEE1D3252_val == 10) {
        RegionPlayableMapSet(RegionFromId(93));
        RegionSetCenter(RegionFromId(6), PointFromId(929));
        gv_centerPoint = PointFromId(929);
        gf_SetZealotSpeed(4.75);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/8D8CB0A3"));
        gv_chaosswitch = 1;
        auto9ED4BD8E_g = UnitGroup("RichMineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        auto9ED4BD8E_u = UnitGroupCount(auto9ED4BD8E_g, c_unitCountAll);
        for (;; auto9ED4BD8E_u -= 1) {
            auto9ED4BD8E_var = UnitGroupUnitFromEnd(auto9ED4BD8E_g, auto9ED4BD8E_u);
            if (auto9ED4BD8E_var == null) { break; }
            UnitRemove(auto9ED4BD8E_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9ED4BD8E_var), UnitGetPosition(auto9ED4BD8E_var));
        }
        auto3B562DEF_g = UnitGroup("RichMineralField", 0, RegionFromId(10), UnitFilter(0, 0, 0, 0), 0);
        auto3B562DEF_u = UnitGroupCount(auto3B562DEF_g, c_unitCountAll);
        for (;; auto3B562DEF_u -= 1) {
            auto3B562DEF_var = UnitGroupUnitFromEnd(auto3B562DEF_g, auto3B562DEF_u);
            if (auto3B562DEF_var == null) { break; }
            UnitRemove(auto3B562DEF_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto3B562DEF_var), UnitGetPosition(auto3B562DEF_var));
        }
        auto558F5F56_g = UnitGroup("RichMineralField", 0, RegionFromId(11), UnitFilter(0, 0, 0, 0), 0);
        auto558F5F56_u = UnitGroupCount(auto558F5F56_g, c_unitCountAll);
        for (;; auto558F5F56_u -= 1) {
            auto558F5F56_var = UnitGroupUnitFromEnd(auto558F5F56_g, auto558F5F56_u);
            if (auto558F5F56_var == null) { break; }
            UnitRemove(auto558F5F56_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto558F5F56_var), UnitGetPosition(auto558F5F56_var));
        }
        autoF2BFF302_g = UnitGroup("RichMineralField", 0, RegionFromId(14), UnitFilter(0, 0, 0, 0), 0);
        autoF2BFF302_u = UnitGroupCount(autoF2BFF302_g, c_unitCountAll);
        for (;; autoF2BFF302_u -= 1) {
            autoF2BFF302_var = UnitGroupUnitFromEnd(autoF2BFF302_g, autoF2BFF302_u);
            if (autoF2BFF302_var == null) { break; }
            UnitRemove(autoF2BFF302_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoF2BFF302_var), UnitGetPosition(autoF2BFF302_var));
        }
        autoDB63A1FA_g = UnitGroup("RichMineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        autoDB63A1FA_u = UnitGroupCount(autoDB63A1FA_g, c_unitCountAll);
        for (;; autoDB63A1FA_u -= 1) {
            autoDB63A1FA_var = UnitGroupUnitFromEnd(autoDB63A1FA_g, autoDB63A1FA_u);
            if (autoDB63A1FA_var == null) { break; }
            UnitRemove(autoDB63A1FA_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoDB63A1FA_var), UnitGetPosition(autoDB63A1FA_var));
        }
        autoE807C096_g = UnitGroup("RichMineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        autoE807C096_u = UnitGroupCount(autoE807C096_g, c_unitCountAll);
        for (;; autoE807C096_u -= 1) {
            autoE807C096_var = UnitGroupUnitFromEnd(autoE807C096_g, autoE807C096_u);
            if (autoE807C096_var == null) { break; }
            UnitRemove(autoE807C096_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoE807C096_var), UnitGetPosition(autoE807C096_var));
        }
        auto9C4118E3_g = UnitGroup("MineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        auto9C4118E3_u = UnitGroupCount(auto9C4118E3_g, c_unitCountAll);
        for (;; auto9C4118E3_u -= 1) {
            auto9C4118E3_var = UnitGroupUnitFromEnd(auto9C4118E3_g, auto9C4118E3_u);
            if (auto9C4118E3_var == null) { break; }
            UnitRemove(auto9C4118E3_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9C4118E3_var), UnitGetPosition(auto9C4118E3_var));
        }
    }
    else if (autoEE1D3252_val == 11) {
        RegionPlayableMapSet(RegionFromId(197));
        RegionSetCenter(RegionFromId(6), PointFromId(991));
        gv_centerPoint = PointFromId(991);
        gf_SetZealotSpeed(3.75);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F9A01821"));
        autoA41A201D_g = UnitGroup("RichMineralField", 0, RegionFromId(94), UnitFilter(0, 0, 0, 0), 0);
        autoA41A201D_u = UnitGroupCount(autoA41A201D_g, c_unitCountAll);
        for (;; autoA41A201D_u -= 1) {
            autoA41A201D_var = UnitGroupUnitFromEnd(autoA41A201D_g, autoA41A201D_u);
            if (autoA41A201D_var == null) { break; }
            UnitRemove(autoA41A201D_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoA41A201D_var), UnitGetPosition(autoA41A201D_var));
        }
        autoB9AE78E6_g = UnitGroup("RichMineralField", 0, RegionFromId(95), UnitFilter(0, 0, 0, 0), 0);
        autoB9AE78E6_u = UnitGroupCount(autoB9AE78E6_g, c_unitCountAll);
        for (;; autoB9AE78E6_u -= 1) {
            autoB9AE78E6_var = UnitGroupUnitFromEnd(autoB9AE78E6_g, autoB9AE78E6_u);
            if (autoB9AE78E6_var == null) { break; }
            UnitRemove(autoB9AE78E6_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoB9AE78E6_var), UnitGetPosition(autoB9AE78E6_var));
        }
        autoD6382D69_g = UnitGroup("RichMineralField", 0, RegionFromId(12), UnitFilter(0, 0, 0, 0), 0);
        autoD6382D69_u = UnitGroupCount(autoD6382D69_g, c_unitCountAll);
        for (;; autoD6382D69_u -= 1) {
            autoD6382D69_var = UnitGroupUnitFromEnd(autoD6382D69_g, autoD6382D69_u);
            if (autoD6382D69_var == null) { break; }
            UnitRemove(autoD6382D69_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoD6382D69_var), UnitGetPosition(autoD6382D69_var));
        }
        autoAC889722_g = UnitGroup("RichMineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        autoAC889722_u = UnitGroupCount(autoAC889722_g, c_unitCountAll);
        for (;; autoAC889722_u -= 1) {
            autoAC889722_var = UnitGroupUnitFromEnd(autoAC889722_g, autoAC889722_u);
            if (autoAC889722_var == null) { break; }
            UnitRemove(autoAC889722_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoAC889722_var), UnitGetPosition(autoAC889722_var));
        }
        auto01676A5E_g = UnitGroup("MineralField", 0, RegionFromId(198), UnitFilter(0, 0, 0, 0), 0);
        auto01676A5E_u = UnitGroupCount(auto01676A5E_g, c_unitCountAll);
        for (;; auto01676A5E_u -= 1) {
            auto01676A5E_var = UnitGroupUnitFromEnd(auto01676A5E_g, auto01676A5E_u);
            if (auto01676A5E_var == null) { break; }
            UnitRemove(auto01676A5E_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto01676A5E_var), UnitGetPosition(auto01676A5E_var));
        }
    }
    else if (autoEE1D3252_val == 12) {
        RegionPlayableMapSet(RegionFromId(13));
        RegionSetCenter(RegionFromId(6), PointFromId(990));
        gv_centerPoint = PointFromId(990);
        gf_SetZealotSpeed(4.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/64293FC2"));
        autoB07C3B2A_g = UnitGroup("RichMineralField", 0, RegionFromId(16), UnitFilter(0, 0, 0, 0), 0);
        autoB07C3B2A_u = UnitGroupCount(autoB07C3B2A_g, c_unitCountAll);
        for (;; autoB07C3B2A_u -= 1) {
            autoB07C3B2A_var = UnitGroupUnitFromEnd(autoB07C3B2A_g, autoB07C3B2A_u);
            if (autoB07C3B2A_var == null) { break; }
            UnitRemove(autoB07C3B2A_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoB07C3B2A_var), UnitGetPosition(autoB07C3B2A_var));
        }
        auto09658BCB_g = UnitGroup("RichMineralField", 0, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
        auto09658BCB_u = UnitGroupCount(auto09658BCB_g, c_unitCountAll);
        for (;; auto09658BCB_u -= 1) {
            auto09658BCB_var = UnitGroupUnitFromEnd(auto09658BCB_g, auto09658BCB_u);
            if (auto09658BCB_var == null) { break; }
            UnitRemove(auto09658BCB_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto09658BCB_var), UnitGetPosition(auto09658BCB_var));
        }
        auto533B2052_g = UnitGroup("RichMineralField", 0, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0);
        auto533B2052_u = UnitGroupCount(auto533B2052_g, c_unitCountAll);
        for (;; auto533B2052_u -= 1) {
            auto533B2052_var = UnitGroupUnitFromEnd(auto533B2052_g, auto533B2052_u);
            if (auto533B2052_var == null) { break; }
            UnitRemove(auto533B2052_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto533B2052_var), UnitGetPosition(auto533B2052_var));
        }
        autoCD47F752_g = UnitGroup("RichMineralField", 0, RegionFromId(199), UnitFilter(0, 0, 0, 0), 0);
        autoCD47F752_u = UnitGroupCount(autoCD47F752_g, c_unitCountAll);
        for (;; autoCD47F752_u -= 1) {
            autoCD47F752_var = UnitGroupUnitFromEnd(autoCD47F752_g, autoCD47F752_u);
            if (autoCD47F752_var == null) { break; }
            UnitRemove(autoCD47F752_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoCD47F752_var), UnitGetPosition(autoCD47F752_var));
        }
        auto8A8ACB41_g = UnitGroup("RichMineralField", 0, RegionFromId(164), UnitFilter(0, 0, 0, 0), 0);
        auto8A8ACB41_u = UnitGroupCount(auto8A8ACB41_g, c_unitCountAll);
        for (;; auto8A8ACB41_u -= 1) {
            auto8A8ACB41_var = UnitGroupUnitFromEnd(auto8A8ACB41_g, auto8A8ACB41_u);
            if (auto8A8ACB41_var == null) { break; }
            UnitRemove(auto8A8ACB41_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto8A8ACB41_var), UnitGetPosition(auto8A8ACB41_var));
        }
        autoA8C25855_g = UnitGroup("MineralField", 0, RegionFromId(161), UnitFilter(0, 0, 0, 0), 0);
        autoA8C25855_u = UnitGroupCount(autoA8C25855_g, c_unitCountAll);
        for (;; autoA8C25855_u -= 1) {
            autoA8C25855_var = UnitGroupUnitFromEnd(autoA8C25855_g, autoA8C25855_u);
            if (autoA8C25855_var == null) { break; }
            UnitRemove(autoA8C25855_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoA8C25855_var), UnitGetPosition(autoA8C25855_var));
        }
    }
    else if (autoEE1D3252_val == 13) {
        RegionPlayableMapSet(RegionFromId(155));
        RegionSetCenter(RegionFromId(6), PointFromId(987));
        gv_centerPoint = PointFromId(987);
        gf_SetZealotSpeed(4.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D788AC7C"));
        auto4E21A52E_g = UnitGroup("RichMineralField", 0, RegionFromId(17), UnitFilter(0, 0, 0, 0), 0);
        auto4E21A52E_u = UnitGroupCount(auto4E21A52E_g, c_unitCountAll);
        for (;; auto4E21A52E_u -= 1) {
            auto4E21A52E_var = UnitGroupUnitFromEnd(auto4E21A52E_g, auto4E21A52E_u);
            if (auto4E21A52E_var == null) { break; }
            UnitRemove(auto4E21A52E_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto4E21A52E_var), UnitGetPosition(auto4E21A52E_var));
        }
        auto947FD153_g = UnitGroup("RichMineralField", 0, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0);
        auto947FD153_u = UnitGroupCount(auto947FD153_g, c_unitCountAll);
        for (;; auto947FD153_u -= 1) {
            auto947FD153_var = UnitGroupUnitFromEnd(auto947FD153_g, auto947FD153_u);
            if (auto947FD153_var == null) { break; }
            UnitRemove(auto947FD153_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto947FD153_var), UnitGetPosition(auto947FD153_var));
        }
        auto5D583F79_g = UnitGroup("RichMineralField", 0, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0);
        auto5D583F79_u = UnitGroupCount(auto5D583F79_g, c_unitCountAll);
        for (;; auto5D583F79_u -= 1) {
            auto5D583F79_var = UnitGroupUnitFromEnd(auto5D583F79_g, auto5D583F79_u);
            if (auto5D583F79_var == null) { break; }
            UnitRemove(auto5D583F79_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto5D583F79_var), UnitGetPosition(auto5D583F79_var));
        }
        auto9ED8F68C_g = UnitGroup("RichMineralField", 0, RegionFromId(199), UnitFilter(0, 0, 0, 0), 0);
        auto9ED8F68C_u = UnitGroupCount(auto9ED8F68C_g, c_unitCountAll);
        for (;; auto9ED8F68C_u -= 1) {
            auto9ED8F68C_var = UnitGroupUnitFromEnd(auto9ED8F68C_g, auto9ED8F68C_u);
            if (auto9ED8F68C_var == null) { break; }
            UnitRemove(auto9ED8F68C_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9ED8F68C_var), UnitGetPosition(auto9ED8F68C_var));
        }
        autoE85A292D_g = UnitGroup("RichMineralField", 0, RegionFromId(161), UnitFilter(0, 0, 0, 0), 0);
        autoE85A292D_u = UnitGroupCount(autoE85A292D_g, c_unitCountAll);
        for (;; autoE85A292D_u -= 1) {
            autoE85A292D_var = UnitGroupUnitFromEnd(autoE85A292D_g, autoE85A292D_u);
            if (autoE85A292D_var == null) { break; }
            UnitRemove(autoE85A292D_var);
            libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoE85A292D_var), UnitGetPosition(autoE85A292D_var));
        }
        auto93247635_g = UnitGroup("MineralField", 0, RegionFromId(164), UnitFilter(0, 0, 0, 0), 0);
        auto93247635_u = UnitGroupCount(auto93247635_g, c_unitCountAll);
        for (;; auto93247635_u -= 1) {
            auto93247635_var = UnitGroupUnitFromEnd(auto93247635_g, auto93247635_u);
            if (auto93247635_var == null) { break; }
            UnitRemove(auto93247635_var);
            libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto93247635_var), UnitGetPosition(auto93247635_var));
        }
    }
    else {
    }
    libNtve_gf_UnitCreateFacingPoint(1, "TempZealot", 0, 0, gv_centerPoint, gv_centerPoint);
    autoA17AF7FB_var = 1;
    for ( ; autoA17AF7FB_var <= autoA17AF7FB_ae; autoA17AF7FB_var += 1 ) {
        gv_zealotsTemp[autoA17AF7FB_var] = UnitLastCreated();
    }
    lv_i = 1;
    for ( ; ( (auto21BDC2F0_ai >= 0 && lv_i <= auto21BDC2F0_ae) || (auto21BDC2F0_ai < 0 && lv_i >= auto21BDC2F0_ae) ) ; lv_i += auto21BDC2F0_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            VisExploreArea(lv_i, RegionEntireMap(), false, false);
            VisRevealArea(lv_i, RegionPlayableMap(), 0.05, false);
            CameraInfoSetTarget(CameraInfoFromId(1031), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1032), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1033), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1034), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1035), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1036), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1037), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1038), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1039), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1040), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1041), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1042), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1043), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1044), gv_centerPoint);
            CameraInfoSetTarget(CameraInfoFromId(1045), gv_centerPoint);
            CameraSetValue(lv_i, c_cameraValueYaw, 90.0, 7.0, -1, 10.0);
            CameraSetValue(lv_i, c_cameraValuePitch, 61.45, 7.0, -1, 10.0);
            CameraPan(lv_i, gv_centerPoint, 7.0, -1, 10, true);
        }

    }
    if (((gv_chosenMap == 4) || (gv_chosenMap == 5) || (gv_chosenMap == 7) || (gv_chosenMap == 9) || (gv_chosenMap == 10))) {
        TriggerEnable(gt_SpeedRegion, true);
    }

    if ((gv_regame == true)) {
        TriggerExecute(gt_ChooseTimescale, true, false);
    }
    else {
        if ((GameAttributeGameValue("1") == "0003") || (GameAttributeGameValue("1") == "0005")) {
            gv_timescalemode = 2;
            TriggerExecute(gt_ChooseSideInit, true, false);
        }
        else {
            TriggerExecute(gt_ChooseSideInit, true, false);
        }
    }
    TriggerEnable(gt_ProbeLefttheGameDead, true);
    TriggerEnable(gt_ZealotLefttheGameDead, true);
    TriggerEnable(gt_UltraWall, true);
    TriggerEnable(gt_MegaWall, true);
    TriggerEnable(gt_PowerWall, true);
    TriggerEnable(gt_FinalWall, true);
    TriggerEnable(gt_TurretLevel7, true);
    TriggerEnable(gt_TurretLevel11, true);
    TriggerEnable(gt_TurretLevel13, true);
    TriggerEnable(gt_TurretLevelFinal, true);
    TriggerEnable(gt_DominionTrain, true);
    TriggerEnable(gt_LudicrousMiner, true);
    TriggerEnable(gt_GenMax, true);
    TriggerEnable(gt_UltraMiner, true);
    TriggerEnable(gt_LegendaryMiner, true);
    TriggerEnable(gt_PerfectMiner, true);
    TriggerEnable(gt_BuildaAutomatedMineLevel6, true);
    TriggerEnable(gt_BuildaAutomatedMineLevel7, true);
    TriggerEnable(gt_BuildaAutomatedMineLevel8, true);
    TriggerEnable(gt_Vespene, true);
    TriggerEnable(gt_FinalBlade, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteTimerMapExpires_Init () {
    gt_VoteTimerMapExpires = TriggerCreate("gt_VoteTimerMapExpires_Func");
    TriggerAddEventTimer(gt_VoteTimerMapExpires, gv_voteTimerMap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Timescale
//--------------------------------------------------------------------------------------------------
bool gt_ChooseTimescale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_random;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_random = RandomInt(0, 5);

    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupActive(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupActive());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    TimerStart(gv_voteTimerTimescale, gv_voteTime, false, c_timeGame);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, true);
    DialogCreate(500, 525, c_anchorTop, 0, 50, true);
    gv_voteBoard = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/1B42F78D"));
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, -100, StringExternal("Param/Value/AE2228B0"), StringExternal("Param/Value/53C4A628"), "");
    gv_voteButtonDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, 0, StringExternal("Param/Value/3B7E457D"), StringExternal("Param/Value/59BBA903"), "");
    gv_voteButtonDialogItem[1] = DialogControlLastCreated();
    if (lv_random > 3 && gv_setSpeedCmdIssued == false && (GameAttributeGameValue("1") != "0003" || GameAttributeGameValue("1") == "0005")) {
        //DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, 100, StringExternal("Param/Value/C88F96D1"), StringExternal("Param/Value/8B53C2BF"), "");
    gv_voteButtonDialogItem[2] = DialogControlLastCreated();
    if (lv_random > 0 && gv_setSpeedCmdIssued == false && (GameAttributeGameValue("1") != "0003" || GameAttributeGameValue("1") == "0005")) {
        //DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, -85, StringExternal("Param/Value/F4CF116E"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, 15, StringExternal("Param/Value/872A6CDB"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, 115, StringExternal("Param/Value/CDEE6DE6"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    gv_progressBar = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseTimescale_Init () {
    gt_ChooseTimescale = TriggerCreate("gt_ChooseTimescale_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Timer Timescale Expires
//--------------------------------------------------------------------------------------------------
bool gt_VoteTimerTimescaleExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_maxVotes;
    int[4] lv_mapsWhichHaveMaxVotes;
    int lv_numberofMaxMaps;
    int lv_chosenTimescale;

    // Automatic Variable Declarations
    const int auto18D77C95_ae = 2;
    const int auto18D77C95_ai = 1;
    const int auto0C9CAB10_ae = 2;
    const int auto0C9CAB10_ai = 1;
    const int auto155F7DFD_ae = 15;
    const int auto155F7DFD_ai = 1;
    const int auto5E6767AC_ae = 2;
    const int auto5E6767AC_ai = 1;
    int autoCA690DD9_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, false);
    gv_setSpeedCmdIssued = false;
    gv_setSpeedCmdPlayer = PlayerGroupEmpty();
    DialogDestroy(gv_voteBoard);
    lv_i = 0;
    for ( ; ( (auto18D77C95_ai >= 0 && lv_i <= auto18D77C95_ae) || (auto18D77C95_ai < 0 && lv_i >= auto18D77C95_ae) ) ; lv_i += auto18D77C95_ai ) {
        if ((gv_votesCountButton[lv_i] > lv_maxVotes)) {
            lv_maxVotes = gv_votesCountButton[lv_i];
        }

    }
    lv_i = 0;
    for ( ; ( (auto0C9CAB10_ai >= 0 && lv_i <= auto0C9CAB10_ae) || (auto0C9CAB10_ai < 0 && lv_i >= auto0C9CAB10_ae) ) ; lv_i += auto0C9CAB10_ai ) {
        if ((gv_votesCountButton[lv_i] == lv_maxVotes)) {
            lv_numberofMaxMaps += 1;
            lv_mapsWhichHaveMaxVotes[lv_numberofMaxMaps] = (lv_i + 1);
        }

    }
    lv_chosenTimescale = lv_mapsWhichHaveMaxVotes[RandomInt(1, lv_numberofMaxMaps)];
    lv_i = 0;
    for ( ; ( (auto155F7DFD_ai >= 0 && lv_i <= auto155F7DFD_ae) || (auto155F7DFD_ai < 0 && lv_i >= auto155F7DFD_ae) ) ; lv_i += auto155F7DFD_ai ) {
        gv_votePlayerValue[lv_i] = -1;
    }
    lv_i = 0;
    for ( ; ( (auto5E6767AC_ai >= 0 && lv_i <= auto5E6767AC_ae) || (auto5E6767AC_ai < 0 && lv_i >= auto5E6767AC_ae) ) ; lv_i += auto5E6767AC_ai ) {
        gv_votesCountButton[lv_i] = 0;
        gv_voteButtonDialogItem[lv_i] = c_invalidDialogControlId;
    }
    autoCA690DD9_val = lv_chosenTimescale;
    if (autoCA690DD9_val == 1) {
        gv_timescalemode = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/29FE58F3"));
    }
    else if (autoCA690DD9_val == 2) {
        gv_timescalemode = 2;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/20174094"));
    }
    else if (autoCA690DD9_val == 3) {
        gv_timescalemode = 3;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/1414663A"));
    }
    else if (autoCA690DD9_val == 4) {
        gv_timescalemode = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/975B5E3B"));
    }
    else {
    }
    TriggerExecute(gt_ChooseSideInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteTimerTimescaleExpires_Init () {
    gt_VoteTimerTimescaleExpires = TriggerCreate("gt_VoteTimerTimescaleExpires_Func");
    TriggerAddEventTimer(gt_VoteTimerTimescaleExpires, gv_voteTimerTimescale);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Side Init
//--------------------------------------------------------------------------------------------------
bool gt_ChooseSideInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetWorldVisible(PlayerGroupActive(), true);
    libNtve_gf_HideGameUI(true, PlayerGroupActive());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    TimerStart(gv_voteTimerSide, gv_voteTime, false, c_timeGame);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, true);
    DialogCreate(500, 525, c_anchorTop, 0, 50, true);
    gv_voteBoard = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/08E9C2E0"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorCenter, 30, -160, StringExternal("Param/Value/E93FF003"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, -100, StringExternal("Param/Value/ED99B5F8"), StringExternal("Param/Value/12D24B56"), "");
    gv_voteButtonDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, 0, StringExternal("Param/Value/13BE42C1"), StringExternal("Param/Value/592F3E45"), "");
    gv_voteButtonDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorCenter, 0, 100, StringExternal("Param/Value/085FF77F"), StringExternal("Param/Value/9B84817C"), "");
    gv_voteButtonDialogItem[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, -85, StringExternal("Param/Value/718F360C"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, 15, StringExternal("Param/Value/A02C0B68"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, -50, 115, StringExternal("Param/Value/2C8F6EB2"), Color(100,100,100), false, 2.0);
    gv_voteTextDialogItem[2] = DialogControlLastCreated();
    if ((GameAttributeGameValue("1") == "0004")) {
        DialogControlSetEnabled(gv_voteButtonDialogItem[0], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_voteButtonDialogItem[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_voteButtonDialogItem[2], PlayerGroupAll(), false);
    }
    else {
        DialogControlSetEnabled(gv_voteButtonDialogItem[0], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_voteButtonDialogItem[1], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_voteButtonDialogItem[2], PlayerGroupAll(), true);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 50, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    gv_progressBar = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseSideInit_Init () {
    gt_ChooseSideInit = TriggerCreate("gt_ChooseSideInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Timer Side Expires
//--------------------------------------------------------------------------------------------------
bool gt_VoteTimerSideExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_numberofVotesZealot;
    int lv_numberofVotesProbe;
    int lv_numberofVotesRandom;
    playergroup lv_choseZealot;
    playergroup lv_choseProbe;
    playergroup lv_random;
    playergroup lv_pvZ2Players;

    // Automatic Variable Declarations
    const int auto1DD15984_ae = 14;
    const int auto1DD15984_ai = 1;
    int autoE04E62A4_val;
    playergroup autoF1F18ABD_g;
    int autoF1F18ABD_var;
    const int auto8BDA5443_ae = 14;
    const int auto8BDA5443_ai = 1;
    int auto55C94BBF_val;
    int autoAE09AAB1_val;
    int auto2436A90B_val;
    const int auto8A253A3B_ae = 15;
    const int auto8A253A3B_ai = 1;
    const int auto1BB31616_ae = 9;
    const int auto1BB31616_ai = 1;
    const int auto535824D9_ae = 14;
    const int auto535824D9_ai = 1;
    string auto2589C466_val;

    // Variable Initialization
    lv_choseZealot = PlayerGroupEmpty();
    lv_choseProbe = PlayerGroupEmpty();
    lv_random = PlayerGroupEmpty();
    lv_pvZ2Players = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, false);
    DialogDestroy(gv_voteBoard);
    if ((PlayerGroupCount(PlayerGroupActive()) == 1)) {
        CameraSetValue(1, c_cameraValueYaw, 90.0, 3.0, -1, 10.0);
        auto55C94BBF_val = gv_votePlayerValue[PlayerGroupPlayer(PlayerGroupActive(), 1)];
        if (auto55C94BBF_val == 0) {
            gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Zealot";
        }
        else if (auto55C94BBF_val == 1) {
            gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Probe";
        }
        else if (auto55C94BBF_val == 2) {
            autoAE09AAB1_val = RandomInt(0, 1);
            if (autoAE09AAB1_val == 0) {
                gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Probe";
            }
            else if (autoAE09AAB1_val == 1) {
                gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Zealot";
            }
            else {
            }
        }
        else if (auto55C94BBF_val == -1) {
            auto2436A90B_val = RandomInt(0, 1);
            if (auto2436A90B_val == 0) {
                gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Probe";
            }
            else if (auto2436A90B_val == 1) {
                gv_side[PlayerGroupPlayer(PlayerGroupActive(), 1)] = "Zealot";
            }
            else {
            }
        }
        else {
        }
    }
    else {
        lv_i = 1;
        for ( ; ( (auto1DD15984_ai >= 0 && lv_i <= auto1DD15984_ae) || (auto1DD15984_ai < 0 && lv_i >= auto1DD15984_ae) ) ; lv_i += auto1DD15984_ai ) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                CameraSetValue(lv_i, c_cameraValueYaw, 90.0, 3.0, -1, 10.0);
                PlayerGroupAdd(lv_pvZ2Players, lv_i);
                autoE04E62A4_val = gv_votePlayerValue[lv_i];
                if (autoE04E62A4_val == 0) {
                    lv_numberofVotesZealot += 1;
                    PlayerGroupAdd(lv_choseZealot, lv_i);
                    autoF1F18ABD_g = lv_choseZealot;
                    autoF1F18ABD_var = -1;
                    while (true) {
                        autoF1F18ABD_var = PlayerGroupNextPlayer(autoF1F18ABD_g, autoF1F18ABD_var);
                        if (autoF1F18ABD_var < 0) { break; }
                        if (((gf_PlayerIsDeveloper(autoF1F18ABD_var) == true) || (gf_PlayerIsModerator(autoF1F18ABD_var) == true) || (gf_PlayerIsDonor(autoF1F18ABD_var) == true))) {
                            gv_premiumzswitch = 1;
                            PlayerGroupAdd(gv_premiumZealots, autoF1F18ABD_var);
                        }

                        if ((BankExists("ProbesvZealot2", autoF1F18ABD_var) == true)) {
                            if ((PlayerGroupHasPlayer(gv_premiumZealots, autoF1F18ABD_var) == false) && (gv_winrate[autoF1F18ABD_var] >= 0.5) && (gv_wins[autoF1F18ABD_var] >= 10.0)) {
                                gv_premiumzswitch = 1;
                                PlayerGroupAdd(gv_premiumZealots, autoF1F18ABD_var);
                            }
                            else {
                                if ((PlayerGroupHasPlayer(gv_premiumZealots, autoF1F18ABD_var) == false) && (gv_probewinrate[autoF1F18ABD_var] >= 0.66) && (gv_probewins[autoF1F18ABD_var] >= 100.0)) {
                                    gv_premiumzswitch = 1;
                                    PlayerGroupAdd(gv_premiumZealots, autoF1F18ABD_var);
                                }

                            }
                        }

                    }
                }
                else if (autoE04E62A4_val == 1) {
                    lv_numberofVotesProbe += 1;
                    PlayerGroupAdd(lv_choseProbe, lv_i);
                }
                else if (autoE04E62A4_val == 2) {
                    lv_numberofVotesRandom += 1;
                    PlayerGroupAdd(lv_random, lv_i);
                }
                else if (autoE04E62A4_val == -1) {
                    lv_numberofVotesProbe += 1;
                    PlayerGroupAdd(lv_choseProbe, lv_i);
                }
                else {
                }
            }

        }
        if (((gv_setSideCmdIssued == true) && (PlayerType(gv_setSideMakeZealot) == c_playerTypeUser) && (PlayerStatus(gv_setSideMakeZealot) == c_playerStatusActive) && (PlayerGroupHasPlayer(lv_choseZealot, gv_setSideMakeZealot) == true))) {
            gv_side[gv_setSideMakeZealot] = "Zealot";
            gv_setSideCmdIssued = false;
            gv_setSideCmdPlayer = PlayerGroupEmpty();
            gv_setSideMakeZealot = -1;
        }
        else {
            if ((lv_numberofVotesZealot == 1)) {
                gv_side[PlayerGroupPlayer(lv_choseZealot, 1)] = "Zealot";
            }
            else {
                if (((lv_numberofVotesZealot == 0) && (lv_numberofVotesRandom == 1))) {
                    gv_side[PlayerGroupPlayer(lv_random, 1)] = "Zealot";
                }
                else {
                    if (((lv_numberofVotesZealot == 0) && (lv_numberofVotesRandom == 0))) {
                        gv_side[PlayerGroupPlayer(lv_pvZ2Players, RandomInt(1, PlayerGroupCount(lv_pvZ2Players)))] = "Zealot";
                    }
                    else {
                        if (((lv_numberofVotesZealot == 0) && (lv_numberofVotesRandom >= 2))) {
                            gv_side[PlayerGroupPlayer(lv_random, RandomInt(1, PlayerGroupCount(lv_random)))] = "Zealot";
                        }
                        else {
                            if ((lv_numberofVotesZealot >= 2) && (gv_premiumzswitch == 1)) {
                                gv_side[PlayerGroupPlayer(gv_premiumZealots, RandomInt(1, PlayerGroupCount(gv_premiumZealots)))] = "Zealot";
                            }
                            else {
                                if ((lv_numberofVotesZealot >= 2) && (gv_premiumzswitch == 0)) {
                                    gv_side[PlayerGroupPlayer(lv_choseZealot, RandomInt(1, PlayerGroupCount(lv_choseZealot)))] = "Zealot";
                                }

                            }
                        }
                    }
                }
            }
        }
        lv_i = 1;
        for ( ; ( (auto8BDA5443_ai >= 0 && lv_i <= auto8BDA5443_ae) || (auto8BDA5443_ai < 0 && lv_i >= auto8BDA5443_ae) ) ; lv_i += auto8BDA5443_ai ) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_side[lv_i] != "Zealot"))) {
                gv_side[lv_i] = "Probe";
            }

        }
    }
    lv_i = 0;
    for ( ; ( (auto8A253A3B_ai >= 0 && lv_i <= auto8A253A3B_ae) || (auto8A253A3B_ai < 0 && lv_i >= auto8A253A3B_ae) ) ; lv_i += auto8A253A3B_ai ) {
        gv_votePlayerValue[lv_i] = -1;
    }
    lv_i = 0;
    for ( ; ( (auto1BB31616_ai >= 0 && lv_i <= auto1BB31616_ae) || (auto1BB31616_ai < 0 && lv_i >= auto1BB31616_ae) ) ; lv_i += auto1BB31616_ai ) {
        gv_votesCountButton[lv_i] = 0;
        gv_voteButtonDialogItem[lv_i] = c_invalidDialogControlId;
    }
    lv_i = 1;
    for ( ; ( (auto535824D9_ai >= 0 && lv_i <= auto535824D9_ae) || (auto535824D9_ai < 0 && lv_i >= auto535824D9_ae) ) ; lv_i += auto535824D9_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            auto2589C466_val = gv_side[lv_i];
            if (auto2589C466_val == "Probe") {
                PlayerGroupAdd(gv_playerGroupProbes, lv_i);
            }
            else if (auto2589C466_val == "Zealot") {
                PlayerGroupAdd(gv_playerGroupZealots, lv_i);
            }
            else {
            }
        }

    }
    TriggerExecute(gt_InitGame, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteTimerSideExpires_Init () {
    gt_VoteTimerSideExpires = TriggerCreate("gt_VoteTimerSideExpires_Func");
    TriggerAddEventTimer(gt_VoteTimerSideExpires, gv_voteTimerSide);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Hunter Allowed
//--------------------------------------------------------------------------------------------------
bool gt_ChooseHunterAllowed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoA2EFC914_ae = 14;
    const int autoA2EFC914_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_chosenMap == 1) || (gv_chosenMap == 2) || (gv_chosenMap == 3) || (gv_chosenMap == 11))) {
        gv_maxHuntersAllowed = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/8CBD1984"));
    }
    else {
        if (((gv_chosenMap == 8) || (gv_chosenMap == 12) || (gv_chosenMap == 13))) {
            gv_maxHuntersAllowed = 1;
        }
        else {
            gv_maxHuntersAllowed = 2;
        }
        lv_i = 1;
        for ( ; ( (autoA2EFC914_ai >= 0 && lv_i <= autoA2EFC914_ae) || (autoA2EFC914_ai < 0 && lv_i >= autoA2EFC914_ae) ) ; lv_i += autoA2EFC914_ai ) {
            if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                DialogCreate(500, 525, c_anchorTop, 0, 50, true);
                gv_voteBoard = DialogLastCreated();
                DialogSetVisible(DialogLastCreated(), gv_playerGroupZealots, true);
                DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/868C7F14"));
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 75, c_anchorCenter, 0, -100, StringExternal("Param/Value/E9EC94F8"), StringExternal("Param/Value/852CC3FA"), "");
                gv_voteButtonDialogItem[0] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 75, c_anchorCenter, 0, 0, StringExternal("Param/Value/D6520EA6"), StringExternal("Param/Value/6EB44180"), "");
                gv_voteButtonDialogItem[1] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 75, c_anchorCenter, 0, 100, StringExternal("Param/Value/39D15C55"), StringExternal("Param/Value/93420194"), "");
                gv_voteButtonDialogItem[2] = DialogControlLastCreated();
            }

        }
        TriggerEnable(gt_VoteButtonPressed, true);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
        DialogControlSetSize(DialogControlLastCreated(), gv_playerGroupZealots, 400, 50);
        DialogControlSetPosition(DialogControlLastCreated(), gv_playerGroupZealots, c_anchorBottomLeft, 50, 50);
        libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, gv_playerGroupZealots);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 15.0, gv_playerGroupZealots);
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 15.0, gv_playerGroupZealots);
        gv_progressBar = DialogControlLastCreated();
        TimerStart(gv_voteTimerHunter, gv_voteTime, false, c_timeGame);
        TriggerEnable(gt_UpdateProgressBarZealots, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseHunterAllowed_Init () {
    gt_ChooseHunterAllowed = TriggerCreate("gt_ChooseHunterAllowed_Func");
    TriggerAddEventTimer(gt_ChooseHunterAllowed, gv_timerAsktoAllowHunter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Timer Hunter Expires
//--------------------------------------------------------------------------------------------------
bool gt_VoteTimerHunterExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_maxVotes;
    int[4] lv_mapsWhichHaveMaxVotes;
    int lv_numberofMaxMaps;
    int lv_choosenHunterVoteOption;
    int lv_chosenTimescale2;

    // Automatic Variable Declarations
    const int auto0A9A88E3_ae = 2;
    const int auto0A9A88E3_ai = 1;
    const int auto32AF1A86_ae = 15;
    const int auto32AF1A86_ai = 1;
    const int auto74DC1AEE_ae = 2;
    const int auto74DC1AEE_ai = 1;
    int auto9D1782A8_val;
    const int auto2601AE90_ae = 15;
    const int auto2601AE90_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UpdateProgressBarZealots, false);
    TriggerEnable(gt_VoteButtonPressed, false);
    DialogDestroy(gv_voteBoard);
    lv_i = 0;
    for ( ; ( (auto0A9A88E3_ai >= 0 && lv_i <= auto0A9A88E3_ae) || (auto0A9A88E3_ai < 0 && lv_i >= auto0A9A88E3_ae) ) ; lv_i += auto0A9A88E3_ai ) {
        if ((gv_votesCountButton[lv_i] > lv_maxVotes)) {
            lv_maxVotes = gv_votesCountButton[lv_i];
            lv_choosenHunterVoteOption = (lv_i + 1);
        }

    }
    lv_i = 0;
    for ( ; ( (auto32AF1A86_ai >= 0 && lv_i <= auto32AF1A86_ae) || (auto32AF1A86_ai < 0 && lv_i >= auto32AF1A86_ae) ) ; lv_i += auto32AF1A86_ai ) {
        gv_votePlayerValue[lv_i] = -1;
        TechTreeSpecificRequirementEnable(lv_i, "HunterAllowed", true);
        TechTreeUpgradeAddLevel(lv_i, "HuntersAllowed", 1);
    }
    lv_i = 0;
    for ( ; ( (auto74DC1AEE_ai >= 0 && lv_i <= auto74DC1AEE_ae) || (auto74DC1AEE_ai < 0 && lv_i >= auto74DC1AEE_ae) ) ; lv_i += auto74DC1AEE_ai ) {
        gv_votesCountButton[lv_i] = 0;
        gv_voteButtonDialogItem[lv_i] = c_invalidDialogControlId;
    }
    auto9D1782A8_val = lv_choosenHunterVoteOption;
    if (auto9D1782A8_val == 0) {
        gv_maxHuntersAllowed = gv_maxHuntersAllowed;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/03AE600D"));
    }
    else if (auto9D1782A8_val == 1) {
        gv_maxHuntersAllowed = gv_maxHuntersAllowed;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/34EF5371"));
    }
    else if (auto9D1782A8_val == 2) {
        gv_maxHuntersAllowed = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/BDC365AD"));
        lv_i = 0;
        for ( ; ( (auto2601AE90_ai >= 0 && lv_i <= auto2601AE90_ae) || (auto2601AE90_ai < 0 && lv_i >= auto2601AE90_ae) ) ; lv_i += auto2601AE90_ai ) {
            TechTreeSpecificRequirementEnable(lv_i, "HunterAllowed", false);
        }
    }
    else if (auto9D1782A8_val == 3) {
        gv_maxHuntersAllowed = gv_maxHuntersAllowed;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/FD794932"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteTimerHunterExpires_Init () {
    gt_VoteTimerHunterExpires = TriggerCreate("gt_VoteTimerHunterExpires_Func");
    TriggerAddEventTimer(gt_VoteTimerHunterExpires, gv_voteTimerHunter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_VoteButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pressedButtonNumber;

    // Automatic Variable Declarations
    int auto327D88AC_ae;
    int auto327D88AC_var;
    int auto2CA950C5_ae;
    int auto2CA950C5_var;
    int autoCA4384A2_ae;
    int autoCA4384A2_var;
    int auto94BA4526_ae;
    int auto94BA4526_var;

    // Variable Initialization
    lv_pressedButtonNumber = -1;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() != c_invalidDialogControlId) && ((EventDialogControl() == gv_voteButtonDialogItem[0]) || (EventDialogControl() == gv_voteButtonDialogItem[1]) || (EventDialogControl() == gv_voteButtonDialogItem[2]) || (EventDialogControl() == gv_voteButtonDialogItem[3]) || (EventDialogControl() == gv_voteButtonDialogItem[4]) || (EventDialogControl() == gv_voteButtonDialogItem[5]) || (EventDialogControl() == gv_voteButtonDialogItem[6]) || (EventDialogControl() == gv_voteButtonDialogItem[7]) || (EventDialogControl() == gv_voteButtonDialogItem[8]) || (EventDialogControl() == gv_voteButtonDialogItem[9]) || (EventDialogControl() == gv_voteButtonDialogItem[10]) || (EventDialogControl() == gv_voteButtonDialogItem[11]) || (EventDialogControl() == gv_voteButtonDialogItem[12]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto327D88AC_ae = gv_maxMaps1;
    auto327D88AC_var = 0;
    for ( ; auto327D88AC_var <= auto327D88AC_ae; auto327D88AC_var += 1 ) {
        if ((EventDialogControl() == gv_voteButtonDialogItem[auto327D88AC_var])) {
            lv_pressedButtonNumber = auto327D88AC_var;
        }

    }
    if ((lv_pressedButtonNumber != -1)) {
        libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemDesaturationColor(EventDialogControl(), Color(100,100,100), PlayerGroupSingle(EventPlayer()));
        auto2CA950C5_ae = gv_maxMaps1;
        auto2CA950C5_var = 0;
        for ( ; auto2CA950C5_var <= auto2CA950C5_ae; auto2CA950C5_var += 1 ) {
            if (((auto2CA950C5_var != lv_pressedButtonNumber) && (gv_voteButtonDialogItem[auto2CA950C5_var] != c_invalidDialogControlId))) {
                libNtve_gf_SetDialogItemDesaturated(gv_voteButtonDialogItem[auto2CA950C5_var], false, PlayerGroupSingle(EventPlayer()));
            }

        }
        if ((gv_votePlayerValue[EventPlayer()] == -1)) {
            gv_votesCountButton[lv_pressedButtonNumber] += 1;
        }
        else {
            autoCA4384A2_ae = gv_maxMaps1;
            autoCA4384A2_var = 0;
            for ( ; autoCA4384A2_var <= autoCA4384A2_ae; autoCA4384A2_var += 1 ) {
                if ((gv_votePlayerValue[EventPlayer()] == autoCA4384A2_var)) {
                    if ((lv_pressedButtonNumber != autoCA4384A2_var)) {
                        gv_votesCountButton[lv_pressedButtonNumber] += 1;
                        gv_votesCountButton[autoCA4384A2_var] -= 1;
                    }

                }

            }
        }
        gv_votePlayerValue[EventPlayer()] = lv_pressedButtonNumber;
        auto94BA4526_ae = gv_maxMaps1;
        auto94BA4526_var = 0;
        for ( ; auto94BA4526_var <= auto94BA4526_ae; auto94BA4526_var += 1 ) {
            if ((gv_voteButtonDialogItem[auto94BA4526_var] != c_invalidDialogControlId)) {
                libNtve_gf_SetDialogItemText(gv_voteTextDialogItem[auto94BA4526_var], (StringExternal("Param/Value/63568579") + IntToText(gv_votesCountButton[auto94BA4526_var])), PlayerGroupAll());
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteButtonPressed_Init () {
    gt_VoteButtonPressed = TriggerCreate("gt_VoteButtonPressed_Func");
    TriggerAddEventDialogControl(gt_VoteButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Progress Bar - AllActivePlayers
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProgressBarAllActivePlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoBB04A781_g;
    int autoBB04A781_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBB04A781_g = PlayerGroupActive();
    autoBB04A781_var = -1;
    while (true) {
        autoBB04A781_var = PlayerGroupNextPlayer(autoBB04A781_g, autoBB04A781_var);
        if (autoBB04A781_var < 0) { break; }
        libNtve_gf_SetDialogItemCurrentValue(gv_progressBar, (libNtve_gf_DialogItemValue(gv_progressBar, autoBB04A781_var) - 1.5008), PlayerGroupSingle(autoBB04A781_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProgressBarAllActivePlayers_Init () {
    gt_UpdateProgressBarAllActivePlayers = TriggerCreate("gt_UpdateProgressBarAllActivePlayers_Func");
    TriggerEnable(gt_UpdateProgressBarAllActivePlayers, false);
    TriggerAddEventTimePeriodic(gt_UpdateProgressBarAllActivePlayers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Progress Bar - AllActivePlayers - REGAME
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProgressBarAllActivePlayersREGAME_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerCount;
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto67060CF6_g;
    int auto67060CF6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerCount = (StringExternal("Param/Value/0D73C04F") + IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/9EBDC7AE"));
    libNtve_gf_SetDialogItemText(gv_regamePlayerCountItem, lv_playerCount, PlayerGroupAll());
    auto67060CF6_g = PlayerGroupActive();
    auto67060CF6_var = -1;
    while (true) {
        auto67060CF6_var = PlayerGroupNextPlayer(auto67060CF6_g, auto67060CF6_var);
        if (auto67060CF6_var < 0) { break; }
        libNtve_gf_SetDialogItemCurrentValue(gv_progressBar, (libNtve_gf_DialogItemValue(gv_progressBar, auto67060CF6_var) - 1.5008), PlayerGroupSingle(auto67060CF6_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProgressBarAllActivePlayersREGAME_Init () {
    gt_UpdateProgressBarAllActivePlayersREGAME = TriggerCreate("gt_UpdateProgressBarAllActivePlayersREGAME_Func");
    TriggerEnable(gt_UpdateProgressBarAllActivePlayersREGAME, false);
    TriggerAddEventTimePeriodic(gt_UpdateProgressBarAllActivePlayersREGAME, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Progress Bar - Zealots
//--------------------------------------------------------------------------------------------------
bool gt_UpdateProgressBarZealots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto92A77A82_g;
    int auto92A77A82_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto92A77A82_g = gv_playerGroupZealots;
    auto92A77A82_var = -1;
    while (true) {
        auto92A77A82_var = PlayerGroupNextPlayer(auto92A77A82_g, auto92A77A82_var);
        if (auto92A77A82_var < 0) { break; }
        libNtve_gf_SetDialogItemCurrentValue(gv_progressBar, (libNtve_gf_DialogItemValue(gv_progressBar, auto92A77A82_var) - 1.5008), PlayerGroupSingle(auto92A77A82_var));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateProgressBarZealots_Init () {
    gt_UpdateProgressBarZealots = TriggerCreate("gt_UpdateProgressBarZealots_Func");
    TriggerEnable(gt_UpdateProgressBarZealots, false);
    TriggerAddEventTimePeriodic(gt_UpdateProgressBarZealots, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Verify Bank on Hack
//--------------------------------------------------------------------------------------------------
bool gt_VerifyBankonHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_tempbankintegerload;
    int[17] lv_pointsHumanLocal;
    int[17] lv_pointsTotalLocal;
    int[17] lv_pointsVampireLocal;
    int[17] lv_winsHumanLocal;
    int[17] lv_winsTotalLocal;
    int[17] lv_winsVampireLocal;
    int[17] lv_lossesHumanLocal;
    int[17] lv_lossesTotalLocal;
    int[17] lv_lossesVampireLocal;
    int[17] lv_gamesHumanLocal;
    int[17] lv_gamesTotalLocal;
    int[17] lv_gamesVampireLocal;

    // Automatic Variable Declarations
    const int autoB10E2D63_ae = 14;
    const int autoB10E2D63_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoB10E2D63_ai >= 0 && lv_i <= autoB10E2D63_ae) || (autoB10E2D63_ai < 0 && lv_i >= autoB10E2D63_ae) ) ; lv_i += autoB10E2D63_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_bankisInvalid[lv_i] == false))) {
            lv_pointsHumanLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points);
            lv_pointsTotalLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points);
            lv_pointsVampireLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points);
            lv_winsHumanLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins);
            lv_winsTotalLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins);
            lv_winsVampireLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins);
            lv_gamesHumanLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games);
            lv_gamesTotalLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games);
            lv_gamesVampireLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games);
            lv_lossesHumanLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses);
            lv_lossesTotalLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses);
            lv_lossesVampireLocal[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses);
            if (((lv_pointsHumanLocal[lv_i] >= 501000) || (lv_pointsTotalLocal[lv_i] >= 501000) || (lv_pointsVampireLocal[lv_i] >= 501000))) {
                gv_bankisInvalid[lv_i] = true;
            }

            if ((lv_winsHumanLocal[lv_i] != 0)) {
                if ((((lv_pointsHumanLocal[lv_i] - 1000) / lv_winsHumanLocal[lv_i]) > 375)) {
                    gv_bankisInvalid[lv_i] = true;
                }

            }

            if ((lv_winsTotalLocal[lv_i] != 0)) {
                if ((((lv_pointsTotalLocal[lv_i] - 1000) / lv_winsTotalLocal[lv_i]) > 375)) {
                    gv_bankisInvalid[lv_i] = true;
                }

            }

            if ((lv_winsVampireLocal[lv_i] != 0)) {
                if ((((lv_pointsVampireLocal[lv_i] - 1000) / lv_winsVampireLocal[lv_i]) > 375)) {
                    gv_bankisInvalid[lv_i] = true;
                }

            }

            if ((((lv_gamesHumanLocal[lv_i] - (lv_winsHumanLocal[lv_i] + lv_lossesHumanLocal[lv_i])) >= 2) || ((lv_gamesHumanLocal[lv_i] - (lv_winsHumanLocal[lv_i] + lv_lossesHumanLocal[lv_i])) < 0) || ((lv_gamesTotalLocal[lv_i] - (lv_winsTotalLocal[lv_i] + lv_lossesTotalLocal[lv_i])) >= 2) || ((lv_gamesTotalLocal[lv_i] - (lv_winsTotalLocal[lv_i] + lv_lossesTotalLocal[lv_i])) < 0) || ((lv_gamesVampireLocal[lv_i] - (lv_winsVampireLocal[lv_i] + lv_lossesVampireLocal[lv_i])) >= 2) || ((lv_gamesVampireLocal[lv_i] - (lv_winsVampireLocal[lv_i] + lv_lossesVampireLocal[lv_i])) < 0))) {
                gv_bankisInvalid[lv_i] = true;
            }

            if (((lv_gamesHumanLocal[lv_i] < 0) || (lv_gamesTotalLocal[lv_i] < 0) || (lv_gamesVampireLocal[lv_i] < 0) || (lv_winsHumanLocal[lv_i] < 0) || (lv_winsTotalLocal[lv_i] < 0) || (lv_winsVampireLocal[lv_i] < 0) || (lv_lossesHumanLocal[lv_i] < 0) || (lv_lossesTotalLocal[lv_i] < 0) || (lv_lossesVampireLocal[lv_i] < 0))) {
                gv_bankisInvalid[lv_i] = true;
            }

            if ((gv_bankisInvalid[lv_i] == false)) {
                if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games) == 0)) {
                    gv_winrate[lv_i] = 0.0;
                    gv_wins[lv_i] = 0.0;
                }
                else {
                    gv_winrate[lv_i] = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games)));
                    gv_wins[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins);
                }
                if ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) == 0)) {
                    gv_probewinrate[lv_i] = 0.0;
                    gv_probewins[lv_i] = 0.0;
                }
                else {
                    gv_probewinrate[lv_i] = (IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins)) / IntToFixed(BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games)));
                    gv_probewins[lv_i] = BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins);
                }
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, StringExternal("Param/Value/9AF9A1CF"));
            }
            else {
                gf_ResetHackedBank(lv_i);
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, StringExternal("Param/Value/623D4F9F"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VerifyBankonHack_Init () {
    gt_VerifyBankonHack = TriggerCreate("gt_VerifyBankonHack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Banks
//--------------------------------------------------------------------------------------------------
bool gt_InitBanks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool[17] lv_bankisExists;

    // Automatic Variable Declarations
    const int auto4BE5EDEA_ae = 14;
    const int auto4BE5EDEA_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_InitStatsLeaderboard, true, true);
    if ((gv_regame == true)) {
        TriggerExecute(gt_CheckAchievements, true, false);
        TriggerExecute(gt_CheckStatusofRewards, true, false);
        lv_i = 1;
        for ( ; ( (auto4BE5EDEA_ai >= 0 && lv_i <= auto4BE5EDEA_ae) || (auto4BE5EDEA_ai < 0 && lv_i >= auto4BE5EDEA_ae) ) ; lv_i += auto4BE5EDEA_ai ) {
            if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                DialogSetVisible(gv_profileDialogMain, PlayerGroupSingle(lv_i), true);
            }

        }
    }
    else {
        TriggerExecute(gt_InitProfile, true, false);
    }
    TriggerEnable(gt_ProfileAchievementsButtonsPressed, true);
    TriggerEnable(gt_ProfileButtonPressed, true);
    TriggerEnable(gt_ProfileButtonsPressed, true);
    TriggerEnable(gt_ProfileCloseButtonPressed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitBanks_Init () {
    gt_InitBanks = TriggerCreate("gt_InitBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regame Init
//--------------------------------------------------------------------------------------------------
bool gt_RegameInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_playerCount;

    // Automatic Variable Declarations
    const int autoFD49A04E_ae = 14;
    int autoFD49A04E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoFD49A04E_var = 1;
    for ( ; autoFD49A04E_var <= autoFD49A04E_ae; autoFD49A04E_var += 1 ) {
        gv_playerAudioCmdGG[autoFD49A04E_var] = false;
    }
    GameSetGlobalTimeScale(1.0);
    gv_timescalevalue = 1.0;
    gv_regameDecisioninProgress = true;
    TriggerEnable(gt_LeaveGameOptionESC, true);
    TriggerEnable(gt_WaitSpawnHunter, false);
    TriggerStop(gt_WaitSpawnHunter);
    TriggerEnable(gt_VoteButtonPressed, true);
    TriggerEnable(gt_RegameLeaveButtonPressed, true);
    DialogDestroy(gv_voteBoard);
    DialogDestroy(gv_regameVoteBoard);
    TimerStart(gv_voteTimerRegame, gv_voteTime, false, c_timeGame);
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupActive(), libNtve_ge_AllianceSetting_Enemy);
    DialogCreate(400, 400, c_anchorTop, 0, 50, true);
    gv_regameVoteBoard = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/3D1B78E9"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, -50, 60, StringExternal("Param/Value/CAEB2A7D"), Color(100,100,100), false, 2.0);
    gv_regamePlayerTextItem = DialogControlLastCreated();
    lv_playerCount = (StringExternal("Param/Value/697D3355") + IntToText(PlayerGroupCount(PlayerGroupActive())) + StringExternal("Param/Value/AF7A31AA"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorCenter, 100, 50, lv_playerCount, Color(100,100,100), false, 2.0);
    gv_regamePlayerCountItem = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorCenter, 0, 140, StringExternal("Param/Value/01FF2373"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 125);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 15.0, PlayerGroupAll());
    gv_progressBar = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerEnable(gt_UpdateProgressBarAllActivePlayersREGAME, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegameInit_Init () {
    gt_RegameInit = TriggerCreate("gt_RegameInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regame Leave Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_RegameLeaveTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_regameYes;
    int lv_regameNo;
    bool lv_regameVote;

    // Automatic Variable Declarations
    const int auto7A8CF5F9_ae = 14;
    const int auto7A8CF5F9_ai = 1;
    const int auto4054A958_ae = 15;
    const int auto4054A958_ai = 1;
    const int auto8BC92D68_ae = 9;
    const int auto8BC92D68_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_UpdateProgressBarAllActivePlayersREGAME, false);
    TriggerEnable(gt_LeaveGameOptionESC, false);
    gv_regameDecisioninProgress = false;
    TriggerEnable(gt_RegameLeaveButtonPressed, false);
    lv_i = 1;
    for ( ; ( (auto7A8CF5F9_ai >= 0 && lv_i <= auto7A8CF5F9_ae) || (auto7A8CF5F9_ai < 0 && lv_i >= auto7A8CF5F9_ae) ) ; lv_i += auto7A8CF5F9_ai ) {
        if ((gv_profileDialogMain != c_invalidDialogId)) {
            DialogSetVisible(gv_profileDialogMain, PlayerGroupSingle(lv_i), false);
        }

        if ((gv_chooseHelpSideDialog != c_invalidDialogId)) {
            DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(lv_i), false);
        }

    }
    DialogDestroy(gv_voteBoard);
    DialogDestroy(gv_regameVoteBoard);
    DialogDestroy(gv_voteKickDialog);
    DialogDestroy(gv_voteKickDialogMain);
    DialogDestroy(gv_voteKickVoteBoard);
    DialogDestroy(gv_marketPricesDialog);
    DialogDestroy(gv_xPBarDialog);
    DialogDestroy(gv_gameplayOptionsMainDialog);
    DialogDestroy(gv_gameplayOptionsDialog);
    DialogDestroy(gv_suggesteddialog);
    DialogDestroy(gv_zealotpopup);
    DialogDestroy(gv_ninjadialog);
    DialogDestroy(gv_basedialog);
    BoardDestroy(gv_leaderboard);
    lv_regameVote = true;
    gv_regamePlayerTextItem = c_invalidDialogControlId;
    gv_regameLeaveButton = c_invalidDialogControlId;
    gv_regamePlayerCountItem = c_invalidDialogControlId;
    lv_i = 0;
    for ( ; ( (auto4054A958_ai >= 0 && lv_i <= auto4054A958_ae) || (auto4054A958_ai < 0 && lv_i >= auto4054A958_ae) ) ; lv_i += auto4054A958_ai ) {
        BoardDestroy(gv_statsLeaderboard[lv_i]);
        gv_votePlayerValue[lv_i] = -1;
    }
    lv_i = 0;
    for ( ; ( (auto8BC92D68_ai >= 0 && lv_i <= auto8BC92D68_ae) || (auto8BC92D68_ai < 0 && lv_i >= auto8BC92D68_ae) ) ; lv_i += auto8BC92D68_ai ) {
        gv_votesCountButton[lv_i] = 0;
        gv_voteButtonDialogItem[lv_i] = c_invalidDialogControlId;
    }
    if ((lv_regameVote == true)) {
        TriggerExecute(gt_RegameInitTriggers, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegameLeaveTimerExpires_Init () {
    gt_RegameLeaveTimerExpires = TriggerCreate("gt_RegameLeaveTimerExpires_Func");
    TriggerAddEventTimer(gt_RegameLeaveTimerExpires, gv_voteTimerRegame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regame Init Triggers
//--------------------------------------------------------------------------------------------------
bool gt_RegameInitTriggers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6CCB527C_g;
    int auto6CCB527C_u;
    unit auto6CCB527C_var;
    unitgroup autoB2D2CEBB_g;
    int autoB2D2CEBB_u;
    unit autoB2D2CEBB_var;
    unitgroup auto878C6981_g;
    int auto878C6981_u;
    unit auto878C6981_var;
    unitgroup autoE3EC7BA1_g;
    int autoE3EC7BA1_u;
    unit autoE3EC7BA1_var;
    unitgroup auto9E3FEFDE_g;
    int auto9E3FEFDE_u;
    unit auto9E3FEFDE_var;
    unitgroup autoF11B3D26_g;
    int autoF11B3D26_u;
    unit autoF11B3D26_var;
    unitgroup auto2BA5C953_g;
    int auto2BA5C953_u;
    unit auto2BA5C953_var;
    unitgroup auto9EDB022A_g;
    int auto9EDB022A_u;
    unit auto9EDB022A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SpeedRegion, false);
    TriggerEnable(gt_ZealotDies, false);
    TriggerEnable(gt_HunterDies, false);
    TriggerEnable(gt_ReplenishMinerals, false);
    TriggerEnable(gt_ProbeLefttheGameDead, false);
    TriggerEnable(gt_ZealotLefttheGameDead, false);
    TriggerEnable(gt_RenderLeaderboardTime, false);
    TriggerEnable(gt_WriteHoursandresourcesAchievements, false);
    TriggerEnable(gt_CheckSpendResourcesAchievements, false);
    TriggerExecute(gt_TurnoffPrivateCommands, true, false);
    libNtve_gf_RemoveDeathModelsinRegionImmediately(RegionEntireMap());
    auto6CCB527C_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHover), 0, 0, 0), 0);
    auto6CCB527C_u = UnitGroupCount(auto6CCB527C_g, c_unitCountAll);
    for (;; auto6CCB527C_u -= 1) {
        auto6CCB527C_var = UnitGroupUnitFromEnd(auto6CCB527C_g, auto6CCB527C_u);
        if (auto6CCB527C_var == null) { break; }
        UnitRemove(auto6CCB527C_var);
    }
    autoB2D2CEBB_g = UnitGroup("TempZealot", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoB2D2CEBB_u = UnitGroupCount(autoB2D2CEBB_g, c_unitCountAll);
    for (;; autoB2D2CEBB_u -= 1) {
        autoB2D2CEBB_var = UnitGroupUnitFromEnd(autoB2D2CEBB_g, autoB2D2CEBB_u);
        if (autoB2D2CEBB_var == null) { break; }
        UnitRemove(autoB2D2CEBB_var);
    }
    auto878C6981_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto878C6981_u = UnitGroupCount(auto878C6981_g, c_unitCountAll);
    for (;; auto878C6981_u -= 1) {
        auto878C6981_var = UnitGroupUnitFromEnd(auto878C6981_g, auto878C6981_u);
        if (auto878C6981_var == null) { break; }
        if ((UnitGetOwner(auto878C6981_var) != 0)) {
            UnitRemove(auto878C6981_var);
        }

    }
    autoE3EC7BA1_g = UnitGroup("Factory", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoE3EC7BA1_u = UnitGroupCount(autoE3EC7BA1_g, c_unitCountAll);
    for (;; autoE3EC7BA1_u -= 1) {
        autoE3EC7BA1_var = UnitGroupUnitFromEnd(autoE3EC7BA1_g, autoE3EC7BA1_u);
        if (autoE3EC7BA1_var == null) { break; }
        UnitRemove(autoE3EC7BA1_var);
    }
    auto9E3FEFDE_g = UnitGroup("PalletGas", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto9E3FEFDE_u = UnitGroupCount(auto9E3FEFDE_g, c_unitCountAll);
    for (;; auto9E3FEFDE_u -= 1) {
        auto9E3FEFDE_var = UnitGroupUnitFromEnd(auto9E3FEFDE_g, auto9E3FEFDE_u);
        if (auto9E3FEFDE_var == null) { break; }
        UnitRemove(auto9E3FEFDE_var);
    }
    autoF11B3D26_g = UnitGroup("TerrazineBonus", 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF11B3D26_u = UnitGroupCount(autoF11B3D26_g, c_unitCountAll);
    for (;; autoF11B3D26_u -= 1) {
        autoF11B3D26_var = UnitGroupUnitFromEnd(autoF11B3D26_g, autoF11B3D26_u);
        if (autoF11B3D26_var == null) { break; }
        UnitRemove(autoF11B3D26_var);
    }
    auto2BA5C953_g = UnitGroup("MineralField", 0, RegionPlayableMap(), UnitFilter(0, 0, 0, 0), 0);
    auto2BA5C953_u = UnitGroupCount(auto2BA5C953_g, c_unitCountAll);
    for (;; auto2BA5C953_u -= 1) {
        auto2BA5C953_var = UnitGroupUnitFromEnd(auto2BA5C953_g, auto2BA5C953_u);
        if (auto2BA5C953_var == null) { break; }
        UnitRemove(auto2BA5C953_var);
        libNtve_gf_UnitCreateFacingPoint(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto2BA5C953_var), UnitGetPosition(auto2BA5C953_var));
    }
    auto9EDB022A_g = UnitGroup("RichMineralField", 0, RegionPlayableMap(), UnitFilter(0, 0, 0, 0), 0);
    auto9EDB022A_u = UnitGroupCount(auto9EDB022A_g, c_unitCountAll);
    for (;; auto9EDB022A_u -= 1) {
        auto9EDB022A_var = UnitGroupUnitFromEnd(auto9EDB022A_g, auto9EDB022A_u);
        if (auto9EDB022A_var == null) { break; }
        UnitRemove(auto9EDB022A_var);
        libNtve_gf_UnitCreateFacingPoint(1, "RichMineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto9EDB022A_var), UnitGetPosition(auto9EDB022A_var));
    }
    TriggerExecute(gt_RegameInitVariables, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegameInitTriggers_Init () {
    gt_RegameInitTriggers = TriggerCreate("gt_RegameInitTriggers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regame Init Variables
//--------------------------------------------------------------------------------------------------
bool gt_RegameInitVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto99AE9F69_ae = 15;
    int auto99AE9F69_var;
    const int autoBE1A9DD6_ae = 5;
    const int autoBE1A9DD6_ai = 1;
    int auto0BC712EB_ae;
    int auto0BC712EB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto99AE9F69_var = 0;
    for ( ; auto99AE9F69_var <= auto99AE9F69_ae; auto99AE9F69_var += 1 ) {
        if (((gf_PlayerIsDeveloper(auto99AE9F69_var) == false) && (gf_PlayerIsModerator(auto99AE9F69_var) == false) && (gf_PlayerIsDonor(auto99AE9F69_var) == false))) {
            DialogControlSetEnabled(gv_voteKickPlayers[auto99AE9F69_var], PlayerGroupAll(), true);
        }

        libNtve_gf_SetUpgradeLevelForPlayer(auto99AE9F69_var, "MovementSpeedLevel1", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(auto99AE9F69_var, "MovementSpeedLevel2", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(auto99AE9F69_var, "Blink", 0);
        TechTreeAbilityAllow(auto99AE9F69_var, AbilityCommand("ProtossBuild", 0), true);
        TechTreeAbilityAllow(auto99AE9F69_var, AbilityCommand("ProtossBuild", 15), true);
        TechTreeAbilityAllow(auto99AE9F69_var, AbilityCommand("ProtossBuild", 25), true);
        CatalogFieldValueSet(c_gameCatalogEffect, "ScannerSweep", "RevealRadius", auto99AE9F69_var, "13");
        CatalogFieldValueSet(c_gameCatalogActor, "ScannerSweepVisual", "Range", auto99AE9F69_var, "13");
        CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Sight", auto99AE9F69_var, "9");
        CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", auto99AE9F69_var, "3.5");
        CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", auto99AE9F69_var, "350");
        lv_i = 1;
        for ( ; ( (autoBE1A9DD6_ai >= 0 && lv_i <= autoBE1A9DD6_ae) || (autoBE1A9DD6_ai < 0 && lv_i >= autoBE1A9DD6_ae) ) ; lv_i += autoBE1A9DD6_ai ) {
            TechTreeAbilityAllow(auto99AE9F69_var, gv_arrayLearnAbilities[1][lv_i], true);
            TechTreeAbilityAllow(auto99AE9F69_var, gv_arrayLearnAbilities[2][lv_i], true);
        }
        TextTagDestroy(gv_playersLabelRanks[auto99AE9F69_var]);
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "155");
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "-145");
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "4050");
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "-1950");
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "461000");
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto99AE9F69_var, "-5890");
        CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", auto99AE9F69_var, "12");
        PlayerModifyPropertyInt(auto99AE9F69_var, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(auto99AE9F69_var, c_playerPropVespene, c_playerPropOperSetTo, 0);
        VisEnable(c_visTypeFog, true);
        VisExploreArea(auto99AE9F69_var, RegionEntireMap(), false, false);
        gv_playerAudioCmdGG[auto99AE9F69_var] = false;
        gv_resourcesPerSecondInitComplete = false;
        DialogDestroy(gv_resourcePerSecond[auto99AE9F69_var]);
        DialogDestroy(gv_probepopup[auto99AE9F69_var]);
        gv_turretcount[auto99AE9F69_var] = 0;
        gv_poplevel[auto99AE9F69_var] = 0;
        gv_popupswitch3[auto99AE9F69_var] = 0;
        gv_ninjaBuffActiveFlag[auto99AE9F69_var] = 0;
        gv_hunterStatus[auto99AE9F69_var] = false;
        gv_choosed[auto99AE9F69_var] = false;
        gv_probeSpiritStatus[auto99AE9F69_var] = false;
        gv_damage[auto99AE9F69_var] = 5;
        gv_humanNumberPlayer[auto99AE9F69_var] = 0;
        gv_vampireNumberPlayer[auto99AE9F69_var] = 0;
        gv_rowofPlayer[auto99AE9F69_var] = 0;
        gv_feed[auto99AE9F69_var] = 0;
        gv_diedontheDamnLand[auto99AE9F69_var] = false;
        gv_levelofPlayerHuman[auto99AE9F69_var] = 0;
        gv_levelofPlayerTotal[auto99AE9F69_var] = 0;
        gv_levelofPlayerVampire[auto99AE9F69_var] = 0;
        gv_numberofKilledHumans[auto99AE9F69_var] = 0;
        gv_playerWin[auto99AE9F69_var] = false;
        gv_pointsforLossHuman[auto99AE9F69_var] = 0;
        gv_pointsforLossTotal[auto99AE9F69_var] = 0;
        gv_pointsforLossVampire[auto99AE9F69_var] = 0;
        gv_pointsforWinHuman[auto99AE9F69_var] = 0;
        gv_pointsforWinTotal[auto99AE9F69_var] = 0;
        gv_pointsforWinVampire[auto99AE9F69_var] = 0;
        gv_pointsHuman[auto99AE9F69_var] = 0;
        gv_pointsTotal[auto99AE9F69_var] = 0;
        gv_pointsVampire[auto99AE9F69_var] = 0;
        gv_probeDead[auto99AE9F69_var] = false;
        gv_probeModel[auto99AE9F69_var] = 1;
        gv_probes[auto99AE9F69_var] = null;
        gv_profileofPlayer[auto99AE9F69_var] = 0;
        gv_statsLeaderboard[auto99AE9F69_var] = c_boardNone;
        gv_vampireNumberPlayer[auto99AE9F69_var] = 0;
        gv_votePlayerValue[auto99AE9F69_var] = -1;
        gv_xPinGameforHuman[auto99AE9F69_var] = 0;
        gv_xPinGameforTotal[auto99AE9F69_var] = 100;
        gv_xPinGameforVampire[auto99AE9F69_var] = 0;
        gv_zealotModel[auto99AE9F69_var] = 1;
        gv_zealots[auto99AE9F69_var] = null;
        gv_side[auto99AE9F69_var] = "Probe";
        gv_voteKickVoteBoardVotedAlready[auto99AE9F69_var] = false;
        gv_bankisInvalid[auto99AE9F69_var] = false;
        gv_learnedAbilities[auto99AE9F69_var] = 0;
        gv_announceswitch[auto99AE9F69_var] = 0;
        TimerWindowShow(gv_hunterspawnwindow[auto99AE9F69_var], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[auto99AE9F69_var]);
        TimerPause(gv_timerRemove[auto99AE9F69_var], true);
        TimerPause(gv_timerProbeSpiritDies[auto99AE9F69_var], true);
        TimerPause(gv_timerHunterDies[auto99AE9F69_var], true);
        TimerWindowDestroy(gv_timerWindowHunterDies[auto99AE9F69_var]);
        TimerWindowDestroy(gv_timerWindowProbeSpiritDies[auto99AE9F69_var]);
        gv_voteKickCooldownExpired[auto99AE9F69_var] = true;
        TimerPause(gv_voteKickCooldown[auto99AE9F69_var], true);
    }
    auto0BC712EB_ae = gv_maxMaps1;
    auto0BC712EB_var = 0;
    for ( ; auto0BC712EB_var <= auto0BC712EB_ae; auto0BC712EB_var += 1 ) {
        gv_votesCountButton[auto0BC712EB_var] = 0;
    }
    PlayerGroupClear(gv_playerGroupHunters);
    PlayerGroupClear(gv_premiumZealots);
    TimerPause(gv_timerChooseHelpSide, true);
    TimerPause(gv_kickVoteTimer, true);
    TimerPause(gv_spawnVampires, true);
    TimerWindowDestroy(gv_spawnVampiresWindow);
    TimerWindowDestroy(gv_timerWindowChooseHelpSide);
    gv_timescalemode = 1;
    gv_pointsAverageHuman = 0;
    gv_playersUsedforAverageProbePoints = 0;
    gv_resourcesPerSecondInitComplete = false;
    gv_timescalevalue = 1.0;
    gv_premiumzswitch = 0;
    gv_popupswitch = 0;
    gv_popupswitch2 = 0;
    gv_ultraWall = false;
    gv_megaWall = false;
    gv_powerWall = false;
    gv_finalWall = false;
    gv_turretLevel7 = false;
    gv_turretLevel11 = false;
    gv_turretLevel13 = false;
    gv_turretLevelFinal = false;
    gv_genMax = false;
    gv_ultraMiner = false;
    gv_legendaryMiner = false;
    gv_perfectMiner = false;
    gv_ludicrousMiner = false;
    gv_mineralFieldMinedOut = false;
    gv_dominionTrain = false;
    gv_buildaAutomatedMineLevel6 = false;
    gv_buildaAutomatedMineLevel7 = false;
    gv_buildaAutomatedMineLevel8 = false;
    gv_zealotVespene = false;
    gv_zealotFinalBlade = false;
    gv_leaderboard = c_boardNone;
    gv_gameTimeMinutes = 0;
    gv_gameTimeSeconds = 0;
    gv_gameTimeMinutesText = StringExternal("Param/Value/0375E181");
    gv_startRecording = false;
    gv_regame = true;
    gv_rankedGame = false;
    gv_totalFeed = 0;
    gv_totalFeedRowLeaderboard = 0;
    gv_spawnVampiresWindow = c_timerWindowNone;
    gv_gameEnd = false;
    gv_missionTime = -1.0;
    gv_chosenMap = 0;
    gv_centerPoint = null;
    gv_enableTrading = false;
    gv_height = 100;
    gv_kickTimerTime = 0;
    gv_kickedPlayer = 0;
    gv_numberofVotesNo = 0;
    gv_numberofVotesYes = 0;
    gv_playerGroupProbes = PlayerGroupEmpty();
    gv_playerGroupZealots = PlayerGroupEmpty();
    gv_probesWins = false;
    gv_buy10MineralsPrice = 155;
    gv_sell10MineralsPrice = 145;
    gv_voteKickVoteBoardStarted = false;
    gv_chaosswitch = 0;
    gv_largeswitch = 0;
    gv_maxHuntersAllowed = 2;
    TriggerEnable(gt_GameplayOptionsButtonPressed, false);
    TriggerEnable(gt_DefaultButtonPressed, false);
    TriggerEnable(gt_ReturntoGameButtonPressed, false);
    TriggerEnable(gt_ChooseHelpSidePressed, false);
    TriggerEnable(gt_ProfileAchievementsButtonsPressed, false);
    TriggerEnable(gt_ProfileButtonPressed, false);
    TriggerEnable(gt_ProfileButtonsPressed, false);
    TriggerEnable(gt_ProfileCloseButtonPressed, false);
    TriggerEnable(gt_VoteKickPressed, false);
    TriggerEnable(gt_SpiritVotePressed, false);
    TriggerEnable(gt_RemoverPlayerPressed, false);
    TriggerEnable(gt_ForceSalvageFeederPressed, false);
    TriggerEnable(gt_KickPlayerPressed, false);
    TriggerEnable(gt_KickVoteYesNo, false);
    TriggerExecute(gt_MapInitialization, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegameInitVariables_Init () {
    gt_RegameInitVariables = TriggerCreate("gt_RegameInitVariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Regame Leave Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_RegameLeaveButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_regameLeaveButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemDesaturated(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemDesaturationColor(EventDialogControl(), Color(100,100,100), PlayerGroupSingle(EventPlayer()));
    if ((((gv_side[EventPlayer()] == "Probe") && (gv_probesWins == true)) || ((gv_side[EventPlayer()] == "Zealot") && (gv_probesWins == false)))) {
        UISetWorldVisible(PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(EventPlayer()));
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeSupply, false);
        GameOver(EventPlayer(), c_gameOverVictory, false, true);
    }
    else {
        UISetWorldVisible(PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(EventPlayer()));
        UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeSupply, false);
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegameLeaveButtonPressed_Init () {
    gt_RegameLeaveButtonPressed = TriggerCreate("gt_RegameLeaveButtonPressed_Func");
    TriggerEnable(gt_RegameLeaveButtonPressed, false);
    TriggerAddEventDialogControl(gt_RegameLeaveButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Game Option - ESC
//--------------------------------------------------------------------------------------------------
bool gt_LeaveGameOptionESC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_regameDecisioninProgress == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIShowStandardMenu(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveGameOptionESC_Init () {
    gt_LeaveGameOptionESC = TriggerCreate("gt_LeaveGameOptionESC_Func");
    TriggerEnable(gt_LeaveGameOptionESC, false);
    TriggerAddEventKeyPressed(gt_LeaveGameOptionESC, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Premium Probe
//--------------------------------------------------------------------------------------------------
bool gt_CheckPremiumProbe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CheckPremiumProbe();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckPremiumProbe_Init () {
    gt_CheckPremiumProbe = TriggerCreate("gt_CheckPremiumProbe_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Premium Zealot
//--------------------------------------------------------------------------------------------------
bool gt_CheckPremiumZealot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CheckPremiumZealot();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckPremiumZealot_Init () {
    gt_CheckPremiumZealot = TriggerCreate("gt_CheckPremiumZealot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Code Region Add
//--------------------------------------------------------------------------------------------------
bool gt_CodeRegionAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 15) && ((UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "PrisonZealot") || (UnitGetType(EventUnit()) == "Predator")) && ((RandomInt(0, 4) == 2) || (gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true) || (PlayerHandle(EventPlayer()) == "1-S2-1-2873389"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(true, EventUnitRegion(), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CodeRegionAdd_Init () {
    gt_CodeRegionAdd = TriggerCreate("gt_CodeRegionAdd_Func");
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(205), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(206), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(207), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(208), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(209), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(210), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(211), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(212), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(213), true);
    TriggerAddEventUnitRegion(gt_CodeRegionAdd, null, RegionFromId(214), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Code Region Remove
//--------------------------------------------------------------------------------------------------
bool gt_CodeRegionRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, EventUnitRegion(), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CodeRegionRemove_Init () {
    gt_CodeRegionRemove = TriggerCreate("gt_CodeRegionRemove_Func");
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(205), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(206), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(207), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(208), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(209), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(210), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(211), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(212), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(213), false);
    TriggerAddEventUnitRegion(gt_CodeRegionRemove, null, RegionFromId(214), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -mysteriousthing
//--------------------------------------------------------------------------------------------------
bool gt_mysteriousthing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-lookundertree")) {
        if ((gv_mTthing == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FD0779F8"));
            gv_mTlookundertree = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E69B5A49"));
        }
    }

    if ((EventChatMessage(false) == "-getmysterybox")) {
        if ((gv_mTlookundertree == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/71300F9E"));
            gv_mTgetmysterybox = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3E29045D"));
        }
    }

    if ((EventChatMessage(false) == "-openthebox")) {
        if ((gv_mTgetmysterybox == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9A41FAE6"));
            gv_mTopenthebox = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/047149F8"));
        }
    }

    if ((EventChatMessage(false) == "-getcode")) {
        if ((gv_mTopenthebox == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/04659E9E"));
            gv_mTgetcode = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/36425CFE"));
        }
    }

    if ((EventChatMessage(false) == "-runcode")) {
        if ((gv_mTgetcode == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D5CA8B49"));
            gv_mTruncode = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/349EE2DF"));
        }
    }

    if ((EventChatMessage(false) == "-rungalscript")) {
        if ((gv_mTruncode == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/654DB738"));
            gv_mTrunGalScript = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/673224E7"));
        }
    }

    if ((EventChatMessage(false) == "-checkmodelskin")) {
        if ((gv_mTrunGalScript == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0E07203A"));
            gv_mTcheckModelSkin = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0759E6FF"));
        }
    }

    if ((EventChatMessage(false) == "-showskin")) {
        if ((gv_mTcheckModelSkin == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A23119C2"));
            gv_mTshowSkin = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3173755C"));
        }
    }

    if ((EventChatMessage(false) == "-readtatts")) {
        if ((gv_mTshowSkin == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/547E9F4C"));
            gv_mTreadtatts = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DBFDC8CF"));
        }
    }

    if ((EventChatMessage(false) == "-whatsthecode?")) {
        if ((gv_mTreadtatts == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1FCCB1F2"));
            gv_mTwhatsthecode = true;
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/A736923F"));
        }
    }

    if ((EventChatMessage(false) == "-showthecode")) {
        if ((gv_mTwhatsthecode == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B53E762C"));
            gv_mTthing = false;
            libNtve_gf_MakeUnitInvulnerable(UnitFromId(1183), false);
            UnitSetState(UnitFromId(1183), c_unitStateHidden, false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/79AFFC2A"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mysteriousthing_Init () {
    gt_mysteriousthing = TriggerCreate("gt_mysteriousthing_Func");
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-lookundertree", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-getmysterybox", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-openthebox", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-getcode", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-runcode", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-rungalscript", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-checkmodelskin", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-showskin", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-readtatts", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-whatsthecode?", true);
    TriggerAddEventChatMessage(gt_mysteriousthing, c_playerAny, "-showthecode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -bar Text Command
//--------------------------------------------------------------------------------------------------
bool gt_barTextCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mapNumber;
    int lv_playerNumber;
    string lv_string;
    bool lv_test;
    int lv_i;
    int lv_colorNumber;

    // Automatic Variable Declarations
    string autoCDD19F70_val;
    const int auto34767E41_ae = 14;
    int auto34767E41_var;
    const int auto36E39F8D_ae = 14;
    int auto36E39F8D_var;
    const int auto4390D16F_ae = 14;
    const int auto4390D16F_ai = 1;
    unitgroup auto1AC418B3_g;
    int auto1AC418B3_u;
    unit auto1AC418B3_var;
    const int autoAAA58477_ae = 14;
    const int autoAAA58477_ai = 1;
    unitgroup auto84DCF6F4_g;
    int auto84DCF6F4_u;
    unit auto84DCF6F4_var;
    playergroup autoC4301D10_g;
    int autoC4301D10_var;

    // Variable Initialization
    lv_mapNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!((((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)) && ((gv_chosenMap == 5) || (gv_chosenMap == 6) || (gv_chosenMap == 10))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringWord(EventChatMessage(false), 2);
    autoCDD19F70_val = StringCase(lv_string, false);
    if (autoCDD19F70_val == "open") {
        gf_OpenTheBar();
        auto34767E41_var = 1;
        for ( ; auto34767E41_var <= auto34767E41_ae; auto34767E41_var += 1 ) {
            if ((gv_barPlayerHasInvite[auto34767E41_var] == true)) {
                UIDisplayMessage(PlayerGroupSingle(auto34767E41_var), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F1F290EF")));
            }

        }
    }
    else if (autoCDD19F70_val == "close") {
        gf_CloseTheBar();
        auto36E39F8D_var = 1;
        for ( ; auto36E39F8D_var <= auto36E39F8D_ae; auto36E39F8D_var += 1 ) {
            if ((gv_barPlayerHasInvite[auto36E39F8D_var] == true)) {
                UIDisplayMessage(PlayerGroupSingle(auto36E39F8D_var), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5BBD1443")));
            }

        }
    }
    else if (autoCDD19F70_val == "invite") {
        lv_string = (StringWord(EventChatMessage(false), 3) + StringWord(EventChatMessage(false), 4));
        lv_colorNumber = gf_GetStringColorNumber(lv_string);
        lv_i = 1;
        for ( ; ( (auto4390D16F_ai >= 0 && lv_i <= auto4390D16F_ae) || (auto4390D16F_ai < 0 && lv_i >= auto4390D16F_ae) ) ; lv_i += auto4390D16F_ai ) {
            if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                lv_playerNumber = lv_i;
                lv_i = 15;
            }

        }
        if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
            gv_barPlayerHasInvite[lv_playerNumber] = true;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/47E42842") + TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/BBFFB369")));
            UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/621AC6C7")));
        }
        else {
            lv_playerNumber = StringToInt(lv_string);
            if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                gv_barPlayerHasInvite[lv_playerNumber] = true;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/BCAE4C4A") + TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/52B5F6AB")));
                UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/845B71D7")));
            }
            else {
                auto1AC418B3_g = UnitGroupSelected(EventPlayer());
                auto1AC418B3_u = UnitGroupCount(auto1AC418B3_g, c_unitCountAll);
                for (;; auto1AC418B3_u -= 1) {
                    auto1AC418B3_var = UnitGroupUnitFromEnd(auto1AC418B3_g, auto1AC418B3_u);
                    if (auto1AC418B3_var == null) { break; }
                    gv_barPlayerHasInvite[UnitGetOwner(auto1AC418B3_var)] = true;
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/92E4F90D") + TextWithColor(PlayerName(UnitGetOwner(auto1AC418B3_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(auto1AC418B3_var), false))) + StringExternal("Param/Value/99E7E0B4")));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto1AC418B3_var)), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/31C340BF")));
                }
            }
        }
    }
    else if (autoCDD19F70_val == "remove") {
        lv_string = (StringWord(EventChatMessage(false), 3) + StringWord(EventChatMessage(false), 4));
        lv_colorNumber = gf_GetStringColorNumber(lv_string);
        lv_i = 1;
        for ( ; ( (autoAAA58477_ai >= 0 && lv_i <= autoAAA58477_ae) || (autoAAA58477_ai < 0 && lv_i >= autoAAA58477_ae) ) ; lv_i += autoAAA58477_ai ) {
            if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                lv_playerNumber = lv_i;
                lv_i = 15;
            }

        }
        if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
            gv_barPlayerHasInvite[lv_playerNumber] = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/A15BE3CB") + TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/CBB7C02A")));
            UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/77D53E2D")));
        }
        else {
            lv_playerNumber = StringToInt(StringWord(EventChatMessage(false), 3));
            if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                gv_barPlayerHasInvite[lv_playerNumber] = false;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/896D3DF6") + TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/6237A085")));
                UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/28799D51")));
            }
            else {
                auto84DCF6F4_g = UnitGroupSelected(EventPlayer());
                auto84DCF6F4_u = UnitGroupCount(auto84DCF6F4_g, c_unitCountAll);
                for (;; auto84DCF6F4_u -= 1) {
                    auto84DCF6F4_var = UnitGroupUnitFromEnd(auto84DCF6F4_g, auto84DCF6F4_u);
                    if (auto84DCF6F4_var == null) { break; }
                    gv_barPlayerHasInvite[UnitGetOwner(auto84DCF6F4_var)] = false;
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/2258D6A1") + TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/A2F78BF7")));
                    UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/36FB5835")));
                }
            }
        }
        autoC4301D10_g = gv_playerGroupZealots;
        autoC4301D10_var = -1;
        while (true) {
            autoC4301D10_var = PlayerGroupNextPlayer(autoC4301D10_g, autoC4301D10_var);
            if (autoC4301D10_var < 0) { break; }
            if ((UnitGetType(gv_zealots[autoC4301D10_var]) == "PrisonZealot")) {
                gv_barPlayerHasInvite[autoC4301D10_var] = true;
            }

        }
        if (((RegionContainsPoint(RegionFromId(200), UnitGetPosition(gv_zealots[lv_playerNumber])) == true) || (RegionContainsPoint(RegionFromId(200), UnitGetPosition(gv_probeSpirit[lv_playerNumber])) == true) || (RegionContainsPoint(RegionFromId(200), UnitGetPosition(gv_probes[lv_playerNumber])) == true))) {
            UnitSetPosition(gv_probes[lv_playerNumber], RegionRandomPoint(RegionFromId(201)), true);
            UnitSetPosition(gv_probeSpirit[lv_playerNumber], RegionRandomPoint(RegionFromId(201)), true);
            UnitSetPosition(gv_zealots[lv_playerNumber], RegionRandomPoint(RegionFromId(201)), true);
            UnitIssueOrder(gv_probes[lv_playerNumber], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_probeSpirit[lv_playerNumber], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_zealots[lv_playerNumber], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D2361D1D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_barTextCommand_Init () {
    gt_barTextCommand = TriggerCreate("gt_barTextCommand_Func");
    TriggerAddEventChatMessage(gt_barTextCommand, c_playerAny, "-bar", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bar - Enter
//--------------------------------------------------------------------------------------------------
bool gt_BarEnter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region autoC03419D2_val;
    unitgroup autoACABF1D1_g;
    int autoACABF1D1_u;
    unit autoACABF1D1_var;
    unitgroup auto1D6032CF_g;
    int auto1D6032CF_u;
    unit auto1D6032CF_var;
    int auto2A9502F7_val;

    // Conditions
    if (testConds) {
        if (!(((gv_barIsOpen == true) && ((gv_chosenMap == 5) || (gv_chosenMap == 6) || (gv_chosenMap == 10))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC03419D2_val = EventUnitRegion();
    if (autoC03419D2_val == RegionFromId(201)) {
        if ((gv_barPlayerHasInvite[EventPlayer()] == false)) {
            SoundPlayOnUnit(SoundLink("ModUtilityVoiceModUtilityVoice00127", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            autoACABF1D1_g = UnitGroup("CheckStationVerticalOpened", 0, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
            autoACABF1D1_u = UnitGroupCount(autoACABF1D1_g, c_unitCountAll);
            for (;; autoACABF1D1_u -= 1) {
                autoACABF1D1_var = UnitGroupUnitFromEnd(autoACABF1D1_g, autoACABF1D1_u);
                if (autoACABF1D1_var == null) { break; }
                UnitSetState(autoACABF1D1_var, c_unitStateHidden, true);
            }
            auto1D6032CF_g = UnitGroup("CheckStationVertical", 0, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
            auto1D6032CF_u = UnitGroupCount(auto1D6032CF_g, c_unitCountAll);
            for (;; auto1D6032CF_u -= 1) {
                auto1D6032CF_var = UnitGroupUnitFromEnd(auto1D6032CF_g, auto1D6032CF_u);
                if (auto1D6032CF_var == null) { break; }
                UnitSetState(auto1D6032CF_var, c_unitStateHidden, false);
            }
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            SoundPlayOnUnit(SoundLink("zVO_TerranWarhound_MercCommander_008", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
        }

    }
    else if (autoC03419D2_val == RegionFromId(200)) {
        if ((gv_barPlayerHasInvite[EventPlayer()] == false)) {
            UnitSetPosition(EventUnit(), RegionRandomPoint(RegionFromId(201)), true);
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            gv_barMessagesForPlayer[EventPlayer()] += 1;
            auto2A9502F7_val = gv_barMessagesForPlayer[EventPlayer()];
            if (auto2A9502F7_val == 1) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/6A2011C0"));
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/4B0A371A"));
            }
            else if (auto2A9502F7_val == 2) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/084584BC"));
            }
            else if (auto2A9502F7_val == 3) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/67583D48"));
                UnitBehaviorAdd(EventUnit(), "TempSlow", EventUnit(), 1);
            }
            else {
                UnitBehaviorAdd(EventUnit(), "TempSlow", EventUnit(), 1);
            }
        }
        else {
            SoundPlayOnUnit(SoundLink("ModUtilityVoiceModUtilityVoice00128", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 67.0, 0.0);
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            SoundPlayOnUnit(SoundLink("ModUtilityVoiceModUtilityVoice00129", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 67.0, 0.0);
            if (((UnitGetType(EventUnit()) == "Probe") || (UnitGetType(EventUnit()) == "HighTemplar") || (UnitGetType(EventUnit()) == "PrisonZealot") || (UnitGetType(EventUnit()) == "Predator"))) {
                gf_SwapModel(EventPlayer(), EventUnit(), "Zealot3");
            }

        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarEnter_Init () {
    gt_BarEnter = TriggerCreate("gt_BarEnter_Func");
    TriggerAddEventUnitRegion(gt_BarEnter, null, RegionFromId(201), true);
    TriggerAddEventUnitRegion(gt_BarEnter, null, RegionFromId(200), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bar - Leave
//--------------------------------------------------------------------------------------------------
bool gt_BarLeave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    region auto8FA466E4_val;
    unitgroup auto508820EF_g;
    int auto508820EF_u;
    unit auto508820EF_var;
    unitgroup auto562D3E79_g;
    int auto562D3E79_u;
    unit auto562D3E79_var;
    unitgroup auto428801DF_g;
    int auto428801DF_u;
    unit auto428801DF_var;
    string autoE90C5CCB_val;

    // Conditions
    if (testConds) {
        if (!(((gv_barIsOpen == true) && ((gv_chosenMap == 5) || (gv_chosenMap == 6) || (gv_chosenMap == 10))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8FA466E4_val = EventUnitRegion();
    if (auto8FA466E4_val == RegionFromId(201)) {
        Wait(0.5, c_timeGame);
        gv_unInvitedPlayersAtEntrance = 0;
        auto508820EF_g = UnitGroup(null, c_playerAny, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto508820EF_u = UnitGroupCount(auto508820EF_g, c_unitCountAll);
        for (;; auto508820EF_u -= 1) {
            auto508820EF_var = UnitGroupUnitFromEnd(auto508820EF_g, auto508820EF_u);
            if (auto508820EF_var == null) { break; }
            if (((gf_IsPlayerOnline(UnitGetOwner(auto508820EF_var)) == true) && (gv_barPlayerHasInvite[UnitGetOwner(auto508820EF_var)] == false))) {
                gv_unInvitedPlayersAtEntrance += 1;
            }

        }
        if ((gv_unInvitedPlayersAtEntrance == 0)) {
            auto562D3E79_g = UnitGroup("CheckStationVerticalOpened", 0, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
            auto562D3E79_u = UnitGroupCount(auto562D3E79_g, c_unitCountAll);
            for (;; auto562D3E79_u -= 1) {
                auto562D3E79_var = UnitGroupUnitFromEnd(auto562D3E79_g, auto562D3E79_u);
                if (auto562D3E79_var == null) { break; }
                UnitSetState(auto562D3E79_var, c_unitStateHidden, false);
            }
            auto428801DF_g = UnitGroup("CheckStationVertical", 0, RegionFromId(201), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0), 0);
            auto428801DF_u = UnitGroupCount(auto428801DF_g, c_unitCountAll);
            for (;; auto428801DF_u -= 1) {
                auto428801DF_var = UnitGroupUnitFromEnd(auto428801DF_g, auto428801DF_u);
                if (auto428801DF_var == null) { break; }
                UnitSetState(auto428801DF_var, c_unitStateHidden, true);
            }
        }

    }
    else if (auto8FA466E4_val == RegionFromId(200)) {
        if ((gv_barPlayerHasInvite[EventPlayer()] == true)) {
            SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
            SoundPlayOnUnit(SoundLink("ModUtilityVoiceModUtilityVoice00130", -1), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
            autoE90C5CCB_val = UnitGetType(EventUnit());
            if (autoE90C5CCB_val == "PrisonZealot") {
                gf_SwapModel(EventPlayer(), EventUnit(), "PrisonZealot");
            }
            else if (autoE90C5CCB_val == "Predator") {
                gf_SwapModel(EventPlayer(), EventUnit(), "PredatorSkin");
            }
            else {
            }
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarLeave_Init () {
    gt_BarLeave = TriggerCreate("gt_BarLeave_Func");
    TriggerAddEventUnitRegion(gt_BarLeave, null, RegionFromId(200), false);
    TriggerAddEventUnitRegion(gt_BarLeave, null, RegionFromId(201), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Per Second Init
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePerSecondInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0FB25A03_g;
    int auto0FB25A03_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0FB25A03_g = PlayerGroupActive();
    auto0FB25A03_var = -1;
    while (true) {
        auto0FB25A03_var = PlayerGroupNextPlayer(auto0FB25A03_g, auto0FB25A03_var);
        if (auto0FB25A03_var < 0) { break; }
        DialogCreate(700, 700, c_anchorTopLeft, 0, 150, true);
        gv_resourcePerSecond[auto0FB25A03_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 120, 120, c_anchorTopLeft, 0, 0, gv_tBuffIcon, ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gv_gametimeText1, PlayerGroupActive());
        gv_buffIcondiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 80, 80, c_anchorTopLeft, 80, 0, StringExternal("Param/Value/51A356B6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/F46C7562"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 80, 80, c_anchorTopLeft, 180, 0, StringExternal("Param/Value/6E2A91F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1DC3F0F9"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 120, 80, c_anchorTopLeft, 100, 50, gv_nBuffText1, ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_buffMinerdiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 120, 80, c_anchorTopLeft, 200, 50, gv_nBuffText1, ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_buffGendiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 80, 80, c_anchorTopLeft, 0, 160, (StringExternal("Param/Value/78D393DF") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/62ED2541"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 40, 40, c_anchorTopLeft, 60, 160, (StringExternal("Param/Value/E22F47C8") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/EB7F5BF1"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 580, 40, c_anchorTopLeft, 100, 160, (StringExternal("Param/Value/62BF5F94") + IntToText(PlayerGetPropertyInt(auto0FB25A03_var, c_playerPropVespeneCollected))), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_gasdiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 40, 40, c_anchorTopLeft, 60, 200, (StringExternal("Param/Value/64C9E20E") + IntToText(PlayerGetPropertyInt(auto0FB25A03_var, c_playerPropVespeneCollected))), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/FE0CD5C0"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 580, 40, c_anchorTopLeft, 100, 200, (StringExternal("Param/Value/B2467DA3") + IntToText(PlayerGetPropertyInt(auto0FB25A03_var, c_playerPropVespeneCollected))), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_mindiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 80, 80, c_anchorTopLeft, 0, 80, (StringExternal("Param/Value/2453ED9C") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/14E3F0E7"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 120, 120, c_anchorTopLeft, 0, 80, StringExternal("Param/Value/7699EEDB"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_golddiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 80, 80, c_anchorTopLeft, 80, 80, (StringExternal("Param/Value/21AEA892") + StringToText("")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AA80D8FB"), PlayerGroupActive());
        libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[auto0FB25A03_var], 120, 120, c_anchorTopLeft, 80, 80, StringExternal("Param/Value/BE72C2FF"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_hunterdiaitem[auto0FB25A03_var] = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto0FB25A03_var), false);
    }
    gv_resourcesPerSecondInitComplete = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePerSecondInit_Init () {
    gt_ResourcePerSecondInit = TriggerCreate("gt_ResourcePerSecondInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Per Second Updater
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePerSecondUpdater_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_perSecTestergatheredGas;
    int lv_perSecTestergatheredMins;
    fixed lv_perSecTesterduration;
    int lv_perSecTestergasPerSecIs;
    int lv_perSecTesterminsPerSecIs;
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF99A2AA3_g;
    int autoF99A2AA3_var;
    const int autoB75552BE_ae = 15;
    const int autoB75552BE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_perSecondIntervalTicker > 16) && (gv_resourcesPerSecondInitComplete == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF99A2AA3_g = PlayerGroupActive();
    autoF99A2AA3_var = -1;
    while (true) {
        autoF99A2AA3_var = PlayerGroupNextPlayer(autoF99A2AA3_g, autoF99A2AA3_var);
        if (autoF99A2AA3_var < 0) { break; }
        if ((gv_showhideui[autoF99A2AA3_var] == 0)) {
            if ((gv_maxHuntersAllowed == 0)) {
                libNtve_gf_SetDialogItemText(gv_hunterdiaitem[autoF99A2AA3_var], StringExternal("Param/Value/724EBD97"), PlayerGroupSingle(autoF99A2AA3_var));
            }
            else {
                if ((PlayerGroupCount(gv_playerGroupHunters) >= gv_maxHuntersAllowed)) {
                    libNtve_gf_SetDialogItemText(gv_hunterdiaitem[autoF99A2AA3_var], StringExternal("Param/Value/3CD4842A"), PlayerGroupSingle(autoF99A2AA3_var));
                }
                else {
                    libNtve_gf_SetDialogItemText(gv_hunterdiaitem[autoF99A2AA3_var], StringExternal("Param/Value/EDE2F7CC"), PlayerGroupSingle(autoF99A2AA3_var));
                }
            }
            if (((gv_gameTimeMinutes < 5) && (((gv_chosenMap >= 4) && (gv_chosenMap <= 7)) || ((gv_chosenMap >= 9) && (gv_chosenMap <= 10))))) {
                libNtve_gf_SetDialogItemText(gv_golddiaitem[autoF99A2AA3_var], StringExternal("Param/Value/34CF086C"), PlayerGroupSingle(autoF99A2AA3_var));
            }
            else {
                libNtve_gf_SetDialogItemText(gv_golddiaitem[autoF99A2AA3_var], StringExternal("Param/Value/A5ABAA64"), PlayerGroupSingle(autoF99A2AA3_var));
            }
            lv_perSecTestergatheredGas = 0;
            lv_perSecTestergatheredMins = 0;
            lv_i = 0;
            for ( ; ( (autoB75552BE_ai >= 0 && lv_i <= autoB75552BE_ae) || (autoB75552BE_ai < 0 && lv_i >= autoB75552BE_ae) ) ; lv_i += autoB75552BE_ai ) {
                lv_perSecTestergatheredGas += gv_gatheredGasMatrix[autoF99A2AA3_var][lv_i];
                lv_perSecTestergatheredMins += gv_gatheredMinsMatrix[autoF99A2AA3_var][lv_i];
            }
            lv_perSecTestergasPerSecIs = (lv_perSecTestergatheredGas / 16);
            lv_perSecTesterminsPerSecIs = (lv_perSecTestergatheredMins / 16);
            libNtve_gf_SetDialogItemText(gv_gasdiaitem[autoF99A2AA3_var], IntToText(lv_perSecTestergasPerSecIs), PlayerGroupSingle(autoF99A2AA3_var));
            libNtve_gf_SetDialogItemText(gv_mindiaitem[autoF99A2AA3_var], IntToText(lv_perSecTesterminsPerSecIs), PlayerGroupSingle(autoF99A2AA3_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePerSecondUpdater_Init () {
    gt_ResourcePerSecondUpdater = TriggerCreate("gt_ResourcePerSecondUpdater_Func");
    TriggerEnable(gt_ResourcePerSecondUpdater, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Per Second Updater - OLD
//--------------------------------------------------------------------------------------------------
bool gt_ResourcePerSecondUpdaterOLD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5DEEBB6E_g;
    int auto5DEEBB6E_var;
    playergroup autoF858AEB8_g;
    int autoF858AEB8_var;

    // Conditions
    if (testConds) {
        if (!((gv_resourcesPerSecondInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DEEBB6E_g = PlayerGroupActive();
    auto5DEEBB6E_var = -1;
    while (true) {
        auto5DEEBB6E_var = PlayerGroupNextPlayer(auto5DEEBB6E_g, auto5DEEBB6E_var);
        if (auto5DEEBB6E_var < 0) { break; }
        gv_gas2[auto5DEEBB6E_var] = PlayerGetPropertyFixed(auto5DEEBB6E_var, c_playerPropVespene);
        gv_minerals2[auto5DEEBB6E_var] = PlayerGetPropertyFixed(auto5DEEBB6E_var, c_playerPropMinerals);
    }
    Wait(1.0, c_timeGame);
    autoF858AEB8_g = PlayerGroupActive();
    autoF858AEB8_var = -1;
    while (true) {
        autoF858AEB8_var = PlayerGroupNextPlayer(autoF858AEB8_g, autoF858AEB8_var);
        if (autoF858AEB8_var < 0) { break; }
        if ((gv_showhideui[autoF858AEB8_var] == 0)) {
            gv_gas[autoF858AEB8_var] = (PlayerGetPropertyFixed(autoF858AEB8_var, c_playerPropVespene) - gv_gas2[autoF858AEB8_var]);
            gv_minerals[autoF858AEB8_var] = (PlayerGetPropertyFixed(autoF858AEB8_var, c_playerPropMinerals) - gv_minerals2[autoF858AEB8_var]);
            DialogControlDestroy(gv_gasdiaitem[autoF858AEB8_var]);
            DialogControlDestroy(gv_mindiaitem[autoF858AEB8_var]);
            if ((PlayerGroupPlayer(gv_playerGroupZealots, 1) == autoF858AEB8_var)) {
                gv_zgas[autoF858AEB8_var] = ((PlayerGetPropertyFixed(autoF858AEB8_var, c_playerPropMinerals) - gv_minerals2[autoF858AEB8_var]) / 6400.0);
                libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 50, (FixedToText(gv_zgas[autoF858AEB8_var], 0) + StringExternal("Param/Value/377C4A68")), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_gasdiaitem[autoF858AEB8_var] = DialogControlLastCreated();
            }
            else {
                libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 50, (FixedToText(gv_gas[autoF858AEB8_var], 0) + StringExternal("Param/Value/20C88C03")), Color(22*100/255,128*100/255,0), false, 2.0);
                gv_gasdiaitem[autoF858AEB8_var] = DialogControlLastCreated();
            }
            libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 75, (FixedToText(gv_minerals[autoF858AEB8_var], 0) + StringExternal("Param/Value/A10E0DD8")), Color(0,66*100/255,100), false, 2.0);
            gv_mindiaitem[autoF858AEB8_var] = DialogControlLastCreated();
            if ((gv_side[autoF858AEB8_var] != "Zealot") && (UnitIsAlive(gv_probes[autoF858AEB8_var]) == true) && (PlayerType(autoF858AEB8_var) == c_playerTypeUser) && (PlayerStatus(autoF858AEB8_var) == c_playerStatusActive)) {
                DialogControlDestroy(gv_turretbuffstacks[autoF858AEB8_var]);
                libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 100, (StringExternal("Param/Value/9D1B6C6C") + (TextWithColor(IntToText(gv_turretstackscount[autoF858AEB8_var]), Color(0.00, 100.00, 0.00)) + StringToText(""))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_turretbuffstacks[autoF858AEB8_var] = DialogControlLastCreated();
                DialogControlDestroy(gv_totalturretpoints[autoF858AEB8_var]);
                libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 125, (StringExternal("Param/Value/0925D88F") + (TextWithColor(IntToText(gv_turretcount[autoF858AEB8_var]), Color(0.00, 100.00, 0.00)) + StringToText(""))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_totalturretpoints[autoF858AEB8_var] = DialogControlLastCreated();
                DialogControlDestroy(gv_currentfeedgaugeamount[autoF858AEB8_var]);
                libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 200, (StringExternal("Param/Value/7F95603A") + (TextWithColor(IntToText((10 - gv_turretstackscount[autoF858AEB8_var])), Color(0.00, 100.00, 0.00)) + StringExternal("Param/Value/D7BFB071"))), ColorWithAlpha(0,0,0,0), false, 2.0);
                gv_currentfeedgaugeamount[autoF858AEB8_var] = DialogControlLastCreated();
                if ((gv_gameTimeMinutes > 0) && (gv_ninjaBuffActiveFlag[autoF858AEB8_var] == 1)) {
                    DialogControlDestroy(gv_ninjaonorofflabel[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 175, (StringExternal("Param/Value/0EA08FE1") + StringExternal("Param/Value/1CAC9B69")), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_ninjaonorofflabel[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if ((gv_gameTimeMinutes > 0) && (gv_ninjaBuffActiveFlag[autoF858AEB8_var] == 0)) {
                    DialogControlDestroy(gv_ninjaonorofflabel[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 175, (StringExternal("Param/Value/89A2855B") + StringExternal("Param/Value/BA3D165C")), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_ninjaonorofflabel[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if ((gv_gameTimeMinutes < 3)) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/04DCEF04"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 4))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/ED2F7B23"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 6))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/088CB6BA"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 9))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/27D7C36B"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 12))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/246F0BF7"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 14))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/9C7011B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 20))) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/F884DB07"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

                if ((gv_gameTimeMinutes >= 21)) {
                    DialogControlDestroy(gv_totalpointsrequired[autoF858AEB8_var]);
                    libNtve_gf_CreateDialogItemLabel(gv_resourcePerSecond[autoF858AEB8_var], 700, 700, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/A49B1A1E"), ColorWithAlpha(0,0,0,0), false, 2.0);
                    gv_totalpointsrequired[autoF858AEB8_var] = DialogControlLastCreated();
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourcePerSecondUpdaterOLD_Init () {
    gt_ResourcePerSecondUpdaterOLD = TriggerCreate("gt_ResourcePerSecondUpdaterOLD_Func");
    TriggerEnable(gt_ResourcePerSecondUpdaterOLD, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Lagg Test Trigger
//--------------------------------------------------------------------------------------------------
bool gt_TurretLaggTestTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAB369285_g;
    int autoAB369285_u;
    unit autoAB369285_var;
    unitgroup auto6BB8BA93_g;
    int auto6BB8BA93_u;
    unit auto6BB8BA93_var;
    unitgroup auto05F84051_g;
    int auto05F84051_u;
    unit auto05F84051_var;
    unitgroup auto76C16464_g;
    int auto76C16464_u;
    unit auto76C16464_var;
    unitgroup auto7F1F8E15_g;
    int auto7F1F8E15_u;
    unit auto7F1F8E15_var;
    unitgroup autoC9AB52A5_g;
    int autoC9AB52A5_u;
    unit autoC9AB52A5_var;
    unitgroup autoDDB0DB87_g;
    int autoDDB0DB87_u;
    unit autoDDB0DB87_var;
    unitgroup auto5D7DE9B1_g;
    int auto5D7DE9B1_u;
    unit auto5D7DE9B1_var;
    unitgroup autoF001CCE1_g;
    int autoF001CCE1_u;
    unit autoF001CCE1_var;
    unitgroup autoDF4864D5_g;
    int autoDF4864D5_u;
    unit autoDF4864D5_var;
    unitgroup auto5A4EFDD7_g;
    int auto5A4EFDD7_u;
    unit auto5A4EFDD7_var;

    // Conditions
    if (testConds) {
        if (!((UnitMoverExists(EventUnit(), "StalkerWeapon") == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "MissileDefault") == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "ATSLaserBatteryLMWeapon") == false))) {
            return false;
        }

        if (!((UnitMoverExists(EventUnit(), "YamatoWeapon") == false))) {
            return false;
        }

        if (!((gv_side[EventPlayer()] != "Zealot"))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((UnitIsAlive(gv_probes[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLifePercent, 100.0);
    if ((gv_gameTimeMinutes <= 4) && ((EventUnitAbility() == AbilityCommand("TerranBuild", 12)) || (UnitGetType(EventUnit()) == "Turret1") || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t1[EventPlayer()] = UnitCount("Turret1", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8);
    }

    if ((gv_gameTimeMinutes <= 4) && ((UnitGetType(EventUnit()) == "Turret2") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel2", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t2[EventPlayer()] = (UnitCount("Turret2", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 1);
    }

    if ((gv_gameTimeMinutes <= 6) && ((UnitGetType(EventUnit()) == "Turret3") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel3", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t3[EventPlayer()] = (UnitCount("Turret3", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 2);
    }

    if ((gv_gameTimeMinutes <= 9) && ((UnitGetType(EventUnit()) == "Turret4") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel4", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t4[EventPlayer()] = (UnitCount("Turret4", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 3);
    }

    if ((gv_gameTimeMinutes <= 12) && ((UnitGetType(EventUnit()) == "Turret5") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel5", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t5[EventPlayer()] = (UnitCount("Turret5", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 4);
    }

    if ((gv_gameTimeMinutes <= 14) && ((UnitGetType(EventUnit()) == "Turret6") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel6", 0)) || (EventUnitAbility() == AbilityCommand("ProtossBuild", 28)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t6[EventPlayer()] = (UnitCount("Turret6", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 5);
    }

    if (((UnitGetType(EventUnit()) == "Turret7") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel7", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t7[EventPlayer()] = (UnitCount("Turret7", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 6);
    }

    if (((UnitGetType(EventUnit()) == "Turret8") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel8", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t7[EventPlayer()] = (UnitCount("Turret7", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 6);
        gv_t8[EventPlayer()] = (UnitCount("Turret8", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 7);
    }

    if (((UnitGetType(EventUnit()) == "Turret9") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel9", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t8[EventPlayer()] = (UnitCount("Turret8", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 7);
        gv_t9[EventPlayer()] = (UnitCount("Turret9", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 8);
    }

    if (((UnitGetType(EventUnit()) == "Turret10") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel10", 0)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t9[EventPlayer()] = (UnitCount("Turret9", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 8);
        gv_t10[EventPlayer()] = (UnitCount("Turret10", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 9);
    }

    if (((UnitGetType(EventUnit()) == "Turret11") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel11", 0)) || (EventUnitAbility() == AbilityCommand("ProtossBuild", 21)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t10[EventPlayer()] = (UnitCount("Turret10", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 9);
        gv_t11[EventPlayer()] = (UnitCount("Turret11", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 25);
    }

    if (((UnitGetType(EventUnit()) == "Turret12") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel12", 0)) || (EventUnitAbility() == AbilityCommand("ProtossBuild", 22)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t11[EventPlayer()] = (UnitCount("Turret11", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 25);
        gv_t12[EventPlayer()] = (UnitCount("Turret12", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 50);
    }

    if (((UnitGetType(EventUnit()) == "Turret13") || (EventUnitAbility() == AbilityCommand("UpgradetoTurretlevel13", 0)) || (EventUnitAbility() == AbilityCommand("ProtossBuild", 23)) || (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMassive) == true))) {
        gv_t12[EventPlayer()] = (UnitCount("Turret12", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 50);
        gv_t13[EventPlayer()] = (UnitCount("Turret13", EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 8) * 75);
    }

    gv_turretcount[EventPlayer()] = ((((((((((gv_t1[EventPlayer()] + gv_t2[EventPlayer()]) + gv_t3[EventPlayer()]) + gv_t4[EventPlayer()]) + gv_t5[EventPlayer()]) + gv_t6[EventPlayer()]) + gv_t7[EventPlayer()]) + gv_t8[EventPlayer()]) + gv_t9[EventPlayer()]) + gv_t10[EventPlayer()]) + (gv_t11[EventPlayer()] + (gv_t12[EventPlayer()] + gv_t13[EventPlayer()])));
    if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 1)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && (gv_turretcount[EventPlayer()] == 2)) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && (gv_turretcount[EventPlayer()] == 4)) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && (gv_turretcount[EventPlayer()] == 6)) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && (gv_turretcount[EventPlayer()] == 7)) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && (gv_turretcount[EventPlayer()] == 8)) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && (gv_turretcount[EventPlayer()] == 9)) || ((gv_gameTimeMinutes > 21) && (gv_turretcount[EventPlayer()] == 11)))) {
        autoF001CCE1_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF001CCE1_u = UnitGroupCount(autoF001CCE1_g, c_unitCountAll);
        for (;; autoF001CCE1_u -= 1) {
            autoF001CCE1_var = UnitGroupUnitFromEnd(autoF001CCE1_g, autoF001CCE1_u);
            if (autoF001CCE1_var == null) { break; }
            if ((UnitHasBehavior(autoF001CCE1_var, "TurretEconBuff1") == false)) {
                UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(autoF001CCE1_var), StringExternal("Param/Value/86B0F020"), "Human Achievements\\1 base.dds", autoF001CCE1_var);
                libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText1, PlayerGroupSingle(EventPlayer()));
            }

            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff1", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff12", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff122", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff1222", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff12222", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff12223", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff12224", 1);
            UnitBehaviorRemove(autoF001CCE1_var, "TurretEconBuff12225", 1);
            UnitBehaviorAddPlayer(autoF001CCE1_var, "TurretEconBuff1", 0, 1);
            gv_turretstackscount[EventPlayer()] = 1;
        }
    }
    else {
        if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 2)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 3) && (gv_turretcount[EventPlayer()] <= 4))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 5) && (gv_turretcount[EventPlayer()] <= 8))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 7) && (gv_turretcount[EventPlayer()] <= 12))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 8) && (gv_turretcount[EventPlayer()] <= 14))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 9) && (gv_turretcount[EventPlayer()] <= 16))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 10) && (gv_turretcount[EventPlayer()] <= 18))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 12) && (gv_turretcount[EventPlayer()] <= 22))))) {
            auto5D7DE9B1_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto5D7DE9B1_u = UnitGroupCount(auto5D7DE9B1_g, c_unitCountAll);
            for (;; auto5D7DE9B1_u -= 1) {
                auto5D7DE9B1_var = UnitGroupUnitFromEnd(auto5D7DE9B1_g, auto5D7DE9B1_u);
                if (auto5D7DE9B1_var == null) { break; }
                if ((UnitHasBehavior(auto5D7DE9B1_var, "TurretEconBuff12") == false)) {
                    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(auto5D7DE9B1_var), StringExternal("Param/Value/248A24BB"), "Human Achievements\\2 base.dds", auto5D7DE9B1_var);
                    libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText2, PlayerGroupSingle(EventPlayer()));
                }

                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff1", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff12", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff122", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff1222", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff12222", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff12223", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff12224", 1);
                UnitBehaviorRemove(auto5D7DE9B1_var, "TurretEconBuff12225", 1);
                UnitBehaviorAddPlayer(auto5D7DE9B1_var, "TurretEconBuff12", 0, 1);
                gv_turretstackscount[EventPlayer()] = 2;
            }
        }
        else {
            if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 3)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 5) && (gv_turretcount[EventPlayer()] <= 6))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 9) && (gv_turretcount[EventPlayer()] <= 12))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 13) && (gv_turretcount[EventPlayer()] <= 18))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 15) && (gv_turretcount[EventPlayer()] <= 21))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 17) && (gv_turretcount[EventPlayer()] <= 24))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 19) && (gv_turretcount[EventPlayer()] <= 27))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 23) && (gv_turretcount[EventPlayer()] <= 33))))) {
                autoDDB0DB87_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoDDB0DB87_u = UnitGroupCount(autoDDB0DB87_g, c_unitCountAll);
                for (;; autoDDB0DB87_u -= 1) {
                    autoDDB0DB87_var = UnitGroupUnitFromEnd(autoDDB0DB87_g, autoDDB0DB87_u);
                    if (autoDDB0DB87_var == null) { break; }
                    if ((UnitHasBehavior(autoDDB0DB87_var, "TurretEconBuff122") == false)) {
                        UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(autoDDB0DB87_var), StringExternal("Param/Value/923B0C11"), "Human Achievements\\3 base.dds", autoDDB0DB87_var);
                        libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                        libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText3, PlayerGroupSingle(EventPlayer()));
                    }

                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff1", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff12", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff122", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff1222", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff12222", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff12223", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff12224", 1);
                    UnitBehaviorRemove(autoDDB0DB87_var, "TurretEconBuff12225", 1);
                    UnitBehaviorAddPlayer(autoDDB0DB87_var, "TurretEconBuff122", 0, 1);
                    gv_turretstackscount[EventPlayer()] = 3;
                }
            }
            else {
                if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 4)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 7) && (gv_turretcount[EventPlayer()] <= 8))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 13) && (gv_turretcount[EventPlayer()] <= 16))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 19) && (gv_turretcount[EventPlayer()] <= 24))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 22) && (gv_turretcount[EventPlayer()] <= 28))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 25) && (gv_turretcount[EventPlayer()] <= 32))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 28) && (gv_turretcount[EventPlayer()] <= 36))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 34) && (gv_turretcount[EventPlayer()] <= 44))))) {
                    autoC9AB52A5_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    autoC9AB52A5_u = UnitGroupCount(autoC9AB52A5_g, c_unitCountAll);
                    for (;; autoC9AB52A5_u -= 1) {
                        autoC9AB52A5_var = UnitGroupUnitFromEnd(autoC9AB52A5_g, autoC9AB52A5_u);
                        if (autoC9AB52A5_var == null) { break; }
                        if ((UnitHasBehavior(autoC9AB52A5_var, "TurretEconBuff1222") == false)) {
                            UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(autoC9AB52A5_var), StringExternal("Param/Value/A48540FD"), "Human Achievements\\4 base.dds", autoC9AB52A5_var);
                            libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                            libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText4, PlayerGroupSingle(EventPlayer()));
                        }

                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff1", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff12", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff122", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff1222", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff12222", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff12223", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff12224", 1);
                        UnitBehaviorRemove(autoC9AB52A5_var, "TurretEconBuff12225", 1);
                        UnitBehaviorAddPlayer(autoC9AB52A5_var, "TurretEconBuff1222", 0, 1);
                        gv_turretstackscount[EventPlayer()] = 4;
                    }
                }
                else {
                    if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 5)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 9) && (gv_turretcount[EventPlayer()] <= 10))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 17) && (gv_turretcount[EventPlayer()] <= 19))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 25) && (gv_turretcount[EventPlayer()] <= 30))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 29) && (gv_turretcount[EventPlayer()] <= 35))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 33) && (gv_turretcount[EventPlayer()] <= 40))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 37) && (gv_turretcount[EventPlayer()] <= 45))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 45) && (gv_turretcount[EventPlayer()] <= 55))))) {
                        auto7F1F8E15_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        auto7F1F8E15_u = UnitGroupCount(auto7F1F8E15_g, c_unitCountAll);
                        for (;; auto7F1F8E15_u -= 1) {
                            auto7F1F8E15_var = UnitGroupUnitFromEnd(auto7F1F8E15_g, auto7F1F8E15_u);
                            if (auto7F1F8E15_var == null) { break; }
                            if ((UnitHasBehavior(auto7F1F8E15_var, "TurretEconBuff12222") == false)) {
                                UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(auto7F1F8E15_var), StringExternal("Param/Value/8CC9B1EA"), "Human Achievements\\5 base.dds", auto7F1F8E15_var);
                                libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText5, PlayerGroupSingle(EventPlayer()));
                            }

                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff1", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff12", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff122", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff1222", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff12222", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff12223", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff12224", 1);
                            UnitBehaviorRemove(auto7F1F8E15_var, "TurretEconBuff12225", 1);
                            UnitBehaviorAddPlayer(auto7F1F8E15_var, "TurretEconBuff12222", 0, 1);
                            gv_turretstackscount[EventPlayer()] = 5;
                        }
                    }
                    else {
                        if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 6)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 11) && (gv_turretcount[EventPlayer()] <= 12))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 20) && (gv_turretcount[EventPlayer()] <= 21))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 31) && (gv_turretcount[EventPlayer()] <= 36))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 36) && (gv_turretcount[EventPlayer()] <= 42))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 41) && (gv_turretcount[EventPlayer()] <= 48))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 46) && (gv_turretcount[EventPlayer()] <= 54))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 56) && (gv_turretcount[EventPlayer()] <= 66))))) {
                            auto76C16464_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                            auto76C16464_u = UnitGroupCount(auto76C16464_g, c_unitCountAll);
                            for (;; auto76C16464_u -= 1) {
                                auto76C16464_var = UnitGroupUnitFromEnd(auto76C16464_g, auto76C16464_u);
                                if (auto76C16464_var == null) { break; }
                                if ((UnitHasBehavior(auto76C16464_var, "TurretEconBuff12223") == false)) {
                                    UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(auto76C16464_var), StringExternal("Param/Value/D466384E"), "Human Achievements\\6 base.dds", auto76C16464_var);
                                    libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                    libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText6, PlayerGroupSingle(EventPlayer()));
                                }

                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff1", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff12", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff122", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff1222", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff12222", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff12223", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff12224", 1);
                                UnitBehaviorRemove(auto76C16464_var, "TurretEconBuff12225", 1);
                                UnitBehaviorAddPlayer(auto76C16464_var, "TurretEconBuff12223", 0, 1);
                                gv_turretstackscount[EventPlayer()] = 6;
                            }
                        }
                        else {
                            if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] == 7)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && ((gv_turretcount[EventPlayer()] >= 13) && (gv_turretcount[EventPlayer()] <= 15))) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && ((gv_turretcount[EventPlayer()] >= 22) && (gv_turretcount[EventPlayer()] <= 23))) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && ((gv_turretcount[EventPlayer()] >= 37) && (gv_turretcount[EventPlayer()] <= 39))) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && ((gv_turretcount[EventPlayer()] >= 43) && (gv_turretcount[EventPlayer()] <= 47))) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && ((gv_turretcount[EventPlayer()] >= 49) && (gv_turretcount[EventPlayer()] <= 55))) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && ((gv_turretcount[EventPlayer()] >= 55) && (gv_turretcount[EventPlayer()] <= 63))) || ((gv_gameTimeMinutes > 21) && ((gv_turretcount[EventPlayer()] >= 67) && (gv_turretcount[EventPlayer()] <= 71))))) {
                                auto05F84051_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                auto05F84051_u = UnitGroupCount(auto05F84051_g, c_unitCountAll);
                                for (;; auto05F84051_u -= 1) {
                                    auto05F84051_var = UnitGroupUnitFromEnd(auto05F84051_g, auto05F84051_u);
                                    if (auto05F84051_var == null) { break; }
                                    if ((UnitHasBehavior(auto05F84051_var, "TurretEconBuff12224") == false)) {
                                        UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(auto05F84051_var), StringExternal("Param/Value/B5CC194B"), "Human Achievements\\7 base.dds", auto05F84051_var);
                                        libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                        libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText7, PlayerGroupSingle(EventPlayer()));
                                    }

                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff1", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff12", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff122", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff1222", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff12222", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff12223", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff12224", 1);
                                    UnitBehaviorRemove(auto05F84051_var, "TurretEconBuff12225", 1);
                                    UnitBehaviorAddPlayer(auto05F84051_var, "TurretEconBuff12224", 0, 1);
                                    gv_turretstackscount[EventPlayer()] = 8;
                                }
                            }
                            else {
                                if ((((gv_gameTimeMinutes < 3) && (gv_turretcount[EventPlayer()] >= 8)) || (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5)) && (gv_turretcount[EventPlayer()] >= 16)) || (((gv_gameTimeMinutes >= 5) && (gv_gameTimeMinutes <= 7)) && (gv_turretcount[EventPlayer()] >= 24)) || (((gv_gameTimeMinutes >= 7) && (gv_gameTimeMinutes <= 10)) && (gv_turretcount[EventPlayer()] >= 40)) || (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 13)) && (gv_turretcount[EventPlayer()] >= 48)) || (((gv_gameTimeMinutes >= 13) && (gv_gameTimeMinutes <= 15)) && (gv_turretcount[EventPlayer()] >= 56)) || (((gv_gameTimeMinutes >= 15) && (gv_gameTimeMinutes <= 21)) && (gv_turretcount[EventPlayer()] >= 64)) || ((gv_gameTimeMinutes > 21) && (gv_turretcount[EventPlayer()] >= 72)))) {
                                    auto6BB8BA93_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                    auto6BB8BA93_u = UnitGroupCount(auto6BB8BA93_g, c_unitCountAll);
                                    for (;; auto6BB8BA93_u -= 1) {
                                        auto6BB8BA93_var = UnitGroupUnitFromEnd(auto6BB8BA93_g, auto6BB8BA93_u);
                                        if (auto6BB8BA93_var == null) { break; }
                                        if ((UnitHasBehavior(auto6BB8BA93_var, "TurretEconBuff12225") == false)) {
                                            UIAlertUnit("UpgradeComplete_Prot", UnitGetOwner(auto6BB8BA93_var), StringExternal("Param/Value/3F323434"), "Human Achievements\\8 base.dds", auto6BB8BA93_var);
                                            libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                            libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_tBuffText8, PlayerGroupSingle(EventPlayer()));
                                        }

                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff1", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff12", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff122", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff1222", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff12222", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff12223", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff12224", 1);
                                        UnitBehaviorRemove(auto6BB8BA93_var, "TurretEconBuff12225", 1);
                                        UnitBehaviorAddPlayer(auto6BB8BA93_var, "TurretEconBuff12225", 0, 1);
                                        gv_turretstackscount[EventPlayer()] = 8;
                                    }
                                }
                                else {
                                    if ((gv_turretcount[EventPlayer()] == 0)) {
                                        libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                        libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_nBuffText1, PlayerGroupSingle(EventPlayer()));
                                        autoAB369285_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                        autoAB369285_u = UnitGroupCount(autoAB369285_g, c_unitCountAll);
                                        for (;; autoAB369285_u -= 1) {
                                            autoAB369285_var = UnitGroupUnitFromEnd(autoAB369285_g, autoAB369285_u);
                                            if (autoAB369285_var == null) { break; }
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff1", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff12", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff122", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff1222", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff12222", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff12223", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff12224", 1);
                                            UnitBehaviorRemove(autoAB369285_var, "TurretEconBuff12225", 1);
                                            gv_turretstackscount[EventPlayer()] = 0;
                                        }
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if ((gv_turretcount[EventPlayer()] == 0) && (gv_ninjaonoff[EventPlayer()] == 0) && (gv_gameTimeMinutes >= 1) && ((BankKeyExists(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff) == false) || (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff) == true))) {
        autoDF4864D5_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDF4864D5_u = UnitGroupCount(autoDF4864D5_g, c_unitCountAll);
        for (;; autoDF4864D5_u -= 1) {
            autoDF4864D5_var = UnitGroupUnitFromEnd(autoDF4864D5_g, autoDF4864D5_u);
            if (autoDF4864D5_var == null) { break; }
            if ((UnitHasBehavior(autoDF4864D5_var, "NinjaBonus") == false)) {
                UnitBehaviorAddPlayer(autoDF4864D5_var, "NinjaBonus", 0, 1);
            }

        }
        gv_ninjaBuffActiveFlag[EventPlayer()] = 1;
        libNtve_gf_SetDialogItemText(gv_buffIcondiaitem[EventPlayer()], gv_nBuffIcon, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_buffMinerdiaitem[EventPlayer()], gv_nBuffText2, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_buffGendiaitem[EventPlayer()], gv_nBuffText2, PlayerGroupSingle(EventPlayer()));
        TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupActive(), false);
    }

    if ((gv_turretcount[EventPlayer()] > 0) && (gv_ninjaBuffActiveFlag[EventPlayer()] == 1)) {
        auto5A4EFDD7_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5A4EFDD7_u = UnitGroupCount(auto5A4EFDD7_g, c_unitCountAll);
        for (;; auto5A4EFDD7_u -= 1) {
            auto5A4EFDD7_var = UnitGroupUnitFromEnd(auto5A4EFDD7_g, auto5A4EFDD7_u);
            if (auto5A4EFDD7_var == null) { break; }
            if ((UnitHasBehavior(auto5A4EFDD7_var, "NinjaBonus") == true)) {
                UnitBehaviorRemovePlayer(auto5A4EFDD7_var, "NinjaBonus", 0, 1);
            }

        }
        gv_ninjaBuffActiveFlag[EventPlayer()] = 0;
        libNtve_gf_SetDialogItemText(gv_buffIcondiaitem[UnitGetOwner(EventUnit())], gv_tBuffIcon, PlayerGroupSingle(EventPlayer()));
        TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupActive(), true);
    }

    if ((gv_turretcount[EventPlayer()] > 0)) {
        if (((gv_gameTimeMinutes >= 0) && (gv_gameTimeMinutes <= 2))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText1, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 3) && (gv_gameTimeMinutes <= 5))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText2, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 6) && (gv_gameTimeMinutes <= 7))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText3, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 8) && (gv_gameTimeMinutes <= 10))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText4, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 11) && (gv_gameTimeMinutes <= 13))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText5, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 14) && (gv_gameTimeMinutes <= 16))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText6, PlayerGroupSingle(EventPlayer()));
        }

        if (((gv_gameTimeMinutes >= 17) && (gv_gameTimeMinutes <= 19))) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText7, PlayerGroupSingle(EventPlayer()));
        }

        if ((gv_gameTimeMinutes >= 20)) {
            libNtve_gf_SetDialogItemTooltip(gv_buffIcondiaitem[EventPlayer()], gv_gametimeText8, PlayerGroupSingle(EventPlayer()));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLaggTestTrigger_Init () {
    gt_TurretLaggTestTrigger = TriggerCreate("gt_TurretLaggTestTrigger_Func");
    TriggerAddEventUnitDied(gt_TurretLaggTestTrigger, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[1]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[2]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[3]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[4]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[5]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[6]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[7]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[8]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[9]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[10]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[11]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[12]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[13]"), null, null);
    TriggerAddEventUnitCreated(gt_TurretLaggTestTrigger, UnitRefFromVariable("gv_probes[14]"), null, null);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 28), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 21), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 22), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 23), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("TerranBuild", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel6", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel7", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel8", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel9", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel10", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel11", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel12", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoTurretlevel13", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("Automatedmine", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("AutomatedMineLevel8", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 25), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("ProtossBuild", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel4", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel5", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel6", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel7", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel8", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorLevel9", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLaggTestTrigger, null, AbilityCommand("UpgradetoGeneratorMax", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ninja Dialog
//--------------------------------------------------------------------------------------------------
bool gt_NinjaDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoB7B25B9C_g;
    int autoB7B25B9C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(625, 475, c_anchorRight, 0, -150, true);
    gv_ninjadialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/65AEFDD8"));
    DialogSetTransparency(DialogLastCreated(), 25.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottom, 0, 25, StringExternal("Param/Value/A3E28D78"), StringExternal("Param/Value/A1EB6738"), "");
    gv_ninjadialog2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 525, 475, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/8F4AD040"), ColorWithAlpha(0,0,0,0), false, 2.0);
    autoB7B25B9C_g = gv_playerGroupProbes;
    autoB7B25B9C_var = -1;
    while (true) {
        autoB7B25B9C_var = PlayerGroupNextPlayer(autoB7B25B9C_g, autoB7B25B9C_var);
        if (autoB7B25B9C_var < 0) { break; }
        if (((gv_ninjaBuffActiveFlag[autoB7B25B9C_var] == 1) && (gv_gameplayOptionsBankIsExist[autoB7B25B9C_var] == true) && ((BankValueGetAsInt(gv_banks[autoB7B25B9C_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) <= 20) || (BankValueGetAsFlag(gv_gameplayOptionsBanks[autoB7B25B9C_var], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog) == true)))) {
            DialogSetVisible(gv_ninjadialog, PlayerGroupSingle(autoB7B25B9C_var), true);
        }
        else {
            if ((gv_ninjaBuffActiveFlag[autoB7B25B9C_var] == 1) && (gv_gameplayOptionsBankIsExist[autoB7B25B9C_var] == true) && (BankValueGetAsInt(gv_gameplayOptionsBanks[autoB7B25B9C_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount) <= 6)) {
                UIShowTextCrawl(PlayerGroupSingle(autoB7B25B9C_var), StringExternal("Param/Value/9644CC1B"), StringExternal("Param/Value/80529FBD"), 10.0, SoundLink("UI_TransmissionStart", -1), SoundLink("TextCrawlType", -1));
                lv_i = BankValueGetAsInt(gv_gameplayOptionsBanks[autoB7B25B9C_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount);
                lv_i += 1;
                BankValueSetFromInt(gv_gameplayOptionsBanks[autoB7B25B9C_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount, lv_i);
                BankSave(gv_gameplayOptionsBanks[autoB7B25B9C_var]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NinjaDialog_Init () {
    gt_NinjaDialog = TriggerCreate("gt_NinjaDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TurretBuff
//--------------------------------------------------------------------------------------------------
bool gt_TurretBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto993F628D_ae = 14;
    const int auto993F628D_ai = 1;
    const int auto84610290_ae = 14;
    const int auto84610290_ai = 1;
    playergroup auto98FA731A_g;
    int auto98FA731A_var;
    playergroup autoB9CEAC05_g;
    int autoB9CEAC05_var;
    playergroup auto29561C09_g;
    int auto29561C09_var;
    playergroup auto143E7CAA_g;
    int auto143E7CAA_var;
    playergroup autoD1C9DDE1_g;
    int autoD1C9DDE1_var;
    playergroup autoDB7FBD50_g;
    int autoDB7FBD50_var;
    playergroup autoB87BEB05_g;
    int autoB87BEB05_var;
    playergroup auto2B3C4361_g;
    int auto2B3C4361_var;
    int lv_gameTimeMinutes = gv_gameTimeMinutes;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if(GameAttributeGameValue("1") == "0005"){ 
        lv_gameTimeMinutes += 10;
        gv_announceswitch[0] = 1;
        gv_announceswitch[1] = 1;
        gv_announceswitch[2] = 1;
        gv_announceswitch[3] = 1;
    }

    if ((gv_announceswitch[8] == 0) && (gv_gameTimeMinutes == 2)) {
        lv_i = 1;
        for ( ; ( (auto993F628D_ai >= 0 && lv_i <= auto993F628D_ae) || (auto993F628D_ai < 0 && lv_i >= auto993F628D_ae) ) ; lv_i += auto993F628D_ai ) {
            if (((gv_side[lv_i] != "Zealot") && (gv_hunterStatus[lv_i] == false) && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && ((UnitIsAlive(gv_probes[lv_i]) == true) || (gv_probeSpiritStatus[lv_i] == true)))) {
                lv_j = 1;
                for ( ; ( (auto84610290_ai >= 0 && lv_j <= auto84610290_ae) || (auto84610290_ai < 0 && lv_j >= auto84610290_ae) ) ; lv_j += auto84610290_ai ) {
                    if (((gv_side[lv_j] != "Zealot") && (gv_hunterStatus[lv_j] == false) && (PlayerType(lv_j) == c_playerTypeUser) && ((UnitIsAlive(gv_probes[lv_j]) == true) || (gv_probeSpiritStatus[lv_j] == true)))) {
                        libNtve_gf_SetAlliance(lv_i, lv_j, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                    }

                }
            }

        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/94EED91B"));
        gv_announceswitch[8] = 1;
        TriggerExecute(gt_NinjaDialog, true, false);
        TriggerExecute(gt_BaseDialog, true, false);
    }

    if ((lv_gameTimeMinutes == 3) && (gv_announceswitch[0] == 0)) {
        gv_announceswitch[0] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/E2E93B74"));
        auto98FA731A_g = gv_playerGroupHunters;
        auto98FA731A_var = -1;
        while (true) {
            auto98FA731A_var = PlayerGroupNextPlayer(auto98FA731A_g, auto98FA731A_var);
            if (auto98FA731A_var < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", auto98FA731A_var, "2.5");
        }
    }

    if ((lv_gameTimeMinutes == 5) && (gv_announceswitch[1] == 0)) {
        gv_announceswitch[1] = 1;
        gv_largeswitch = 0;
        gv_chaosswitch = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/4C63D99C"));
        autoB9CEAC05_g = gv_playerGroupProbes;
        autoB9CEAC05_var = -1;
        while (true) {
            autoB9CEAC05_var = PlayerGroupNextPlayer(autoB9CEAC05_g, autoB9CEAC05_var);
            if (autoB9CEAC05_var < 0) { break; }
            gv_t1[autoB9CEAC05_var] = 0;
            gv_t2[autoB9CEAC05_var] = 0;
        }
    }

    if ((lv_gameTimeMinutes == 7) && (gv_announceswitch[2] == 0)) {
        gv_announceswitch[2] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/EAFB8D8F"));
        auto29561C09_g = gv_playerGroupProbes;
        auto29561C09_var = -1;
        while (true) {
            auto29561C09_var = PlayerGroupNextPlayer(auto29561C09_g, auto29561C09_var);
            if (auto29561C09_var < 0) { break; }
            gv_t3[auto29561C09_var] = 0;
        }
    }

    if ((lv_gameTimeMinutes == 10) && (gv_announceswitch[3] == 0)) {
        gv_announceswitch[3] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F8588055"));
        auto143E7CAA_g = gv_playerGroupHunters;
        auto143E7CAA_var = -1;
        while (true) {
            auto143E7CAA_var = PlayerGroupNextPlayer(auto143E7CAA_g, auto143E7CAA_var);
            if (auto143E7CAA_var < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", auto143E7CAA_var, "3.0");
        }
        autoD1C9DDE1_g = gv_playerGroupProbes;
        autoD1C9DDE1_var = -1;
        while (true) {
            autoD1C9DDE1_var = PlayerGroupNextPlayer(autoD1C9DDE1_g, autoD1C9DDE1_var);
            if (autoD1C9DDE1_var < 0) { break; }
            gv_t4[autoD1C9DDE1_var] = 0;
        }
    }

    if ((lv_gameTimeMinutes == 13) && (gv_announceswitch[4] == 0)) {
        gv_announceswitch[4] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F9BD5AB4"));
        autoDB7FBD50_g = gv_playerGroupProbes;
        autoDB7FBD50_var = -1;
        while (true) {
            autoDB7FBD50_var = PlayerGroupNextPlayer(autoDB7FBD50_g, autoDB7FBD50_var);
            if (autoDB7FBD50_var < 0) { break; }
            gv_t5[autoDB7FBD50_var] = 0;
        }
    }

    if ((lv_gameTimeMinutes == 15) && (gv_announceswitch[5] == 0)) {
        gv_announceswitch[5] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/69EF2633"));
        autoB87BEB05_g = gv_playerGroupHunters;
        autoB87BEB05_var = -1;
        while (true) {
            autoB87BEB05_var = PlayerGroupNextPlayer(autoB87BEB05_g, autoB87BEB05_var);
            if (autoB87BEB05_var < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", autoB87BEB05_var, "3.5");
        }
        auto2B3C4361_g = gv_playerGroupProbes;
        auto2B3C4361_var = -1;
        while (true) {
            auto2B3C4361_var = PlayerGroupNextPlayer(auto2B3C4361_g, auto2B3C4361_var);
            if (auto2B3C4361_var < 0) { break; }
            gv_t6[auto2B3C4361_var] = 0;
        }
    }

    if ((lv_gameTimeMinutes == 20) && (gv_announceswitch[6] == 0)) {
        gv_announceswitch[6] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/A1427049"));
    }

    if ((lv_gameTimeMinutes == 25) && (gv_announceswitch[7] == 0)) {
        gv_announceswitch[7] = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/47B69289"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretBuff_Init () {
    gt_TurretBuff = TriggerCreate("gt_TurretBuff_Func");
    TriggerAddEventTimePeriodic(gt_TurretBuff, gf_PvZ2Time(16.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Dialog
//--------------------------------------------------------------------------------------------------
bool gt_BaseDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto512220CB_g;
    int auto512220CB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(625, 655, c_anchorRight, 0, -150, true);
    gv_basedialog = DialogLastCreated();
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/1ACD09A5"));
    DialogSetTransparency(DialogLastCreated(), 25.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottom, 0, 25, StringExternal("Param/Value/9A8E969F"), StringExternal("Param/Value/E24D915B"), "");
    gv_basedialog2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 525, 655, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/4ECBB671"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto512220CB_g = gv_playerGroupProbes;
    auto512220CB_var = -1;
    while (true) {
        auto512220CB_var = PlayerGroupNextPlayer(auto512220CB_g, auto512220CB_var);
        if (auto512220CB_var < 0) { break; }
        if (((gv_turretcount[auto512220CB_var] >= 1) && (gv_gameplayOptionsBankIsExist[auto512220CB_var] == true) && ((BankValueGetAsInt(gv_banks[auto512220CB_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games) <= 20) || (BankValueGetAsFlag(gv_gameplayOptionsBanks[auto512220CB_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog) == true)))) {
            DialogSetVisible(gv_basedialog, PlayerGroupSingle(auto512220CB_var), true);
        }
        else {
            if (((gv_turretcount[auto512220CB_var] >= 1) && (gv_gameplayOptionsBankIsExist[auto512220CB_var] == true) && (BankValueGetAsInt(gv_gameplayOptionsBanks[auto512220CB_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount) <= 6))) {
                UIShowTextCrawl(PlayerGroupSingle(auto512220CB_var), StringExternal("Param/Value/617DA7EF"), StringExternal("Param/Value/543F7978"), 10.0, SoundLink("UI_TransmissionStart", -1), SoundLink("TextCrawlType", -1));
                lv_i = BankValueGetAsInt(gv_gameplayOptionsBanks[auto512220CB_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount);
                lv_i += 1;
                BankValueSetFromInt(gv_gameplayOptionsBanks[auto512220CB_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_buffDialogSuppressedMsgCount, lv_i);
                BankSave(gv_gameplayOptionsBanks[auto512220CB_var]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BaseDialog_Init () {
    gt_BaseDialog = TriggerCreate("gt_BaseDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add
//--------------------------------------------------------------------------------------------------
bool gt_Add_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB978ABF8_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }

        if (!((gv_gameTimeMinutes <= 24))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitRegion() != RegionFromId(152)) && (EventUnitRegion() != RegionFromId(153)) && (EventUnitRegion() != RegionFromId(215)) && (EventUnitRegion() != RegionFromId(98)) && (EventUnitRegion() != RegionFromId(124)) && (UnitCount("Probe", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 2)) {
        UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
        SoundPlayForPlayer(SoundLink("PvZAudioMegabase2", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/1FD686B4"));
        SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/06EE1AAB"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
    }

    if ((EventUnitRegion() == RegionFromId(98)) && (UnitCount("Probe", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 4)) {
        UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
        SoundPlayForPlayer(SoundLink("PvZAudioMegabase4", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/91868097"));
        UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/00CCA2D1"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
    }

    if (((UnitCount("Probe", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 3) && ((EventUnitRegion() == RegionFromId(153)) || (EventUnitRegion() == RegionFromId(215)) || (EventUnitRegion() == RegionFromId(124))))) {
        UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
        SoundPlayForPlayer(SoundLink("PvZAudioMegabase3", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/D6EDFA95"));
        UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/EAD62024"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
    }

    if ((EventUnitRegion() == RegionFromId(152)) && (UnitCount("Probe", c_playerAny, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
        SoundPlayForPlayer(SoundLink("PvZAudioBeholdShakurastemple", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/41FE39D5"));
        VisRevealArea(UnitGetOwner(EventUnit()), RegionFromId(152), 30.0, false);
    }

    if ((gv_gameTimeMinutes < 5) && (GameAttributeGameValue("1") != "0005")) {
        autoB978ABF8_val = gv_chosenMap;
        if (autoB978ABF8_val == 4) {
            if (((EventUnitRegion() == RegionFromId(157)) || (EventUnitRegion() == RegionFromId(134)) || (EventUnitRegion() == RegionFromId(158)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/CA38A868"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/6803E40D"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 5) {
            if (((EventUnitRegion() == RegionFromId(143)) || (EventUnitRegion() == RegionFromId(203)) || (EventUnitRegion() == RegionFromId(153)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/DBA35B55"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/FB8BB66C"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 6) {
            if (((EventUnitRegion() == RegionFromId(163)) || (EventUnitRegion() == RegionFromId(129)) || (EventUnitRegion() == RegionFromId(141)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/1D5072A1"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/7CEA5DA3"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 7) {
            if (((EventUnitRegion() == RegionFromId(160)) || (EventUnitRegion() == RegionFromId(157)) || (EventUnitRegion() == RegionFromId(134)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/C156C856"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/B60BAA8B"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 8) {
            if (((EventUnitRegion() == RegionFromId(159)) || (EventUnitRegion() == RegionFromId(149)) || (EventUnitRegion() == RegionFromId(150)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/420E0291"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/938E0431"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 9) {
            if (((EventUnitRegion() == RegionFromId(109)) || (EventUnitRegion() == RegionFromId(115)) || (EventUnitRegion() == RegionFromId(114)) || (EventUnitRegion() == RegionFromId(113)) || (EventUnitRegion() == RegionFromId(118)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/B9787FFE"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/B957BEF3"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 10) {
            if (((EventUnitRegion() == RegionFromId(157)) || (EventUnitRegion() == RegionFromId(145)) || (EventUnitRegion() == RegionFromId(134)) || (EventUnitRegion() == RegionFromId(158)) || (EventUnitRegion() == RegionFromId(139)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/4C8FFDFA"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/B84FE43F"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else if (autoB978ABF8_val == 11) {
            if (((EventUnitRegion() == RegionFromId(131)) || (EventUnitRegion() == RegionFromId(135)) || (EventUnitRegion() == RegionFromId(138)))) {
                UnitBehaviorAddPlayer(EventUnit(), "MegaBaseNerf", 0, 1);
                SoundPlayForPlayer(SoundLink("PvZAudioGold5minute", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/012FA2BE"));
                UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/6091DE62"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
            }

        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Add_Init () {
    gt_Add = TriggerCreate("gt_Add_Func");
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("1"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("2"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("3"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("4"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("5"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("6"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("7"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("8"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("9"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("10"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("11"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("12"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("13"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("14"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("15"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("16"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("17"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("18"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("19"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("20"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("21"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("22"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("23"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("24"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("25"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("26"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-001"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-002"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-003"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-004"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-005"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-006"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-007"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-008"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-009-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-010"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-011"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-012"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-013"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-014-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-015-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-016-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-017"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-018-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-019-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-020-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-021-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-022"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-023"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-024"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-025"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-026-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-027-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-028"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-029"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-030"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-031"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-032"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-033"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-034-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-035"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-036"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-037"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-2-038"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-3-001-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("MBN-3-002-Gold"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("3-1"), true);
    TriggerAddEventUnitRegion(gt_Add, null, RegionFromName("4-2"), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove
//--------------------------------------------------------------------------------------------------
bool gt_Remove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Probe"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "MegaBaseNerf") == true)) {
        UnitBehaviorRemove(EventUnit(), "MegaBaseNerf", 1);
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaDebug, StringExternal("Param/Value/035F2853"));
        UIAlertUnit("Error", UnitGetOwner(EventUnit()), StringExternal("Param/Value/41C14968"), "Assets\\Textures\\btn-building-protoss-nexus.dds", EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Remove_Init () {
    gt_Remove = TriggerCreate("gt_Remove_Func");
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("1"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("2"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("3"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("4"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("5"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("6"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("7"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("8"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("9"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("10"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("11"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("12"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("13"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("14"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("15"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("16"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("17"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("18"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("19"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("20"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("21"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("22"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("23"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("24"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("25"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("26"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-001"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-002"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-003"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-004"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-005"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-006"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-007"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-008"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-009-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-010"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-011"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-012"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-013"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-014-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-015-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-016-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-017"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-018-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-019-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-020-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-021-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-022"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-023"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-024"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-025"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-026-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-027-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-028"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-029"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-030"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-031"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-032"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-033"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-034-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-3-001-Gold"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-035"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-036"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-037"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("MBN-2-038"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("3-1"), false);
    TriggerAddEventUnitRegion(gt_Remove, null, RegionFromName("4-2"), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 1
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 1) && (UnitCount("DestructibleKorhalFlag", 1, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion1_Init () {
    gt_FlagRegion1 = TriggerCreate("gt_FlagRegion1_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion1, null, RegionFromId(174), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 2
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 2) && (UnitCount("DestructibleKorhalFlag", 2, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion2_Init () {
    gt_FlagRegion2 = TriggerCreate("gt_FlagRegion2_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion2, null, RegionFromId(175), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 3
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 3) && (UnitCount("DestructibleKorhalFlag", 3, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion3_Init () {
    gt_FlagRegion3 = TriggerCreate("gt_FlagRegion3_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion3, null, RegionFromId(176), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 4
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 4) && (UnitCount("DestructibleKorhalFlag", 4, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion4_Init () {
    gt_FlagRegion4 = TriggerCreate("gt_FlagRegion4_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion4, null, RegionFromId(177), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 5
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 5) && (UnitCount("DestructibleKorhalFlag", 5, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion5_Init () {
    gt_FlagRegion5 = TriggerCreate("gt_FlagRegion5_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion5, null, RegionFromId(178), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 6
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 6) && (UnitCount("DestructibleKorhalFlag", 6, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion6_Init () {
    gt_FlagRegion6 = TriggerCreate("gt_FlagRegion6_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion6, null, RegionFromId(179), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 7
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 7) && (UnitCount("DestructibleKorhalFlag", 7, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion7_Init () {
    gt_FlagRegion7 = TriggerCreate("gt_FlagRegion7_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion7, null, RegionFromId(180), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 8
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 8) && (UnitCount("DestructibleKorhalFlag", 8, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion8_Init () {
    gt_FlagRegion8 = TriggerCreate("gt_FlagRegion8_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion8, null, RegionFromId(181), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 9
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 9) && (UnitCount("DestructibleKorhalFlag", 9, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion9_Init () {
    gt_FlagRegion9 = TriggerCreate("gt_FlagRegion9_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion9, null, RegionFromId(182), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 10
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 10) && (UnitCount("DestructibleKorhalFlag", 10, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion10_Init () {
    gt_FlagRegion10 = TriggerCreate("gt_FlagRegion10_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion10, null, RegionFromId(183), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 11
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 11) && (UnitCount("DestructibleKorhalFlag", 11, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion11_Init () {
    gt_FlagRegion11 = TriggerCreate("gt_FlagRegion11_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion11, null, RegionFromId(184), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 12
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 12) && (UnitCount("DestructibleKorhalFlag", 12, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion12_Init () {
    gt_FlagRegion12 = TriggerCreate("gt_FlagRegion12_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion12, null, RegionFromId(185), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 13
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 13) && (UnitCount("DestructibleKorhalFlag", 13, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion13_Init () {
    gt_FlagRegion13 = TriggerCreate("gt_FlagRegion13_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion13, null, RegionFromId(186), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 14
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 14) && (UnitCount("DestructibleKorhalFlag", 14, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion14_Init () {
    gt_FlagRegion14 = TriggerCreate("gt_FlagRegion14_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion14, null, RegionFromId(187), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Region 15
//--------------------------------------------------------------------------------------------------
bool gt_FlagRegion15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitGetOwner(EventUnit()) != 15) && (UnitCount("DestructibleKorhalFlag", 15, EventUnitRegion(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        UnitBehaviorAddPlayer(gv_probes[UnitGetOwner(EventUnit())], "CannotBuild", 0, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagRegion15_Init () {
    gt_FlagRegion15 = TriggerCreate("gt_FlagRegion15_Func");
    TriggerAddEventUnitRegion(gt_FlagRegion15, null, RegionFromId(188), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Flag Region 1
//--------------------------------------------------------------------------------------------------
bool gt_NoFlagRegion1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Probe") && (UnitHasBehavior(EventUnit(), "CannotBuild") == true)) {
        UnitBehaviorRemove(EventUnit(), "CannotBuild", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoFlagRegion1_Init () {
    gt_NoFlagRegion1 = TriggerCreate("gt_NoFlagRegion1_Func");
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(174), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(175), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(176), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(177), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(178), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(179), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(180), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(181), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(182), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(183), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(184), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(185), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(186), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(187), false);
    TriggerAddEventUnitRegion(gt_NoFlagRegion1, null, RegionFromId(188), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: buildbase
//--------------------------------------------------------------------------------------------------
bool gt_buildbase_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto60828A62_g;
    int auto60828A62_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto60828A62_g = gv_playerGroupProbes;
    auto60828A62_var = -1;
    while (true) {
        auto60828A62_var = PlayerGroupNextPlayer(auto60828A62_g, auto60828A62_var);
        if (auto60828A62_var < 0) { break; }
        if ((gv_popupswitch3[auto60828A62_var] == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[auto60828A62_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp) == true)) {
            libNtve_gf_CreateDialogItemLabel(gv_probepopup[auto60828A62_var], 500, 250, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/DA77CC3D"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_probepopuplabel[auto60828A62_var] = DialogControlLastCreated();
            DialogSetVisible(gv_probepopup[auto60828A62_var], PlayerGroupSingle(auto60828A62_var), true);
            gv_poplevel[auto60828A62_var] = 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildbase_Init () {
    gt_buildbase = TriggerCreate("gt_buildbase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: placestructures
//--------------------------------------------------------------------------------------------------
bool gt_placestructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto97052E3B_g;
    int auto97052E3B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto97052E3B_g = gv_playerGroupProbes;
    auto97052E3B_var = -1;
    while (true) {
        auto97052E3B_var = PlayerGroupNextPlayer(auto97052E3B_g, auto97052E3B_var);
        if (auto97052E3B_var < 0) { break; }
        if ((gv_popupswitch3[auto97052E3B_var] == 0) && (gv_poplevel[auto97052E3B_var] == 1) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[auto97052E3B_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp) == true)) {
            DialogControlDestroy(gv_probepopuplabel[auto97052E3B_var]);
            libNtve_gf_CreateDialogItemLabel(gv_probepopup[auto97052E3B_var], 500, 250, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/EB9CE780"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_probepopuplabel[auto97052E3B_var] = DialogControlLastCreated();
            DialogSetVisible(gv_probepopup[auto97052E3B_var], PlayerGroupSingle(auto97052E3B_var), true);
            gv_poplevel[auto97052E3B_var] = 2;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_placestructures_Init () {
    gt_placestructures = TriggerCreate("gt_placestructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgradestructures
//--------------------------------------------------------------------------------------------------
bool gt_upgradestructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3EF7756B_g;
    int auto3EF7756B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3EF7756B_g = gv_playerGroupProbes;
    auto3EF7756B_var = -1;
    while (true) {
        auto3EF7756B_var = PlayerGroupNextPlayer(auto3EF7756B_g, auto3EF7756B_var);
        if (auto3EF7756B_var < 0) { break; }
        if ((gv_popupswitch3[auto3EF7756B_var] == 0) && (gv_poplevel[auto3EF7756B_var] == 2) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[auto3EF7756B_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp) == true)) {
            DialogControlDestroy(gv_probepopuplabel[auto3EF7756B_var]);
            libNtve_gf_CreateDialogItemLabel(gv_probepopup[auto3EF7756B_var], 500, 250, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/A12C67D1"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_probepopuplabel[auto3EF7756B_var] = DialogControlLastCreated();
            DialogSetVisible(gv_probepopup[auto3EF7756B_var], PlayerGroupSingle(auto3EF7756B_var), true);
            gv_poplevel[auto3EF7756B_var] = 3;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradestructures_Init () {
    gt_upgradestructures = TriggerCreate("gt_upgradestructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: defense/rebuild
//--------------------------------------------------------------------------------------------------
bool gt_defenserebuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5DDADB78_g;
    int auto5DDADB78_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DDADB78_g = gv_playerGroupProbes;
    auto5DDADB78_var = -1;
    while (true) {
        auto5DDADB78_var = PlayerGroupNextPlayer(auto5DDADB78_g, auto5DDADB78_var);
        if (auto5DDADB78_var < 0) { break; }
        if ((gv_popupswitch3[auto5DDADB78_var] == 0) && (gv_poplevel[auto5DDADB78_var] == 3) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[auto5DDADB78_var], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp) == true)) {
            DialogControlDestroy(gv_probepopuplabel[auto5DDADB78_var]);
            libNtve_gf_CreateDialogItemLabel(gv_probepopup[auto5DDADB78_var], 500, 250, c_anchorTopLeft, 50, 75, StringExternal("Param/Value/964FF44E"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_probepopuplabel[auto5DDADB78_var] = DialogControlLastCreated();
            DialogSetVisible(gv_probepopup[auto5DDADB78_var], PlayerGroupSingle(auto5DDADB78_var), true);
            gv_poplevel[auto5DDADB78_var] = 0;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_defenserebuild_Init () {
    gt_defenserebuild = TriggerCreate("gt_defenserebuild_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: closedialogz
//--------------------------------------------------------------------------------------------------
bool gt_closedialogz_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_menuswitch[EventPlayer()][1] == 1) && (EventDialogControl() == gv_menu1[EventPlayer()])) {
        gv_menuswitch[EventPlayer()][1] = 0;
        DialogSetVisible(gv_helpdialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((gv_menuswitch[EventPlayer()][1] == 0) && (EventDialogControl() == gv_menu1[EventPlayer()])) {
            gv_menuswitch[EventPlayer()][1] = 1;
            DialogSetVisible(gv_helpdialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }

    }
    if (((EventDialogControl() == gv_ninjadialog2) || (EventDialogControl() == gv_basedialog2) || (EventDialogControl() == gv_closewindow) || (EventDialogControl() == gv_closewindow2) || (EventDialogControl() == gv_closewindow3[EventPlayer()]) || (EventDialogControl() == gv_closewindow4[EventPlayer()]))) {
        if ((DialogIsVisible(gv_ninjadialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_ninjadialog, PlayerGroupSingle(EventPlayer()), false);
        }

        if ((DialogIsVisible(gv_basedialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_basedialog, PlayerGroupSingle(EventPlayer()), false);
        }

        if ((DialogIsVisible(gv_zealotpopup, EventPlayer()) == true)) {
            DialogSetVisible(gv_zealotpopup, PlayerGroupSingle(EventPlayer()), false);
        }

        if ((DialogIsVisible(gv_suggesteddialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_suggesteddialog, PlayerGroupSingle(EventPlayer()), false);
        }

        if ((DialogIsVisible(gv_probepopup[EventPlayer()], EventPlayer()) == true)) {
            DialogSetVisible(gv_probepopup[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            if ((gv_poplevel[EventPlayer()] == 1)) {
                TriggerExecute(gt_placestructures, true, false);
            }
            else {
                if ((gv_poplevel[EventPlayer()] == 2)) {
                    TriggerExecute(gt_upgradestructures, true, false);
                }
                else {
                    if ((gv_poplevel[EventPlayer()] == 3)) {
                        TriggerExecute(gt_defenserebuild, true, false);
                    }

                }
            }
        }

        if ((DialogIsVisible(gv_helpdialog[EventPlayer()], EventPlayer()) == true)) {
            DialogSetVisible(gv_helpdialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            gv_menuswitch[EventPlayer()][1] = 0;
        }

    }

    if ((EventDialogControl() == gv_disablepopup)) {
        gf_GameplayOptionisChecked(gv_saveZealotPopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp, EventPlayer());
        gv_popupswitch = 1;
        DialogSetVisible(gv_zealotpopup, PlayerGroupSingle(EventPlayer()), false);
        TriggerEnable(gt_ironbladehelp, false);
        TriggerEnable(gt_steelleather, false);
        TriggerEnable(gt_silverreinforce, false);
        TriggerEnable(gt_golden, false);
        TriggerEnable(gt_Mithrilbone, false);
        TriggerEnable(gt_diammega, false);
        TriggerEnable(gt_diasuper, false);
        TriggerEnable(gt_pulver, false);
        TriggerEnable(gt_final, false);
    }

    if ((EventDialogControl() == gv_disablepopup2)) {
        gf_GameplayOptionisChecked(gv_saveZealotSuggested, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested, EventPlayer());
        gv_popupswitch2 = 1;
        DialogSetVisible(gv_suggesteddialog, PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_disablepopup3[EventPlayer()])) {
        gf_GameplayOptionisChecked(gv_saveProbePopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp, EventPlayer());
        gv_popupswitch3[EventPlayer()] = 1;
        DialogSetVisible(gv_probepopup[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    if ((EventDialogControl() == gv_closevoteboard)) {
        if ((DialogIsVisible(gv_voteKickDialogKickType[EventPlayer()], EventPlayer()) == true)) {
            DialogSetVisible(gv_voteKickDialogKickType[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        }

        if ((DialogIsVisible(gv_voteKickDialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(EventPlayer()), false);
        }

    }

    if ((EventDialogControl() == gv_uidialog)) {
        if ((gv_showhideui[EventPlayer()] == 0)) {
            gv_showhideui[EventPlayer()] = 1;
            DialogSetVisible(gv_marketPricesDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_resourcePerSecond[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_xPBarDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_buttonsdialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_gameplayOptionsMainDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_profileDialogMain, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_voteKickDialogMain, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            if ((gv_showhideui[EventPlayer()] == 1)) {
                gv_showhideui[EventPlayer()] = 0;
                DialogSetVisible(gv_marketPricesDialog, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_resourcePerSecond[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_xPBarDialog, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_buttonsdialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_gameplayOptionsMainDialog, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_profileDialogMain, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_voteKickDialogMain, PlayerGroupSingle(EventPlayer()), true);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_closedialogz_Init () {
    gt_closedialogz = TriggerCreate("gt_closedialogz_Func");
    TriggerAddEventDialogControl(gt_closedialogz, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_closedialogz, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: copperbladehelp
//--------------------------------------------------------------------------------------------------
bool gt_copperbladehelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100) && (TechTreeUnitCount(EventPlayer(), "Sword1", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/0B30ED22"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ironbladehelp, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_copperbladehelp_Init () {
    gt_copperbladehelp = TriggerCreate("gt_copperbladehelp_Func");
    TriggerAddEventPlayerPropChange(gt_copperbladehelp, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ironbladehelp
//--------------------------------------------------------------------------------------------------
bool gt_ironbladehelp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 100) && (TechTreeUnitCount(EventPlayer(), "Sword1", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword2", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/C0B6E128"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_steelleather, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ironbladehelp_Init () {
    gt_ironbladehelp = TriggerCreate("gt_ironbladehelp_Func");
    TriggerEnable(gt_ironbladehelp, false);
    TriggerAddEventPlayerPropChange(gt_ironbladehelp, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: steelleather
//--------------------------------------------------------------------------------------------------
bool gt_steelleather_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 400) && (TechTreeUnitCount(EventPlayer(), "Sword2", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword3", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/3FCFC326"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_silverreinforce, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_steelleather_Init () {
    gt_steelleather = TriggerCreate("gt_steelleather_Func");
    TriggerEnable(gt_steelleather, false);
    TriggerAddEventPlayerPropChange(gt_steelleather, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: silverreinforce
//--------------------------------------------------------------------------------------------------
bool gt_silverreinforce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 600) && (TechTreeUnitCount(EventPlayer(), "Sword3", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword4", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/54BBAEF9"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_golden, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_silverreinforce_Init () {
    gt_silverreinforce = TriggerCreate("gt_silverreinforce_Func");
    TriggerEnable(gt_silverreinforce, false);
    TriggerAddEventPlayerPropChange(gt_silverreinforce, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: golden
//--------------------------------------------------------------------------------------------------
bool gt_golden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 1600) && (TechTreeUnitCount(EventPlayer(), "Sword4", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword5", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/6C74A8C7"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_Mithrilbone, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_golden_Init () {
    gt_golden = TriggerCreate("gt_golden_Func");
    TriggerEnable(gt_golden, false);
    TriggerAddEventPlayerPropChange(gt_golden, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mithrilbone
//--------------------------------------------------------------------------------------------------
bool gt_Mithrilbone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 5200) && (TechTreeUnitCount(EventPlayer(), "Sword4", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword5", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword7", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/A751A4B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_diammega, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mithrilbone_Init () {
    gt_Mithrilbone = TriggerCreate("gt_Mithrilbone_Func");
    TriggerEnable(gt_Mithrilbone, false);
    TriggerAddEventPlayerPropChange(gt_Mithrilbone, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: diammega
//--------------------------------------------------------------------------------------------------
bool gt_diammega_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 11200) && (TechTreeUnitCount(EventPlayer(), "Sword7", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword8", c_techCountQueuedOrBetter) < 1) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/594577A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_diasuper, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_diammega_Init () {
    gt_diammega = TriggerCreate("gt_diammega_Func");
    TriggerEnable(gt_diammega, false);
    TriggerAddEventPlayerPropChange(gt_diammega, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: diasuper
//--------------------------------------------------------------------------------------------------
bool gt_diasuper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 32000) && (TechTreeUnitCount(EventPlayer(), "Sword8", c_techCountQueuedOrBetter) >= 1) && (TechTreeUnitCount(EventPlayer(), "Sword8", c_techCountQueuedOrBetter) < 3) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/00BB53B3"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_pulver, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_diasuper_Init () {
    gt_diasuper = TriggerCreate("gt_diasuper_Func");
    TriggerEnable(gt_diasuper, false);
    TriggerAddEventPlayerPropChange(gt_diasuper, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pulver
//--------------------------------------------------------------------------------------------------
bool gt_pulver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 89600) || (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 2)) && (TechTreeUnitCount(EventPlayer(), "Sword8", c_techCountQueuedOrBetter) >= 3) && (TechTreeUnitCount(EventPlayer(), "Sword10", c_techCountQueuedOrBetter) < 3) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/BC18D76F"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_final, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pulver_Init () {
    gt_pulver = TriggerCreate("gt_pulver_Func");
    TriggerEnable(gt_pulver, false);
    TriggerAddEventPlayerPropChange(gt_pulver, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: final
//--------------------------------------------------------------------------------------------------
bool gt_final_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= 350000) || (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= 4)) && (gv_popupswitch == 0) && (BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp) == true)) {
        DialogControlDestroy(gv_zpopuplabel);
        libNtve_gf_CreateDialogItemLabel(gv_zealotpopup, 500, 250, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/CFA83284"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zpopuplabel = DialogControlLastCreated();
        DialogSetVisible(gv_zealotpopup, gv_playerGroupZealots, true);
        DialogSetVisible(gv_zealotpopup, gv_playerGroupHunters, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_final_Init () {
    gt_final = TriggerCreate("gt_final_Func");
    TriggerEnable(gt_final, false);
    TriggerAddEventPlayerPropChange(gt_final, PlayerGroupPlayer(gv_playerGroupZealots, 1), c_playerPropMinerals);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HelpMenu
//--------------------------------------------------------------------------------------------------
bool gt_HelpMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDF134255_g;
    int autoDF134255_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF134255_g = PlayerGroupActive();
    autoDF134255_var = -1;
    while (true) {
        autoDF134255_var = PlayerGroupNextPlayer(autoDF134255_g, autoDF134255_var);
        if (autoDF134255_var < 0) { break; }
        DialogCreate(975, 715, c_anchorCenter, 0, -100, false);
        gv_helpdialog[autoDF134255_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 100, 50, c_anchorBottom, 0, 25, StringToText(""), StringExternal("Param/Value/115FCC9B"), "");
        gv_helpclose[autoDF134255_var][0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 50, 50, c_anchorTopRight, 10, 10, StringToText(""), StringExternal("Param/Value/0C1A17C1"), "");
        gv_helpclose2[autoDF134255_var][0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/6CAA9CE1"), StringExternal("Param/Value/4DFDE1FC"), "");
        gv_page1[autoDF134255_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/C105CD94"), StringExternal("Param/Value/334FDF3C"), "");
        gv_page2[autoDF134255_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoDF134255_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/D198F16C"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_helplabel[autoDF134255_var] = DialogControlLastCreated();
        DialogSetTitle(gv_helpdialog[autoDF134255_var], StringExternal("Param/Value/47C9EC83"));
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 35, StringToText(""), StringExternal("Param/Value/5F27DC2A"), "");
        gv_listitems[autoDF134255_var][1] = DialogControlLastCreated();
        DialogControlSetEnabled(gv_listitems[autoDF134255_var][1], PlayerGroupSingle(autoDF134255_var), false);
        DialogControlSetEnabled(gv_page1[autoDF134255_var], PlayerGroupSingle(autoDF134255_var), false);
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 110, StringToText(""), StringExternal("Param/Value/AA5A2044"), "");
        gv_listitems[autoDF134255_var][2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 185, StringToText(""), StringExternal("Param/Value/CC2A969A"), "");
        gv_listitems[autoDF134255_var][3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 260, StringToText(""), StringExternal("Param/Value/5A8134CF"), "");
        gv_listitems[autoDF134255_var][4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 335, StringToText(""), StringExternal("Param/Value/6EFA0371"), "");
        gv_listitems[autoDF134255_var][5] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 410, StringToText(""), StringExternal("Param/Value/1E706DA7"), "");
        gv_listitems[autoDF134255_var][6] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 485, StringToText(""), StringExternal("Param/Value/569A2FDF"), "");
        gv_listitems[autoDF134255_var][7] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 560, StringToText(""), StringExternal("Param/Value/0F9ED2E5"), "");
        gv_listitems[autoDF134255_var][8] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoDF134255_var], 165, 50, c_anchorTopLeft, 35, 635, StringToText(""), StringExternal("Param/Value/50ECB8B0"), "");
        gv_listitems[autoDF134255_var][9] = DialogControlLastCreated();
        DialogCreate(75, 75, c_anchorTopLeft, 192, -3, false);
        gv_buttonsdialog[autoDF134255_var] = DialogLastCreated();
        DialogSetImageVisible(gv_buttonsdialog[autoDF134255_var], false);
        libNtve_gf_CreateDialogItemButton(gv_buttonsdialog[autoDF134255_var], 75, 75, c_anchorCenter, 0, 0, StringExternal("Param/Value/D89D17FA"), StringExternal("Param/Value/A2A40E16"), "");
        gv_menu1[autoDF134255_var] = DialogControlLastCreated();
        DialogSetVisible(gv_buttonsdialog[autoDF134255_var], PlayerGroupSingle(autoDF134255_var), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpMenu_Init () {
    gt_HelpMenu = TriggerCreate("gt_HelpMenu_Func");
    TriggerAddEventTimeElapsed(gt_HelpMenu, gf_PvZ2Time(20.0), c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HelpRightLeftClose
//--------------------------------------------------------------------------------------------------
bool gt_HelpRightLeftClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE8BF0263_g;
    int autoE8BF0263_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE8BF0263_g = PlayerGroupActive();
    autoE8BF0263_var = -1;
    while (true) {
        autoE8BF0263_var = PlayerGroupNextPlayer(autoE8BF0263_g, autoE8BF0263_var);
        if (autoE8BF0263_var < 0) { break; }
        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_helpclose[autoE8BF0263_var][0])) {
            gv_menuswitch[EventPlayer()][1] = 0;
            DialogSetVisible(gv_helpdialog[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_helpclose2[autoE8BF0263_var][0])) {
            gv_menuswitch[EventPlayer()][1] = 0;
            DialogSetVisible(gv_helpdialog[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page1[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/0B81FAAD"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/DC08E4D8"), StringExternal("Param/Value/7184FF10"), "");
            gv_page1[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_page1[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/34CDD369"), StringExternal("Param/Value/B83DCE8A"), "");
            gv_page2[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page2[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/66C0F914"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/112D16CA"), StringExternal("Param/Value/6AAF0F67"), "");
            gv_page1[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/BF868582"), StringExternal("Param/Value/40385B23"), "");
            gv_page3[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page3[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/11ECF444"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/218A8DE2"), StringExternal("Param/Value/E937A77C"), "");
            gv_page2[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/4D2CFC3F"), StringExternal("Param/Value/E6F8255A"), "");
            gv_page4[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page4[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/15A7EAFF"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/A141EAD4"), StringExternal("Param/Value/67A8DA6F"), "");
            gv_page3[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/79331EDC"), StringExternal("Param/Value/523927D5"), "");
            gv_page5[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page5[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/7077DB96"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/C256A29A"), StringExternal("Param/Value/6FBA4BA6"), "");
            gv_page4[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/DC8CBC20"), StringExternal("Param/Value/9982A753"), "");
            gv_page6[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page6[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/13548087"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/96F4E9D9"), StringExternal("Param/Value/24570071"), "");
            gv_page5[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/B9DC83F1"), StringExternal("Param/Value/8FE4E3C6"), "");
            gv_page7[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page7[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/587EACE3"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/640D3C0D"), StringExternal("Param/Value/BA8F9049"), "");
            gv_page6[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/BB51A4EA"), StringExternal("Param/Value/EF84A4AD"), "");
            gv_page8[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page8[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/C3922E8C"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/A5F0762E"), StringExternal("Param/Value/FA673C5E"), "");
            gv_page7[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/218EFB25"), StringExternal("Param/Value/BCF416A5"), "");
            gv_page9[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_page9[autoE8BF0263_var])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/E0A70EE9"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/08599C38"), StringExternal("Param/Value/9866BAE3"), "");
            gv_page8[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/D4FE94B0"), StringExternal("Param/Value/99074AAB"), "");
            gv_page9[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_page9[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][1])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/E0E359EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/DEF4AA98"), StringExternal("Param/Value/EEB3DCBF"), "");
            gv_page1[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_page1[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/E8E5872A"), StringExternal("Param/Value/85308F03"), "");
            gv_page2[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][2])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/9C1E5D1C"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/4864FB0E"), StringExternal("Param/Value/E0458E59"), "");
            gv_page2[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/AB11AEFA"), StringExternal("Param/Value/25AB5014"), "");
            gv_page3[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][3])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/B041A5D7"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/735D9EBC"), StringExternal("Param/Value/D67C9800"), "");
            gv_page3[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/4E535786"), StringExternal("Param/Value/030990EA"), "");
            gv_page4[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][4])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/2D845816"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/405E9AF9"), StringExternal("Param/Value/806BF0FB"), "");
            gv_page4[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/36F4FDDB"), StringExternal("Param/Value/82023072"), "");
            gv_page5[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][5])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/EDEB98AB"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/C7538D18"), StringExternal("Param/Value/71B109CB"), "");
            gv_page5[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/6DCED74C"), StringExternal("Param/Value/3762C735"), "");
            gv_page6[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][6])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/8E6A4370"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/BD9FB282"), StringExternal("Param/Value/25E9C82E"), "");
            gv_page6[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/48EBB62B"), StringExternal("Param/Value/D6F3663E"), "");
            gv_page7[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][7])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/3532619B"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/D6B30D30"), StringExternal("Param/Value/759660F2"), "");
            gv_page7[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/220A846E"), StringExternal("Param/Value/2C474535"), "");
            gv_page8[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][8])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/91B32D2C"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/5626614B"), StringExternal("Param/Value/60D14749"), "");
            gv_page8[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), false);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), true);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/F7419E20"), StringExternal("Param/Value/474520EA"), "");
            gv_page9[autoE8BF0263_var] = DialogControlLastCreated();
        }

        if ((EventPlayer() == autoE8BF0263_var) && (EventDialogControl() == gv_listitems[autoE8BF0263_var][9])) {
            DialogControlDestroy(gv_helplabel[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemLabel(gv_helpdialog[autoE8BF0263_var], 725, 675, c_anchorCenter, 100, 75, StringExternal("Param/Value/53B0E8C5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_helplabel[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlDestroy(gv_page1[autoE8BF0263_var]);
            DialogControlDestroy(gv_page2[autoE8BF0263_var]);
            DialogControlDestroy(gv_page3[autoE8BF0263_var]);
            DialogControlDestroy(gv_page4[autoE8BF0263_var]);
            DialogControlDestroy(gv_page5[autoE8BF0263_var]);
            DialogControlDestroy(gv_page6[autoE8BF0263_var]);
            DialogControlDestroy(gv_page7[autoE8BF0263_var]);
            DialogControlDestroy(gv_page8[autoE8BF0263_var]);
            DialogControlDestroy(gv_page9[autoE8BF0263_var]);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/F76F93C4"), StringExternal("Param/Value/B5A2A87F"), "");
            gv_page8[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][1], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][2], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][3], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][4], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][5], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][6], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][7], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][8], PlayerGroupSingle(autoE8BF0263_var), true);
            DialogControlSetEnabled(gv_listitems[autoE8BF0263_var][9], PlayerGroupSingle(autoE8BF0263_var), false);
            libNtve_gf_CreateDialogItemButton(gv_helpdialog[autoE8BF0263_var], 50, 50, c_anchorBottomRight, 50, 25, StringExternal("Param/Value/2EE9B6E0"), StringExternal("Param/Value/4E9ED9E3"), "");
            gv_page9[autoE8BF0263_var] = DialogControlLastCreated();
            DialogControlSetEnabled(gv_page9[autoE8BF0263_var], PlayerGroupSingle(autoE8BF0263_var), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HelpRightLeftClose_Init () {
    gt_HelpRightLeftClose = TriggerCreate("gt_HelpRightLeftClose_Func");
    TriggerAddEventDialogControl(gt_HelpRightLeftClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit uses ability show/hide ranks
//--------------------------------------------------------------------------------------------------
bool gt_Unitusesabilityshowhideranks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDF88CAAC_g;
    int autoDF88CAAC_var;
    playergroup autoD0943961_g;
    int autoD0943961_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_labelRankStatus[EventPlayer()] == true)) {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", EventPlayer(), "Hide Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", EventPlayer(), "Icons\\hide ranks.dds");
        gv_labelRankStatus[EventPlayer()] = false;
        autoD0943961_g = PlayerGroupActive();
        autoD0943961_var = -1;
        while (true) {
            autoD0943961_var = PlayerGroupNextPlayer(autoD0943961_g, autoD0943961_var);
            if (autoD0943961_var < 0) { break; }
            TextTagShow(gv_playersLabelRanks[autoD0943961_var], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", EventPlayer(), "Show Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", EventPlayer(), "Icons\\show ranks.dds");
        gv_labelRankStatus[EventPlayer()] = true;
        autoDF88CAAC_g = PlayerGroupActive();
        autoDF88CAAC_var = -1;
        while (true) {
            autoDF88CAAC_var = PlayerGroupNextPlayer(autoDF88CAAC_g, autoDF88CAAC_var);
            if (autoDF88CAAC_var < 0) { break; }
            TextTagShow(gv_playersLabelRanks[autoDF88CAAC_var], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unitusesabilityshowhideranks_Init () {
    gt_Unitusesabilityshowhideranks = TriggerCreate("gt_Unitusesabilityshowhideranks_Func");
    TriggerAddEventUnitAbility(gt_Unitusesabilityshowhideranks, null, AbilityCommand("ShowHideRanks", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Gameplay Options Banks
//--------------------------------------------------------------------------------------------------
bool gt_InitGameplayOptionsBanks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto67C3F095_ae = 14;
    int auto67C3F095_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_regame == false)) {
        if ((gf_IsPlayerOnline(1) == true)) {
        }

        if ((gf_IsPlayerOnline(2) == true)) {
        }

        if ((gf_IsPlayerOnline(3) == true)) {
        }

        if ((gf_IsPlayerOnline(4) == true)) {
        }

        if ((gf_IsPlayerOnline(5) == true)) {
        }

        if ((gf_IsPlayerOnline(6) == true)) {
        }

        if ((gf_IsPlayerOnline(7) == true)) {
        }

        if ((gf_IsPlayerOnline(8) == true)) {
        }

        if ((gf_IsPlayerOnline(9) == true)) {
        }

        if ((gf_IsPlayerOnline(10) == true)) {
        }

        if ((gf_IsPlayerOnline(11) == true)) {
        }

        if ((gf_IsPlayerOnline(12) == true)) {
        }

        if ((gf_IsPlayerOnline(13) == true)) {
        }

        if ((gf_IsPlayerOnline(14) == true)) {
        }

    }

    auto67C3F095_var = 1;
    for ( ; auto67C3F095_var <= auto67C3F095_ae; auto67C3F095_var += 1 ) {
        if ((gf_IsPlayerOnline(auto67C3F095_var) == true)) {
            if ((BankExists("PvsZ2GameplayOptions", auto67C3F095_var) == false)) {
                UIDisplayMessage(PlayerGroupSingle(auto67C3F095_var), c_messageAreaDebug, StringExternal("Param/Value/E0A799F1"));
                gv_gameplayOptionsBankIsExist[auto67C3F095_var] = false;
            }
            else {
                gv_gameplayOptionsBankIsExist[auto67C3F095_var] = true;
            }
            BankLoad("PvsZ2GameplayOptions", auto67C3F095_var);
            gv_gameplayOptionsBanks[auto67C3F095_var] = BankLastCreated();
            BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
            if (((BankVerify(BankLastCreated()) == false) && (gv_gameplayOptionsBankIsExist[auto67C3F095_var] == true))) {
                UIDisplayMessage(PlayerGroupSingle(auto67C3F095_var), c_messageAreaDebug, StringExternal("Param/Value/4ED5504F"));
            }

        }

    }
    TriggerExecute(gt_InitGameplayOptionsDialog, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitGameplayOptionsBanks_Init () {
    gt_InitGameplayOptionsBanks = TriggerCreate("gt_InitGameplayOptionsBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Gameplay Options Dialog
//--------------------------------------------------------------------------------------------------
bool gt_InitGameplayOptionsDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8A398E86_ae = 14;
    int auto8A398E86_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(700, 400, c_anchorTopLeft, 240, -52, true);
    gv_gameplayOptionsMainDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 40, c_anchorTopLeft, 450, 50, StringExternal("Param/Value/204F51DA"), StringExternal("Param/Value/313AC5E9"), "");
    gv_gameplayOptionsButton = DialogControlLastCreated();
    DialogCreate(850, 650, c_anchorTop, 50, 0, true);
    gv_gameplayOptionsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 50, c_anchorTop, 250, 30, StringExternal("Param/Value/6963FB98"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorTopRight, 250, 510, StringExternal("Param/Value/1068E882"), StringExternal("Param/Value/51E2C70D"), "");
    gv_default = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 100, c_anchorTopRight, 50, 510, StringToText(""), StringExternal("Param/Value/A3F7585A"), "");
    gv_returntoGame = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 100, 75, StringExternal("Param/Value/A0D278D9"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 100, 123, StringExternal("Param/Value/9E74E983"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 110, StringToText(""), true);
    gv_autoCastRepairAbility = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, 173, StringExternal("Param/Value/6727050A"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 160, StringToText(""), true);
    gv_autoCastVoidPrisonAbility = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 100, 223, StringExternal("Param/Value/4A447BE1"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 210, StringToText(""), false);
    gv_saveProbeSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 100, 273, StringExternal("Param/Value/C5C182CC"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 260, StringToText(""), true);
    gv_saveScaleofProbeSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 100, 323, StringExternal("Param/Value/BD485B9B"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 310, StringToText(""), true);
    gv_saveColorofProbeSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 100, 373, StringExternal("Param/Value/E2BE8D3D"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 360, StringToText(""), true);
    gv_saveNameofProbeSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 75, StringExternal("Param/Value/4E1C5A5F"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopRight, 100, 123, StringExternal("Param/Value/B2A448F4"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 110, StringToText(""), true);
    gv_saveZealotSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 173, StringExternal("Param/Value/FA16F2C5"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 160, StringToText(""), true);
    gv_saveColorofZealotSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 223, StringExternal("Param/Value/768AFB16"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 210, StringToText(""), true);
    gv_saveNameofZealotSkin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 273, StringExternal("Param/Value/1B5C3A28"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 260, StringToText(""), true);
    gv_saveZealotSuggested = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 323, StringExternal("Param/Value/EDE8E885"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 310, StringToText(""), true);
    gv_saveZealotPopUp = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, 423, StringExternal("Param/Value/2A6D58CC"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 410, StringToText(""), true);
    gv_saveProbePopUp = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, 473, StringExternal("Param/Value/67285F48"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 460, StringToText(""), true);
    gv_saveNinjaOnOff = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 280, 50, c_anchorTopLeft, 100, 523, StringExternal("Param/Value/F9E62FBF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, 510, StringToText(""), false);
    gv_forceDisplayBuffDialog = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 373, StringExternal("Param/Value/F6DEE998"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopRight, 0, 423, StringExternal("Param/Value/4E408B59"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopRight, 350, 410, StringToText(""), true);
    gv_forceDisplayBuffDialog = DialogControlLastCreated();
    auto8A398E86_var = 1;
    for ( ; auto8A398E86_var <= auto8A398E86_ae; auto8A398E86_var += 1 ) {
        if ((PlayerType(auto8A398E86_var) == c_playerTypeUser) && (PlayerStatus(auto8A398E86_var) == c_playerStatusActive)) {
            if ((gv_gameplayOptionsBankIsExist[auto8A398E86_var] == true)) {
                gf_ValidateGameplayOption(gv_autoCastRepairAbility, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_autoCastVoidPrisonAbility, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveColorofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveColorofZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveNameofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveNameofZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveScaleofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveZealotPopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveZealotSuggested, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveProbePopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_saveNinjaOnOff, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, auto8A398E86_var, true);
                gf_ValidateGameplayOption(gv_forceDisplayBuffDialog, gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog, auto8A398E86_var, false);
                gf_ValidateGameplayOption(gv_autoShowCustomRank, gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank, auto8A398E86_var, true);
            }
            else {
                gf_SetDefaultSettingsofGameplayOptions(auto8A398E86_var, true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitGameplayOptionsDialog_Init () {
    gt_InitGameplayOptionsDialog = TriggerCreate("gt_InitGameplayOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gameplay Options Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_GameplayOptionsButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_gameplayOptionsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_gameplayOptionsDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_gameplayOptionsDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((gv_gameplayOptionsBankIsExist[EventPlayer()] == true)) {
            gf_ValidateGameplayOption(gv_autoCastRepairAbility, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_autoCastVoidPrisonAbility, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveColorofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveColorofZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveNameofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveNameofZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin, EventUnitPropertyChangeInt(), true);
            gf_ValidateGameplayOption(gv_saveProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveScaleofProbeSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveZealotSkin, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveZealotPopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveZealotSuggested, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveProbePopUp, gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_saveNinjaOnOff, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, EventPlayer(), true);
            gf_ValidateGameplayOption(gv_forceDisplayBuffDialog, gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog, EventPlayer(), false);
            gf_ValidateGameplayOption(gv_autoShowCustomRank, gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank, EventPlayer(), true);
        }
        else {
            gf_SetDefaultSettingsofGameplayOptions(EventPlayer(), true);
        }
        DialogSetVisible(gv_gameplayOptionsDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameplayOptionsButtonPressed_Init () {
    gt_GameplayOptionsButtonPressed = TriggerCreate("gt_GameplayOptionsButtonPressed_Func");
    TriggerEnable(gt_GameplayOptionsButtonPressed, false);
    TriggerAddEventDialogControl(gt_GameplayOptionsButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_DefaultButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_default))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetDefaultSettingsofGameplayOptions(EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefaultButtonPressed_Init () {
    gt_DefaultButtonPressed = TriggerCreate("gt_DefaultButtonPressed_Func");
    TriggerEnable(gt_DefaultButtonPressed, false);
    TriggerAddEventDialogControl(gt_DefaultButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Game Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoGameButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_returntoGame))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_gameplayOptionsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoGameButtonPressed_Init () {
    gt_ReturntoGameButtonPressed = TriggerCreate("gt_ReturntoGameButtonPressed_Func");
    TriggerEnable(gt_ReturntoGameButtonPressed, false);
    TriggerAddEventDialogControl(gt_ReturntoGameButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Option Checked
//--------------------------------------------------------------------------------------------------
bool gt_DialogItemOptionChecked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_autoCastRepairAbility)) {
        gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_autoCastRepairAbility, EventPlayer());
    }
    else {
        if ((EventDialogControl() == gv_autoCastVoidPrisonAbility)) {
            gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility, EventPlayer());
        }
        else {
            if ((EventDialogControl() == gv_saveProbeSkin)) {
                gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveProbeSkin, EventPlayer());
            }
            else {
                if ((EventDialogControl() == gv_saveScaleofProbeSkin)) {
                    gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin, EventPlayer());
                }
                else {
                    if ((EventDialogControl() == gv_saveColorofProbeSkin)) {
                        gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofProbeSkin, EventPlayer());
                    }
                    else {
                        if ((EventDialogControl() == gv_saveNameofProbeSkin)) {
                            gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin, EventPlayer());
                        }
                        else {
                            if ((EventDialogControl() == gv_saveZealotSkin)) {
                                gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSkin, EventPlayer());
                            }
                            else {
                                if ((EventDialogControl() == gv_saveColorofZealotSkin)) {
                                    gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveColorofZealotSkin, EventPlayer());
                                }
                                else {
                                    if ((EventDialogControl() == gv_saveNameofZealotSkin)) {
                                        gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin, EventPlayer());
                                    }
                                    else {
                                        if ((EventDialogControl() == gv_saveProbePopUp)) {
                                            gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveProbePopUp, EventPlayer());
                                        }
                                        else {
                                            if ((EventDialogControl() == gv_saveZealotPopUp)) {
                                                gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotPopUp, EventPlayer());
                                            }
                                            else {
                                                if ((EventDialogControl() == gv_saveZealotSuggested)) {
                                                    gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested, EventPlayer());
                                                }
                                                else {
                                                    if ((EventDialogControl() == gv_saveNinjaOnOff)) {
                                                        gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, EventPlayer());
                                                    }
                                                    else {
                                                        if ((EventDialogControl() == gv_forceDisplayBuffDialog)) {
                                                            gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_forceDisplayBuffDialog, EventPlayer());
                                                        }
                                                        else {
                                                            if ((EventDialogControl() == gv_autoShowCustomRank)) {
                                                                gf_GameplayOptionisChecked(EventDialogControl(), gv_gameplayOptionsBanksOptionsKeys.lv_autoShowCustomRank, EventPlayer());
                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogItemOptionChecked_Init () {
    gt_DialogItemOptionChecked = TriggerCreate("gt_DialogItemOptionChecked_Func");
    TriggerAddEventDialogControl(gt_DialogItemOptionChecked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init XP Bar
//--------------------------------------------------------------------------------------------------
bool gt_InitXPBar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_levelFraction1;
    fixed lv_levelFraction2;
    fixed lv_levelFractionFinal;

    // Automatic Variable Declarations
    const int auto023E979A_ae = 14;
    const int auto023E979A_ai = 1;
    const int autoD95BFD6B_ae = 15;
    int autoD95BFD6B_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorTopLeft, 240, -52, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_xPBarDialog = DialogLastCreated();
    lv_i = 1;
    for ( ; ( (auto023E979A_ai >= 0 && lv_i <= auto023E979A_ae) || (auto023E979A_ai < 0 && lv_i >= auto023E979A_ae) ) ; lv_i += auto023E979A_ai ) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_i), true);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 170, 40);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 280, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    gv_xPBarProgressBar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 267, 45, StringExternal("Param/Value/A5C8EB52"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarHP", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 520, PlayerGroupAll());
    gv_xPBarLabel = DialogControlLastCreated();
    autoD95BFD6B_var = 1;
    for ( ; autoD95BFD6B_var <= autoD95BFD6B_ae; autoD95BFD6B_var += 1 ) {
        gf_UpdateXPBar(autoD95BFD6B_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitXPBar_Init () {
    gt_InitXPBar = TriggerCreate("gt_InitXPBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Market Prices
//--------------------------------------------------------------------------------------------------
bool gt_InitMarketPrices_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 160, c_anchorTopLeft, -3, -3, true);
    gv_marketPricesDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 40, c_anchorTopLeft, 0, 74, (StringExternal("Param/Value/D7321397") + IntToText(gv_buy10MineralsPrice)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleNetTaskItem", PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_marketPricesBuyMinerals = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 40, c_anchorTopLeft, 0, 108, (StringExternal("Param/Value/33C55DC1") + IntToText(gv_sell10MineralsPrice)), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleNetTaskItem", PlayerGroupAll());
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemBackgroundVisible(DialogControlLastCreated(), false, PlayerGroupAll());
    gv_marketPricesSellMinerals = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitMarketPrices_Init () {
    gt_InitMarketPrices = TriggerCreate("gt_InitMarketPrices_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Choose Help Side
//--------------------------------------------------------------------------------------------------
bool gt_InitChooseHelpSide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 300, c_anchorTop, 100, 0, true);
    gv_chooseHelpSideDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 50, StringToText(""), StringExternal("Param/Value/17CC8514"), "");
    gv_chooseHelpSideProbe = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 125, StringToText(""), StringExternal("Param/Value/DFCEE0BA"), "");
    gv_chooseHelpSideZealot = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, 200, StringExternal("Param/Value/5CE1F5D6"), StringExternal("Param/Value/CFB5939D"), "");
    gv_chooseHelpSideObserver = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitChooseHelpSide_Init () {
    gt_InitChooseHelpSide = TriggerCreate("gt_InitChooseHelpSide_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Choose Help Side
//--------------------------------------------------------------------------------------------------
bool gt_EnableChooseHelpSide_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto65D4F85D_g;
    int auto65D4F85D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(gv_chooseHelpSideProbe, PlayerGroupAll(), true);
    auto65D4F85D_g = PlayerGroupActive();
    auto65D4F85D_var = -1;
    while (true) {
        auto65D4F85D_var = PlayerGroupNextPlayer(auto65D4F85D_g, auto65D4F85D_var);
        if (auto65D4F85D_var < 0) { break; }
        if ((PlayerGroupCount(gv_playerGroupHunters) >= gv_maxHuntersAllowed)) {
            DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupSingle(auto65D4F85D_var), false);
        }
        else {
            DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupSingle(auto65D4F85D_var), true);
        }
        if (((gf_PlayerIsDeveloper(auto65D4F85D_var) == true) || (gf_PlayerIsModerator(auto65D4F85D_var) == true) || (gf_PlayerIsDonor(auto65D4F85D_var) == true) || (gf_PlayerHasObserverAccess(auto65D4F85D_var) == true))) {
            DialogControlSetEnabled(gv_chooseHelpSideObserver, PlayerGroupSingle(auto65D4F85D_var), true);
        }
        else {
            DialogControlSetEnabled(gv_chooseHelpSideObserver, PlayerGroupSingle(auto65D4F85D_var), false);
        }
    }
    TimerWindowDestroy(gv_timerWindowChooseHelpSide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableChooseHelpSide_Init () {
    gt_EnableChooseHelpSide = TriggerCreate("gt_EnableChooseHelpSide_Func");
    TriggerAddEventTimer(gt_EnableChooseHelpSide, gv_timerChooseHelpSide);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Help Side Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ChooseHelpSidePressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoEE157B03_val;

    // Conditions
    if (testConds) {
        if (!(((gv_choosed[EventPlayer()] == false) && ((EventDialogControl() == gv_chooseHelpSideZealot) || (EventDialogControl() == gv_chooseHelpSideProbe))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_choosed[EventPlayer()] = true;
    DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(EventPlayer()), false);
    autoEE157B03_val = EventDialogControl();
    if (autoEE157B03_val == gv_chooseHelpSideProbe) {
        if ((UnitIsAlive(gv_probeSpirit[EventPlayer()]) == false)) {
            gf_ProbeDiesCreateProbeSpirit(EventPlayer());
        }

    }
    else if (autoEE157B03_val == gv_chooseHelpSideZealot) {
        if ((UnitIsAlive(gv_zealots[EventPlayer()]) == false) && (PlayerGroupCount(gv_playerGroupHunters) < gv_maxHuntersAllowed)) {
            gf_ProbeDiesResetVariables(EventPlayer());
            gf_ProbeDiesCreateHunter(EventPlayer());
        }
        else {
            DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupActive(), false);
            gv_choosed[EventPlayer()] = false;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/91F4FEAD") + IntToText(gv_maxHuntersAllowed)));
            DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseHelpSidePressed_Init () {
    gt_ChooseHelpSidePressed = TriggerCreate("gt_ChooseHelpSidePressed_Func");
    TriggerEnable(gt_ChooseHelpSidePressed, false);
    TriggerAddEventDialogControl(gt_ChooseHelpSidePressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Observer Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ChooseObserverPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_choosed[EventPlayer()] == false) && ((EventDialogControl() == gv_chooseHelpSideObserver))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/258AC040") + StringToText("")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseObserverPressed_Init () {
    gt_ChooseObserverPressed = TriggerCreate("gt_ChooseObserverPressed_Func");
    TriggerEnable(gt_ChooseObserverPressed, false);
    TriggerAddEventDialogControl(gt_ChooseObserverPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: WaitSpawnHunter
//--------------------------------------------------------------------------------------------------
bool gt_WaitSpawnHunter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto6DE10B55_val;
    unitgroup auto97352C1B_g;
    int auto97352C1B_u;
    unit auto97352C1B_var;
    playergroup auto2F2D8473_g;
    int auto2F2D8473_var;
    playergroup auto0DBB35E6_g;
    int auto0DBB35E6_var;
    unitgroup auto8063219F_g;
    int auto8063219F_u;
    unit auto8063219F_var;
    playergroup autoC7D31D9B_g;
    int autoC7D31D9B_var;
    playergroup autoE8D1E4BB_g;
    int autoE8D1E4BB_var;
    unitgroup auto2DFA352D_g;
    int auto2DFA352D_u;
    unit auto2DFA352D_var;
    playergroup auto32D1C47F_g;
    int auto32D1C47F_var;
    playergroup auto19C7636A_g;
    int auto19C7636A_var;
    unitgroup auto71297119_g;
    int auto71297119_u;
    unit auto71297119_var;
    playergroup autoBB3D2CB8_g;
    int autoBB3D2CB8_var;
    playergroup auto66899A28_g;
    int auto66899A28_var;
    unitgroup autoE617FE45_g;
    int autoE617FE45_u;
    unit autoE617FE45_var;
    playergroup autoB7F2F02B_g;
    int autoB7F2F02B_var;
    playergroup autoA8432863_g;
    int autoA8432863_var;
    unitgroup autoCA8072FF_g;
    int autoCA8072FF_u;
    unit autoCA8072FF_var;
    playergroup auto55B3E799_g;
    int auto55B3E799_var;
    playergroup autoDE981AB0_g;
    int autoDE981AB0_var;
    unitgroup auto368E233F_g;
    int auto368E233F_u;
    unit auto368E233F_var;
    playergroup auto0ADAAE95_g;
    int auto0ADAAE95_var;
    playergroup auto4E49F53D_g;
    int auto4E49F53D_var;
    unitgroup autoC2A86AA4_g;
    int autoC2A86AA4_u;
    unit autoC2A86AA4_var;
    playergroup autoD4EE174C_g;
    int autoD4EE174C_var;
    playergroup auto47DE436B_g;
    int auto47DE436B_var;
    unitgroup auto6A1245E4_g;
    int auto6A1245E4_u;
    unit auto6A1245E4_var;
    playergroup autoEED7479C_g;
    int autoEED7479C_var;
    playergroup auto19246DEC_g;
    int auto19246DEC_var;
    unitgroup autoB595035F_g;
    int autoB595035F_u;
    unit autoB595035F_var;
    playergroup auto0F3C3D0C_g;
    int auto0F3C3D0C_var;
    playergroup auto3D6308FD_g;
    int auto3D6308FD_var;
    unitgroup auto10A56726_g;
    int auto10A56726_u;
    unit auto10A56726_var;
    playergroup auto4CD4AB4B_g;
    int auto4CD4AB4B_var;
    playergroup autoD0AABC53_g;
    int autoD0AABC53_var;
    unitgroup auto686C419A_g;
    int auto686C419A_u;
    unit auto686C419A_var;
    playergroup auto814E0D00_g;
    int auto814E0D00_var;
    playergroup auto0DC5E622_g;
    int auto0DC5E622_var;
    unitgroup auto5AC60AD5_g;
    int auto5AC60AD5_u;
    unit auto5AC60AD5_var;
    playergroup auto62AA0143_g;
    int auto62AA0143_var;
    playergroup auto06567A38_g;
    int auto06567A38_var;
    unitgroup autoD152EA25_g;
    int autoD152EA25_u;
    unit autoD152EA25_var;
    playergroup auto832FE874_g;
    int auto832FE874_var;
    playergroup auto070B8C7D_g;
    int auto070B8C7D_var;
    unitgroup auto07C28489_g;
    int auto07C28489_u;
    unit auto07C28489_var;
    playergroup auto3072E349_g;
    int auto3072E349_var;
    playergroup autoA85B662A_g;
    int autoA85B662A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DE10B55_val = EventTimer();
    if (auto6DE10B55_val == gv_hunterspawntimer[1]) {
        TimerWindowShow(gv_hunterspawnwindow[1], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[1]);
        if ((PlayerType(1) == c_playerTypeUser) && (PlayerStatus(1) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[1]) == false) && (UnitIsAlive(gv_probes[1]) == false) && (gv_probeSpiritStatus[1] == false) && (gv_hunterStatus[1] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 1, gv_centerPoint, gv_centerPoint);
            gv_zealots[1] = UnitLastCreated();
            gv_zealotsTemp[1] = UnitLastCreated();
            UnitControlGroupAddUnits(1, 1, UnitLastCreatedGroup());
            auto97352C1B_g = UnitGroupSelected(1);
            auto97352C1B_u = UnitGroupCount(auto97352C1B_g, c_unitCountAll);
            for (;; auto97352C1B_u -= 1) {
                auto97352C1B_var = UnitGroupUnitFromEnd(auto97352C1B_g, auto97352C1B_u);
                if (auto97352C1B_var == null) { break; }
                UnitSelect(auto97352C1B_var, 1, false);
            }
            UISetFrameVisible(PlayerGroupSingle(1), c_syncFrameTypeMinimapPanel, true);
            UnitSelect(UnitLastCreated(), 1, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(1);
            auto2F2D8473_g = gv_playerGroupZealots;
            auto2F2D8473_var = -1;
            while (true) {
                auto2F2D8473_var = PlayerGroupNextPlayer(auto2F2D8473_g, auto2F2D8473_var);
                if (auto2F2D8473_var < 0) { break; }
                libNtve_gf_SetAlliance(auto2F2D8473_var, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto0DBB35E6_g = gv_playerGroupHunters;
            auto0DBB35E6_var = -1;
            while (true) {
                auto0DBB35E6_var = PlayerGroupNextPlayer(auto0DBB35E6_g, auto0DBB35E6_var);
                if (auto0DBB35E6_var < 0) { break; }
                libNtve_gf_SetAlliance(auto0DBB35E6_var, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            CameraPan(1, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(1, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))) + (StringExternal("Param/Value/8237D0DA") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 1, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))) + (StringExternal("Param/Value/5B7A0B21") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 1, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[2]) {
        TimerWindowShow(gv_hunterspawnwindow[2], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[2]);
        if ((PlayerType(2) == c_playerTypeUser) && (PlayerStatus(2) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[2]) == false) && (UnitIsAlive(gv_probes[2]) == false) && (gv_probeSpiritStatus[2] == false) && (gv_hunterStatus[2] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 2, gv_centerPoint, gv_centerPoint);
            gv_zealots[2] = UnitLastCreated();
            gv_zealotsTemp[2] = UnitLastCreated();
            UnitControlGroupAddUnits(2, 1, UnitLastCreatedGroup());
            auto8063219F_g = UnitGroupSelected(2);
            auto8063219F_u = UnitGroupCount(auto8063219F_g, c_unitCountAll);
            for (;; auto8063219F_u -= 1) {
                auto8063219F_var = UnitGroupUnitFromEnd(auto8063219F_g, auto8063219F_u);
                if (auto8063219F_var == null) { break; }
                UnitSelect(auto8063219F_var, 2, false);
            }
            UISetFrameVisible(PlayerGroupSingle(2), c_syncFrameTypeMinimapPanel, true);
            UnitSelect(UnitLastCreated(), 2, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(2);
            autoC7D31D9B_g = gv_playerGroupZealots;
            autoC7D31D9B_var = -1;
            while (true) {
                autoC7D31D9B_var = PlayerGroupNextPlayer(autoC7D31D9B_g, autoC7D31D9B_var);
                if (autoC7D31D9B_var < 0) { break; }
                libNtve_gf_SetAlliance(autoC7D31D9B_var, 2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            autoE8D1E4BB_g = gv_playerGroupHunters;
            autoE8D1E4BB_var = -1;
            while (true) {
                autoE8D1E4BB_var = PlayerGroupNextPlayer(autoE8D1E4BB_g, autoE8D1E4BB_var);
                if (autoE8D1E4BB_var < 0) { break; }
                libNtve_gf_SetAlliance(autoE8D1E4BB_var, 2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            CameraPan(2, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(2, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false))) + (StringExternal("Param/Value/3F49C2C9") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 2, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false))) + (StringExternal("Param/Value/1EFF4111") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 2, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[3]) {
        TimerWindowShow(gv_hunterspawnwindow[3], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[3]);
        if ((PlayerType(3) == c_playerTypeUser) && (PlayerStatus(3) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[3]) == false) && (UnitIsAlive(gv_probes[3]) == false) && (gv_probeSpiritStatus[3] == false) && (gv_hunterStatus[3] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 3, gv_centerPoint, gv_centerPoint);
            gv_zealots[3] = UnitLastCreated();
            gv_zealotsTemp[3] = UnitLastCreated();
            UnitControlGroupAddUnits(3, 1, UnitLastCreatedGroup());
            auto2DFA352D_g = UnitGroupSelected(3);
            auto2DFA352D_u = UnitGroupCount(auto2DFA352D_g, c_unitCountAll);
            for (;; auto2DFA352D_u -= 1) {
                auto2DFA352D_var = UnitGroupUnitFromEnd(auto2DFA352D_g, auto2DFA352D_u);
                if (auto2DFA352D_var == null) { break; }
                UnitSelect(auto2DFA352D_var, 3, false);
            }
            UISetFrameVisible(PlayerGroupSingle(3), c_syncFrameTypeMinimapPanel, true);
            auto32D1C47F_g = gv_playerGroupZealots;
            auto32D1C47F_var = -1;
            while (true) {
                auto32D1C47F_var = PlayerGroupNextPlayer(auto32D1C47F_g, auto32D1C47F_var);
                if (auto32D1C47F_var < 0) { break; }
                libNtve_gf_SetAlliance(auto32D1C47F_var, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto19C7636A_g = gv_playerGroupHunters;
            auto19C7636A_var = -1;
            while (true) {
                auto19C7636A_var = PlayerGroupNextPlayer(auto19C7636A_g, auto19C7636A_var);
                if (auto19C7636A_var < 0) { break; }
                libNtve_gf_SetAlliance(auto19C7636A_var, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 3, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(3);
            CameraPan(3, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(3, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(3), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false))) + (StringExternal("Param/Value/736B64D2") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 3, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(3), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(3, false))) + (StringExternal("Param/Value/D4D8E688") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 3, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[4]) {
        TimerWindowShow(gv_hunterspawnwindow[4], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[4]);
        if ((PlayerType(4) == c_playerTypeUser) && (PlayerStatus(4) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[4]) == false) && (UnitIsAlive(gv_probes[4]) == false) && (gv_probeSpiritStatus[4] == false) && (gv_hunterStatus[4] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 4, gv_centerPoint, gv_centerPoint);
            gv_zealots[4] = UnitLastCreated();
            gv_zealotsTemp[4] = UnitLastCreated();
            UnitControlGroupAddUnits(4, 1, UnitLastCreatedGroup());
            auto71297119_g = UnitGroupSelected(4);
            auto71297119_u = UnitGroupCount(auto71297119_g, c_unitCountAll);
            for (;; auto71297119_u -= 1) {
                auto71297119_var = UnitGroupUnitFromEnd(auto71297119_g, auto71297119_u);
                if (auto71297119_var == null) { break; }
                UnitSelect(auto71297119_var, 4, false);
            }
            UISetFrameVisible(PlayerGroupSingle(4), c_syncFrameTypeMinimapPanel, true);
            autoBB3D2CB8_g = gv_playerGroupZealots;
            autoBB3D2CB8_var = -1;
            while (true) {
                autoBB3D2CB8_var = PlayerGroupNextPlayer(autoBB3D2CB8_g, autoBB3D2CB8_var);
                if (autoBB3D2CB8_var < 0) { break; }
                libNtve_gf_SetAlliance(autoBB3D2CB8_var, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto66899A28_g = gv_playerGroupHunters;
            auto66899A28_var = -1;
            while (true) {
                auto66899A28_var = PlayerGroupNextPlayer(auto66899A28_g, auto66899A28_var);
                if (auto66899A28_var < 0) { break; }
                libNtve_gf_SetAlliance(auto66899A28_var, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 4, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(4);
            CameraPan(4, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(4, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 4, "2.5");
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(4), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false))) + (StringExternal("Param/Value/11B02B2A") + StringToText(""))));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(4), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(4, false))) + (StringExternal("Param/Value/41CDF41D") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 4, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[5]) {
        TimerWindowShow(gv_hunterspawnwindow[5], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[5]);
        if ((PlayerType(5) == c_playerTypeUser) && (PlayerStatus(5) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[5]) == false) && (UnitIsAlive(gv_probes[5]) == false) && (gv_probeSpiritStatus[5] == false) && (gv_hunterStatus[5] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 5, gv_centerPoint, gv_centerPoint);
            gv_zealots[5] = UnitLastCreated();
            gv_zealotsTemp[5] = UnitLastCreated();
            UnitControlGroupAddUnits(5, 1, UnitLastCreatedGroup());
            autoE617FE45_g = UnitGroupSelected(5);
            autoE617FE45_u = UnitGroupCount(autoE617FE45_g, c_unitCountAll);
            for (;; autoE617FE45_u -= 1) {
                autoE617FE45_var = UnitGroupUnitFromEnd(autoE617FE45_g, autoE617FE45_u);
                if (autoE617FE45_var == null) { break; }
                UnitSelect(autoE617FE45_var, 5, false);
            }
            UISetFrameVisible(PlayerGroupSingle(5), c_syncFrameTypeMinimapPanel, true);
            autoB7F2F02B_g = gv_playerGroupZealots;
            autoB7F2F02B_var = -1;
            while (true) {
                autoB7F2F02B_var = PlayerGroupNextPlayer(autoB7F2F02B_g, autoB7F2F02B_var);
                if (autoB7F2F02B_var < 0) { break; }
                libNtve_gf_SetAlliance(autoB7F2F02B_var, 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            autoA8432863_g = gv_playerGroupHunters;
            autoA8432863_var = -1;
            while (true) {
                autoA8432863_var = PlayerGroupNextPlayer(autoA8432863_g, autoA8432863_var);
                if (autoA8432863_var < 0) { break; }
                libNtve_gf_SetAlliance(autoA8432863_var, 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 5, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(5);
            CameraPan(5, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(5, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(5), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false))) + (StringExternal("Param/Value/CD1DE653") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 5, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(5), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(5, false))) + (StringExternal("Param/Value/49F32FDB") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 5, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[6]) {
        TimerWindowShow(gv_hunterspawnwindow[6], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[6]);
        if ((PlayerType(6) == c_playerTypeUser) && (PlayerStatus(6) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[6]) == false) && (UnitIsAlive(gv_probes[6]) == false) && (gv_probeSpiritStatus[6] == false) && (gv_hunterStatus[6] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 6, gv_centerPoint, gv_centerPoint);
            gv_zealots[6] = UnitLastCreated();
            gv_zealotsTemp[6] = UnitLastCreated();
            UnitControlGroupAddUnits(6, 1, UnitLastCreatedGroup());
            autoCA8072FF_g = UnitGroupSelected(6);
            autoCA8072FF_u = UnitGroupCount(autoCA8072FF_g, c_unitCountAll);
            for (;; autoCA8072FF_u -= 1) {
                autoCA8072FF_var = UnitGroupUnitFromEnd(autoCA8072FF_g, autoCA8072FF_u);
                if (autoCA8072FF_var == null) { break; }
                UnitSelect(autoCA8072FF_var, 6, false);
            }
            UISetFrameVisible(PlayerGroupSingle(6), c_syncFrameTypeMinimapPanel, true);
            auto55B3E799_g = gv_playerGroupZealots;
            auto55B3E799_var = -1;
            while (true) {
                auto55B3E799_var = PlayerGroupNextPlayer(auto55B3E799_g, auto55B3E799_var);
                if (auto55B3E799_var < 0) { break; }
                libNtve_gf_SetAlliance(auto55B3E799_var, 6, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            autoDE981AB0_g = gv_playerGroupHunters;
            autoDE981AB0_var = -1;
            while (true) {
                autoDE981AB0_var = PlayerGroupNextPlayer(autoDE981AB0_g, autoDE981AB0_var);
                if (autoDE981AB0_var < 0) { break; }
                libNtve_gf_SetAlliance(autoDE981AB0_var, 6, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 6, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(6);
            CameraPan(6, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(6, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(6), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false))) + (StringExternal("Param/Value/0C9305F2") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 6, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(6), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(6, false))) + (StringExternal("Param/Value/7BAA5175") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 6, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[7]) {
        TimerWindowShow(gv_hunterspawnwindow[7], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[7]);
        if ((PlayerType(7) == c_playerTypeUser) && (PlayerStatus(7) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[7]) == false) && (UnitIsAlive(gv_probes[7]) == false) && (gv_probeSpiritStatus[7] == false) && (gv_hunterStatus[7] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 7, gv_centerPoint, gv_centerPoint);
            gv_zealots[7] = UnitLastCreated();
            gv_zealotsTemp[7] = UnitLastCreated();
            UnitControlGroupAddUnits(7, 1, UnitLastCreatedGroup());
            auto368E233F_g = UnitGroupSelected(7);
            auto368E233F_u = UnitGroupCount(auto368E233F_g, c_unitCountAll);
            for (;; auto368E233F_u -= 1) {
                auto368E233F_var = UnitGroupUnitFromEnd(auto368E233F_g, auto368E233F_u);
                if (auto368E233F_var == null) { break; }
                UnitSelect(auto368E233F_var, 7, false);
            }
            UISetFrameVisible(PlayerGroupSingle(7), c_syncFrameTypeMinimapPanel, true);
            auto0ADAAE95_g = gv_playerGroupZealots;
            auto0ADAAE95_var = -1;
            while (true) {
                auto0ADAAE95_var = PlayerGroupNextPlayer(auto0ADAAE95_g, auto0ADAAE95_var);
                if (auto0ADAAE95_var < 0) { break; }
                libNtve_gf_SetAlliance(auto0ADAAE95_var, 7, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto4E49F53D_g = gv_playerGroupHunters;
            auto4E49F53D_var = -1;
            while (true) {
                auto4E49F53D_var = PlayerGroupNextPlayer(auto4E49F53D_g, auto4E49F53D_var);
                if (auto4E49F53D_var < 0) { break; }
                libNtve_gf_SetAlliance(auto4E49F53D_var, 7, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 7, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(7);
            CameraPan(7, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(7, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(7), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(7, false))) + (StringExternal("Param/Value/0EF7DB4F") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 7, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(7), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(7, false))) + (StringExternal("Param/Value/8960DE89") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 7, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[8]) {
        TimerWindowShow(gv_hunterspawnwindow[8], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[8]);
        if ((PlayerType(8) == c_playerTypeUser) && (PlayerStatus(8) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[8]) == false) && (UnitIsAlive(gv_probes[8]) == false) && (gv_probeSpiritStatus[8] == false) && (gv_hunterStatus[8] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 8, gv_centerPoint, gv_centerPoint);
            gv_zealots[8] = UnitLastCreated();
            gv_zealotsTemp[8] = UnitLastCreated();
            UnitControlGroupAddUnits(8, 1, UnitLastCreatedGroup());
            autoC2A86AA4_g = UnitGroupSelected(8);
            autoC2A86AA4_u = UnitGroupCount(autoC2A86AA4_g, c_unitCountAll);
            for (;; autoC2A86AA4_u -= 1) {
                autoC2A86AA4_var = UnitGroupUnitFromEnd(autoC2A86AA4_g, autoC2A86AA4_u);
                if (autoC2A86AA4_var == null) { break; }
                UnitSelect(autoC2A86AA4_var, 8, false);
            }
            UISetFrameVisible(PlayerGroupSingle(8), c_syncFrameTypeMinimapPanel, true);
            autoD4EE174C_g = gv_playerGroupZealots;
            autoD4EE174C_var = -1;
            while (true) {
                autoD4EE174C_var = PlayerGroupNextPlayer(autoD4EE174C_g, autoD4EE174C_var);
                if (autoD4EE174C_var < 0) { break; }
                libNtve_gf_SetAlliance(autoD4EE174C_var, 8, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto47DE436B_g = gv_playerGroupHunters;
            auto47DE436B_var = -1;
            while (true) {
                auto47DE436B_var = PlayerGroupNextPlayer(auto47DE436B_g, auto47DE436B_var);
                if (auto47DE436B_var < 0) { break; }
                libNtve_gf_SetAlliance(auto47DE436B_var, 8, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 8, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(8);
            CameraPan(8, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(8, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(8), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(8, false))) + (StringExternal("Param/Value/850DCE3D") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 8, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(8), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(8, false))) + (StringExternal("Param/Value/E52AE52C") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 8, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[9]) {
        TimerWindowShow(gv_hunterspawnwindow[9], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[9]);
        if ((PlayerType(9) == c_playerTypeUser) && (PlayerStatus(9) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[9]) == false) && (UnitIsAlive(gv_probes[9]) == false) && (gv_probeSpiritStatus[9] == false) && (gv_hunterStatus[9] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 9, gv_centerPoint, gv_centerPoint);
            gv_zealots[9] = UnitLastCreated();
            gv_zealotsTemp[9] = UnitLastCreated();
            UnitControlGroupAddUnits(9, 1, UnitLastCreatedGroup());
            auto6A1245E4_g = UnitGroupSelected(9);
            auto6A1245E4_u = UnitGroupCount(auto6A1245E4_g, c_unitCountAll);
            for (;; auto6A1245E4_u -= 1) {
                auto6A1245E4_var = UnitGroupUnitFromEnd(auto6A1245E4_g, auto6A1245E4_u);
                if (auto6A1245E4_var == null) { break; }
                UnitSelect(auto6A1245E4_var, 9, false);
            }
            UISetFrameVisible(PlayerGroupSingle(9), c_syncFrameTypeMinimapPanel, true);
            autoEED7479C_g = gv_playerGroupZealots;
            autoEED7479C_var = -1;
            while (true) {
                autoEED7479C_var = PlayerGroupNextPlayer(autoEED7479C_g, autoEED7479C_var);
                if (autoEED7479C_var < 0) { break; }
                libNtve_gf_SetAlliance(autoEED7479C_var, 9, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto19246DEC_g = gv_playerGroupHunters;
            auto19246DEC_var = -1;
            while (true) {
                auto19246DEC_var = PlayerGroupNextPlayer(auto19246DEC_g, auto19246DEC_var);
                if (auto19246DEC_var < 0) { break; }
                libNtve_gf_SetAlliance(auto19246DEC_var, 9, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 9, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(9);
            CameraPan(9, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(9, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(9), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(9, false))) + (StringExternal("Param/Value/E55E11D8") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 9, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(9), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(9, false))) + (StringExternal("Param/Value/0C5839E2") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 9, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[10]) {
        TimerWindowShow(gv_hunterspawnwindow[10], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[10]);
        if ((PlayerType(10) == c_playerTypeUser) && (PlayerStatus(10) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[10]) == false) && (UnitIsAlive(gv_probes[10]) == false) && (gv_probeSpiritStatus[10] == false) && (gv_hunterStatus[10] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 10, gv_centerPoint, gv_centerPoint);
            gv_zealots[10] = UnitLastCreated();
            gv_zealotsTemp[10] = UnitLastCreated();
            UnitControlGroupAddUnits(10, 1, UnitLastCreatedGroup());
            autoB595035F_g = UnitGroupSelected(10);
            autoB595035F_u = UnitGroupCount(autoB595035F_g, c_unitCountAll);
            for (;; autoB595035F_u -= 1) {
                autoB595035F_var = UnitGroupUnitFromEnd(autoB595035F_g, autoB595035F_u);
                if (autoB595035F_var == null) { break; }
                UnitSelect(autoB595035F_var, 10, false);
            }
            UISetFrameVisible(PlayerGroupSingle(10), c_syncFrameTypeMinimapPanel, true);
            auto0F3C3D0C_g = gv_playerGroupZealots;
            auto0F3C3D0C_var = -1;
            while (true) {
                auto0F3C3D0C_var = PlayerGroupNextPlayer(auto0F3C3D0C_g, auto0F3C3D0C_var);
                if (auto0F3C3D0C_var < 0) { break; }
                libNtve_gf_SetAlliance(auto0F3C3D0C_var, 10, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto3D6308FD_g = gv_playerGroupHunters;
            auto3D6308FD_var = -1;
            while (true) {
                auto3D6308FD_var = PlayerGroupNextPlayer(auto3D6308FD_g, auto3D6308FD_var);
                if (auto3D6308FD_var < 0) { break; }
                libNtve_gf_SetAlliance(auto3D6308FD_var, 10, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 10, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(10);
            CameraPan(10, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(10, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(10), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(10, false))) + (StringExternal("Param/Value/33A705EE") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 10, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(10), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(10, false))) + (StringExternal("Param/Value/E6B61DEA") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 10, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[11]) {
        TimerWindowShow(gv_hunterspawnwindow[11], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[11]);
        if ((PlayerType(11) == c_playerTypeUser) && (PlayerStatus(11) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[11]) == false) && (UnitIsAlive(gv_probes[11]) == false) && (gv_probeSpiritStatus[11] == false) && (gv_hunterStatus[11] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 11, gv_centerPoint, gv_centerPoint);
            gv_zealots[11] = UnitLastCreated();
            gv_zealotsTemp[11] = UnitLastCreated();
            UnitControlGroupAddUnits(11, 1, UnitLastCreatedGroup());
            auto10A56726_g = UnitGroupSelected(11);
            auto10A56726_u = UnitGroupCount(auto10A56726_g, c_unitCountAll);
            for (;; auto10A56726_u -= 1) {
                auto10A56726_var = UnitGroupUnitFromEnd(auto10A56726_g, auto10A56726_u);
                if (auto10A56726_var == null) { break; }
                UnitSelect(auto10A56726_var, 11, false);
            }
            UISetFrameVisible(PlayerGroupSingle(11), c_syncFrameTypeMinimapPanel, true);
            auto4CD4AB4B_g = gv_playerGroupZealots;
            auto4CD4AB4B_var = -1;
            while (true) {
                auto4CD4AB4B_var = PlayerGroupNextPlayer(auto4CD4AB4B_g, auto4CD4AB4B_var);
                if (auto4CD4AB4B_var < 0) { break; }
                libNtve_gf_SetAlliance(auto4CD4AB4B_var, 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            autoD0AABC53_g = gv_playerGroupHunters;
            autoD0AABC53_var = -1;
            while (true) {
                autoD0AABC53_var = PlayerGroupNextPlayer(autoD0AABC53_g, autoD0AABC53_var);
                if (autoD0AABC53_var < 0) { break; }
                libNtve_gf_SetAlliance(autoD0AABC53_var, 11, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 11, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(11);
            CameraPan(11, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(11, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(11), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false))) + (StringExternal("Param/Value/E95E1E65") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 11, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(11), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(11, false))) + (StringExternal("Param/Value/927ACD5D") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 11, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[12]) {
        TimerWindowShow(gv_hunterspawnwindow[12], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[12]);
        if ((PlayerType(12) == c_playerTypeUser) && (PlayerStatus(12) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[12]) == false) && (UnitIsAlive(gv_probes[12]) == false) && (gv_probeSpiritStatus[12] == false) && (gv_hunterStatus[12] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 12, gv_centerPoint, gv_centerPoint);
            gv_zealots[12] = UnitLastCreated();
            gv_zealotsTemp[12] = UnitLastCreated();
            UnitControlGroupAddUnits(12, 1, UnitLastCreatedGroup());
            auto686C419A_g = UnitGroupSelected(12);
            auto686C419A_u = UnitGroupCount(auto686C419A_g, c_unitCountAll);
            for (;; auto686C419A_u -= 1) {
                auto686C419A_var = UnitGroupUnitFromEnd(auto686C419A_g, auto686C419A_u);
                if (auto686C419A_var == null) { break; }
                UnitSelect(auto686C419A_var, 12, false);
            }
            UISetFrameVisible(PlayerGroupSingle(12), c_syncFrameTypeMinimapPanel, true);
            auto814E0D00_g = gv_playerGroupZealots;
            auto814E0D00_var = -1;
            while (true) {
                auto814E0D00_var = PlayerGroupNextPlayer(auto814E0D00_g, auto814E0D00_var);
                if (auto814E0D00_var < 0) { break; }
                libNtve_gf_SetAlliance(auto814E0D00_var, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto0DC5E622_g = gv_playerGroupHunters;
            auto0DC5E622_var = -1;
            while (true) {
                auto0DC5E622_var = PlayerGroupNextPlayer(auto0DC5E622_g, auto0DC5E622_var);
                if (auto0DC5E622_var < 0) { break; }
                libNtve_gf_SetAlliance(auto0DC5E622_var, 12, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 12, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(12);
            CameraPan(12, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(12, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(12), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(12, false))) + (StringExternal("Param/Value/4D6B1519") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 12, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(12), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(12, false))) + (StringExternal("Param/Value/D998D4E5") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 12, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[13]) {
        TimerWindowShow(gv_hunterspawnwindow[13], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[13]);
        if ((PlayerType(13) == c_playerTypeUser) && (PlayerStatus(13) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[13]) == false) && (UnitIsAlive(gv_probes[13]) == false) && (gv_probeSpiritStatus[13] == false) && (gv_hunterStatus[13] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 13, gv_centerPoint, gv_centerPoint);
            gv_zealots[13] = UnitLastCreated();
            gv_zealotsTemp[13] = UnitLastCreated();
            UnitControlGroupAddUnits(13, 1, UnitLastCreatedGroup());
            auto5AC60AD5_g = UnitGroupSelected(13);
            auto5AC60AD5_u = UnitGroupCount(auto5AC60AD5_g, c_unitCountAll);
            for (;; auto5AC60AD5_u -= 1) {
                auto5AC60AD5_var = UnitGroupUnitFromEnd(auto5AC60AD5_g, auto5AC60AD5_u);
                if (auto5AC60AD5_var == null) { break; }
                UnitSelect(auto5AC60AD5_var, 13, false);
            }
            UISetFrameVisible(PlayerGroupSingle(13), c_syncFrameTypeMinimapPanel, true);
            auto62AA0143_g = gv_playerGroupZealots;
            auto62AA0143_var = -1;
            while (true) {
                auto62AA0143_var = PlayerGroupNextPlayer(auto62AA0143_g, auto62AA0143_var);
                if (auto62AA0143_var < 0) { break; }
                libNtve_gf_SetAlliance(auto62AA0143_var, 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto06567A38_g = gv_playerGroupHunters;
            auto06567A38_var = -1;
            while (true) {
                auto06567A38_var = PlayerGroupNextPlayer(auto06567A38_g, auto06567A38_var);
                if (auto06567A38_var < 0) { break; }
                libNtve_gf_SetAlliance(auto06567A38_var, 13, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 13, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(13);
            CameraPan(13, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(13, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(13), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(13, false))) + (StringExternal("Param/Value/F1933C05") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 13, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(13), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(13, false))) + (StringExternal("Param/Value/550FB669") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 13, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[14]) {
        TimerWindowShow(gv_hunterspawnwindow[14], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[14]);
        if ((PlayerType(14) == c_playerTypeUser) && (PlayerStatus(14) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[14]) == false) && (UnitIsAlive(gv_probes[14]) == false) && (gv_probeSpiritStatus[14] == false) && (gv_hunterStatus[14] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 14, gv_centerPoint, gv_centerPoint);
            gv_zealots[14] = UnitLastCreated();
            gv_zealotsTemp[14] = UnitLastCreated();
            UnitControlGroupAddUnits(14, 1, UnitLastCreatedGroup());
            autoD152EA25_g = UnitGroupSelected(14);
            autoD152EA25_u = UnitGroupCount(autoD152EA25_g, c_unitCountAll);
            for (;; autoD152EA25_u -= 1) {
                autoD152EA25_var = UnitGroupUnitFromEnd(autoD152EA25_g, autoD152EA25_u);
                if (autoD152EA25_var == null) { break; }
                UnitSelect(autoD152EA25_var, 14, false);
            }
            UISetFrameVisible(PlayerGroupSingle(14), c_syncFrameTypeMinimapPanel, true);
            auto832FE874_g = gv_playerGroupZealots;
            auto832FE874_var = -1;
            while (true) {
                auto832FE874_var = PlayerGroupNextPlayer(auto832FE874_g, auto832FE874_var);
                if (auto832FE874_var < 0) { break; }
                libNtve_gf_SetAlliance(auto832FE874_var, 14, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            auto070B8C7D_g = gv_playerGroupHunters;
            auto070B8C7D_var = -1;
            while (true) {
                auto070B8C7D_var = PlayerGroupNextPlayer(auto070B8C7D_g, auto070B8C7D_var);
                if (auto070B8C7D_var < 0) { break; }
                libNtve_gf_SetAlliance(auto070B8C7D_var, 14, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            UnitSelect(UnitLastCreated(), 14, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(14);
            CameraPan(14, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(14, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(14), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(14, false))) + (StringExternal("Param/Value/44080533") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 14, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(14), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(14, false))) + (StringExternal("Param/Value/8E7A2D09") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 14, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else if (auto6DE10B55_val == gv_hunterspawntimer[15]) {
        TimerWindowShow(gv_hunterspawnwindow[15], PlayerGroupAll(), false);
        TimerWindowDestroy(gv_hunterspawnwindow[15]);
        if ((PlayerType(15) == c_playerTypeUser) && (PlayerStatus(15) == c_playerStatusActive) && (gv_gameEnd == false) && (UnitIsAlive(gv_zealots[15]) == false) && (UnitIsAlive(gv_probes[15]) == false) && (gv_probeSpiritStatus[15] == false) && (gv_hunterStatus[15] == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Predator", 0, 15, gv_centerPoint, gv_centerPoint);
            gv_zealots[15] = UnitLastCreated();
            gv_zealotsTemp[15] = UnitLastCreated();
            UnitControlGroupAddUnits(15, 1, UnitLastCreatedGroup());
            auto07C28489_g = UnitGroupSelected(15);
            auto07C28489_u = UnitGroupCount(auto07C28489_g, c_unitCountAll);
            for (;; auto07C28489_u -= 1) {
                auto07C28489_var = UnitGroupUnitFromEnd(auto07C28489_g, auto07C28489_u);
                if (auto07C28489_var == null) { break; }
                UnitSelect(auto07C28489_var, 15, false);
            }
            UISetFrameVisible(PlayerGroupSingle(15), c_syncFrameTypeMinimapPanel, true);
            UnitSelect(UnitLastCreated(), 15, true);
            UnitInventoryCreate(UnitLastCreated(), "RingofSight1");
            gf_CreateLabelHunterRank(15);
            auto3072E349_g = gv_playerGroupZealots;
            auto3072E349_var = -1;
            while (true) {
                auto3072E349_var = PlayerGroupNextPlayer(auto3072E349_g, auto3072E349_var);
                if (auto3072E349_var < 0) { break; }
                libNtve_gf_SetAlliance(auto3072E349_var, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            autoA85B662A_g = gv_playerGroupHunters;
            autoA85B662A_var = -1;
            while (true) {
                autoA85B662A_var = PlayerGroupNextPlayer(autoA85B662A_g, autoA85B662A_var);
                if (autoA85B662A_var < 0) { break; }
                libNtve_gf_SetAlliance(autoA85B662A_var, 15, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            CameraPan(15, gv_centerPoint, 0.0, -1, 10.0, false);
            CameraSetValue(15, c_cameraValueYaw, 90.0, 1.5, -1, 10.0);
            if ((gv_gameTimeMinutes < 10)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(15), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(15, false))) + (StringExternal("Param/Value/7C79C62D") + StringToText(""))));
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Speed", 15, "2.5");
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(15), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(15, false))) + (StringExternal("Param/Value/27C181E5") + StringToText(""))));
            }
            if ((gv_gameTimeMinutes > 20)) {
                CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "LifeMax", 15, "32000");
                UnitInventoryCreate(UnitLastCreated(), "Armor8");
            }

        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaitSpawnHunter_Init () {
    gt_WaitSpawnHunter = TriggerCreate("gt_WaitSpawnHunter_Func");
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[1]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[2]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[3]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[4]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[5]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[6]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[7]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[8]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[9]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[10]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[11]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[12]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[13]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[14]);
    TriggerAddEventTimer(gt_WaitSpawnHunter, gv_hunterspawntimer[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_InitVoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_y;

    // Automatic Variable Declarations
    const int autoBC1B34F8_ae = 14;
    const int autoBC1B34F8_ai = 1;
    const int auto4EF63AB8_ae = 14;
    const int auto4EF63AB8_ai = 1;
    playergroup autoF532A83D_g;
    int autoF532A83D_var;

    // Variable Initialization
    lv_y = 75;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorTopLeft, 240, -52, true);
    gv_voteKickDialogMain = DialogLastCreated();
    lv_i = 1;
    for ( ; ( (autoBC1B34F8_ai >= 0 && lv_i <= autoBC1B34F8_ae) || (autoBC1B34F8_ai < 0 && lv_i >= autoBC1B34F8_ae) ) ; lv_i += autoBC1B34F8_ai ) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_i), true);
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 40, c_anchorTopLeft, 134, 50, StringExternal("Param/Value/33E7652A"), StringExternal("Param/Value/1556274C"), "");
    gv_voteKickButton = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_numberofPlayersinKickBoard = PlayerGroupCount(PlayerGroupActive());
    DialogCreate(300, (160 + (gv_numberofPlayersinKickBoard * 60)), c_anchorCenter, 0, -100, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/BEC51AD8"));
    gv_voteKickDialog = DialogLastCreated();
    lv_i = 1;
    for ( ; ( (auto4EF63AB8_ai >= 0 && lv_i <= auto4EF63AB8_ae) || (auto4EF63AB8_ai < 0 && lv_i >= auto4EF63AB8_ae) ) ; lv_i += auto4EF63AB8_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, lv_y, StringToText(""), TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))), "");
            gv_voteKickPlayers[lv_i] = DialogControlLastCreated();
            lv_y += 60;
            if (((gf_PlayerIsDeveloper(lv_i) == true) || (gf_PlayerIsModerator(lv_i) == true) || (gf_PlayerIsDonor(lv_i) == true) || ((gv_side[lv_i] == "Zealot") && (gf_PlayerIsAwaysKickable(lv_i) == false)))) {
                DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
            }

        }

    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, lv_y, StringExternal("Param/Value/2845462B"), StringExternal("Param/Value/0479F5D1"), "");
    gv_closevoteboard = DialogControlLastCreated();
    DialogControlSetEnabled(gv_voteKickButton, gv_playerGroupZealots, false);
    DialogCreate(500, 300, c_anchorLeft, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/A0713F8A"));
    gv_voteKickVoteBoard = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorCenter, 20, -50, StringExternal("Param/Value/96C0B7C1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorCenter, 225, -50, StringExternal("Param/Value/25927FBE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_voteKickVoteBoardRequiredVotes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, -100, 0, StringToText(""), StringExternal("Param/Value/74296682"), "");
    gv_voteKickVoteBoardYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 100, 0, StringToText(""), StringExternal("Param/Value/9F9C1407"), "");
    gv_voteKickVoteBoardNo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, -60, 60, StringExternal("Param/Value/D013428D"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardYesLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, 140, 60, StringExternal("Param/Value/BA148EAB"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardNoLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorCenter, 30, 120, StringExternal("Param/Value/B067ACAE"), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_voteKickVoteBoardTimerLabel = DialogControlLastCreated();
    autoF532A83D_g = PlayerGroupActive();
    autoF532A83D_var = -1;
    while (true) {
        autoF532A83D_var = PlayerGroupNextPlayer(autoF532A83D_g, autoF532A83D_var);
        if (autoF532A83D_var < 0) { break; }
        DialogCreate(325, 300, c_anchorCenter, 0, 0, true);
        DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/DB7E8A16"));
        gv_voteKickDialogKickType[autoF532A83D_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorCenter, 0, 0, StringExternal("Param/Value/83278CC8"), StringExternal("Param/Value/11F2D89B"), "");
        gv_voteKickFeederKick[autoF532A83D_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorCenter, 0, 50, StringExternal("Param/Value/20A33675"), StringExternal("Param/Value/B132920E"), "");
        gv_voteKickNoobKick[autoF532A83D_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorCenter, 0, 100, StringExternal("Param/Value/7F3B6B51"), StringExternal("Param/Value/3C31A01A"), "");
        gv_voteKickStandardKick[autoF532A83D_var] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitVoteKick_Init () {
    gt_InitVoteKick = TriggerCreate("gt_InitVoteKick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Kick Pressed
//--------------------------------------------------------------------------------------------------
bool gt_VoteKickPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto5939791A_ae = 14;
    const int auto5939791A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_voteKickButton) && (gf_PlayerIsAwaysKickable(EventPlayer()) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_voteKickDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_voteKickDialogKickType[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if (((PlayerGroupCount(PlayerGroupActive()) >= 4) && (gv_voteKickCooldownExpired[EventPlayer()] == true) && (gv_side[EventPlayer()] != "Zealot") && (gv_hunterStatus[EventPlayer()] == false) && (gv_probeSpiritStatus[EventPlayer()] == false))) {
            DialogSetVisible(gv_voteKickDialog, PlayerGroupSingle(EventPlayer()), true);
            lv_i = 1;
            for ( ; ( (auto5939791A_ai >= 0 && lv_i <= auto5939791A_ae) || (auto5939791A_ai < 0 && lv_i >= auto5939791A_ae) ) ; lv_i += auto5939791A_ai ) {
                if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser) && (lv_i != EventPlayer()))) {
                    DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                    DialogControlSetVisible(gv_voteKickPlayers[lv_i], PlayerGroupSingle(EventPlayer()), false);
                }
            }
        }
        else {
            if ((gv_voteKickCooldownExpired[EventPlayer()] == false)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/B4FD62D8") + (FixedToText(TimerGetRemaining(gv_voteKickCooldown[EventPlayer()]), 0) + StringExternal("Param/Value/0D72BD14"))));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/8523B00B"));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteKickPressed_Init () {
    gt_VoteKickPressed = TriggerCreate("gt_VoteKickPressed_Func");
    TriggerEnable(gt_VoteKickPressed, false);
    TriggerAddEventDialogControl(gt_VoteKickPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Player Pressed
//--------------------------------------------------------------------------------------------------
bool gt_KickPlayerPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9E26A69B_g;
    int auto9E26A69B_var;

    // Conditions
    if (testConds) {
        if (!(((gv_voteKickVoteBoardStarted == false) && (gv_voteKickCooldownExpired[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E26A69B_g = PlayerGroupActive();
    auto9E26A69B_var = -1;
    while (true) {
        auto9E26A69B_var = PlayerGroupNextPlayer(auto9E26A69B_g, auto9E26A69B_var);
        if (auto9E26A69B_var < 0) { break; }
        if ((EventDialogControl() == gv_voteKickPlayers[auto9E26A69B_var])) {
            gv_targetPlayer[EventPlayer()] = auto9E26A69B_var;
            DialogSetPosition(gv_voteKickDialogKickType[EventPlayer()], DialogControlGetAnchor(EventDialogControl(), EventPlayer()), (DialogControlGetOffsetX(EventDialogControl(), EventPlayer()) + 300), (DialogControlGetOffsetY(EventDialogControl(), EventPlayer()) + (((14 - gv_numberofPlayersinKickBoard) * 30) - 50)));
            DialogSetVisible(gv_voteKickDialogKickType[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickPlayerPressed_Init () {
    gt_KickPlayerPressed = TriggerCreate("gt_KickPlayerPressed_Func");
    TriggerEnable(gt_KickPlayerPressed, false);
    TriggerAddEventDialogControl(gt_KickPlayerPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Vote Pressed
//--------------------------------------------------------------------------------------------------
bool gt_SpiritVotePressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto371B252D_g;
    int auto371B252D_var;
    const int autoDF1A2545_ae = 15;
    int autoDF1A2545_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_voteKickVoteBoardStarted == false) && (gv_voteKickCooldownExpired[EventPlayer()] == true) && (gv_side[EventPlayer()] != "Zealot") && (gv_hunterStatus[gv_targetPlayer[EventPlayer()]] == false) && (gv_probeSpiritStatus[gv_targetPlayer[EventPlayer()]] == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto371B252D_g = PlayerGroupActive();
    auto371B252D_var = -1;
    while (true) {
        auto371B252D_var = PlayerGroupNextPlayer(auto371B252D_g, auto371B252D_var);
        if (auto371B252D_var < 0) { break; }
        if ((EventDialogControl() == gv_voteKickNoobKick[auto371B252D_var])) {
            gv_voteKickVoteBoardStarted = true;
            gv_voteKickCooldownExpired[EventPlayer()] = false;
            gv_kickedPlayer = gv_targetPlayer[EventPlayer()];
            gv_kickerPlayer = EventPlayer();
            gv_kickType = 1;
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
            gv_kickTimerTime = 15;
            TimerStart(gv_kickVoteTimer, gf_PvZ2Time(gv_kickTimerTime), false, c_timeGame);
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/ECB5C881") + FixedToText(gv_kickTimerTime, 0)), PlayerGroupActive());
            TriggerEnable(gt_KickVoteTimerLabel, true);
            DialogControlSetEnabled(gv_voteKickButton, PlayerGroupAll(), false);
            DialogSetVisible(gv_voteKickDialog, PlayerGroupAll(), false);
            autoDF1A2545_var = 1;
            for ( ; autoDF1A2545_var <= autoDF1A2545_ae; autoDF1A2545_var += 1 ) {
                if ((gf_IsPlayerOnline(autoDF1A2545_var) == true)) {
                    DialogSetVisible(gv_voteKickDialogKickType[autoDF1A2545_var], PlayerGroupAll(), false);
                }

            }
            DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), true);
            gf_UpdateRequiredVotes();
            DialogSetTitle(gv_voteKickVoteBoard, (StringExternal("Param/Value/1B4F472C") + (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/4BF31141"))));
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(gv_kickedPlayer), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(gv_kickedPlayer), false);
            if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
                gv_numberofVotesYes += 1;
                gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
                gv_voteKickValue[EventPlayer()] = 2;
                if (((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsDonor(EventPlayer()) == true))) {
                    gv_numberofVotesYes += 2;
                }

                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/2203769C") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/B7E5A713") + TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))))));
            }

            if ((gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] == false)) {
                gv_numberofVotesNo += 1;
                gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] = true;
                gv_voteKickValue[gv_kickedPlayer] = 1;
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/BBA5CCE7") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritVotePressed_Init () {
    gt_SpiritVotePressed = TriggerCreate("gt_SpiritVotePressed_Func");
    TriggerEnable(gt_SpiritVotePressed, false);
    TriggerAddEventDialogControl(gt_SpiritVotePressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remover Player Pressed
//--------------------------------------------------------------------------------------------------
bool gt_RemoverPlayerPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoF7163EC2_g;
    int autoF7163EC2_var;
    const int auto663F8DF1_ae = 15;
    int auto663F8DF1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_voteKickVoteBoardStarted == false) && (gv_voteKickCooldownExpired[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7163EC2_g = PlayerGroupActive();
    autoF7163EC2_var = -1;
    while (true) {
        autoF7163EC2_var = PlayerGroupNextPlayer(autoF7163EC2_g, autoF7163EC2_var);
        if (autoF7163EC2_var < 0) { break; }
        if ((EventDialogControl() == gv_voteKickStandardKick[autoF7163EC2_var])) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/7AFBEDE0")));
            PlayerCreateEffectUnit(PlayerGroupPlayer(gv_playerGroupZealots, 1), "ScannerSweep", gv_probes[EventPlayer()]);
            gv_voteKickVoteBoardStarted = true;
            gv_voteKickCooldownExpired[EventPlayer()] = false;
            gv_kickedPlayer = gv_targetPlayer[EventPlayer()];
            gv_kickerPlayer = EventPlayer();
            gv_kickType = 2;
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
            TimerStart(gv_kickVoteTimer, 15.0, false, c_timeGame);
            gv_kickTimerTime = 15;
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/A666BFAF") + FixedToText(gv_kickTimerTime, 0)), PlayerGroupActive());
            TriggerEnable(gt_KickVoteTimerLabel, true);
            DialogControlSetEnabled(gv_voteKickButton, PlayerGroupAll(), false);
            DialogSetVisible(gv_voteKickDialog, PlayerGroupAll(), false);
            auto663F8DF1_var = 1;
            for ( ; auto663F8DF1_var <= auto663F8DF1_ae; auto663F8DF1_var += 1 ) {
                if ((gf_IsPlayerOnline(auto663F8DF1_var) == true)) {
                    DialogSetVisible(gv_voteKickDialogKickType[auto663F8DF1_var], PlayerGroupAll(), false);
                }

            }
            DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), true);
            gf_UpdateRequiredVotes();
            DialogSetTitle(gv_voteKickVoteBoard, (StringExternal("Param/Value/E7F480C9") + (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/C75AF824"))));
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(gv_kickedPlayer), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(gv_kickedPlayer), false);
            if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
                gv_numberofVotesYes += 1;
                gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
                gv_voteKickValue[EventPlayer()] = 2;
                if (((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsDonor(EventPlayer()) == true))) {
                    gv_numberofVotesYes += 0;
                }

                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/E448972D") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/EFAC6507") + TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))))));
            }

            if ((gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] == false)) {
                gv_numberofVotesNo += 1;
                gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] = true;
                gv_voteKickValue[gv_kickedPlayer] = 1;
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/E7F838A6") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoverPlayerPressed_Init () {
    gt_RemoverPlayerPressed = TriggerCreate("gt_RemoverPlayerPressed_Func");
    TriggerEnable(gt_RemoverPlayerPressed, false);
    TriggerAddEventDialogControl(gt_RemoverPlayerPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Salvage Feeder Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ForceSalvageFeederPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto9CF53E39_g;
    int auto9CF53E39_var;
    const int autoFA7EFFF7_ae = 15;
    int autoFA7EFFF7_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gv_voteKickVoteBoardStarted == false) && (gv_voteKickCooldownExpired[EventPlayer()] == true) && (gv_side[EventPlayer()] != "Zealot") && (gv_hunterStatus[gv_targetPlayer[EventPlayer()]] == false) && (gv_probeSpiritStatus[gv_targetPlayer[EventPlayer()]] == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9CF53E39_g = PlayerGroupActive();
    auto9CF53E39_var = -1;
    while (true) {
        auto9CF53E39_var = PlayerGroupNextPlayer(auto9CF53E39_g, auto9CF53E39_var);
        if (auto9CF53E39_var < 0) { break; }
        if ((EventDialogControl() == gv_voteKickFeederKick[auto9CF53E39_var])) {
            gv_voteKickVoteBoardStarted = true;
            gv_voteKickCooldownExpired[EventPlayer()] = false;
            gv_kickedPlayer = gv_targetPlayer[EventPlayer()];
            gv_kickerPlayer = EventPlayer();
            gv_kickType = 3;
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
            TimerStart(gv_kickVoteTimer, 15.0, false, c_timeGame);
            gv_kickTimerTime = 15;
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/11B624EA") + FixedToText(gv_kickerPlayer, 0)), PlayerGroupActive());
            TriggerEnable(gt_KickVoteTimerLabel, true);
            DialogControlSetEnabled(gv_voteKickButton, PlayerGroupAll(), false);
            DialogSetVisible(gv_voteKickDialog, PlayerGroupAll(), false);
            autoFA7EFFF7_var = 1;
            for ( ; autoFA7EFFF7_var <= autoFA7EFFF7_ae; autoFA7EFFF7_var += 1 ) {
                if ((gf_IsPlayerOnline(autoFA7EFFF7_var) == true)) {
                    DialogSetVisible(gv_voteKickDialogKickType[autoFA7EFFF7_var], PlayerGroupAll(), false);
                }

            }
            DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), true);
            gf_UpdateRequiredVotes();
            DialogSetTitle(gv_voteKickVoteBoard, (StringExternal("Param/Value/19AEFACA") + (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/8C06C64D"))));
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(gv_kickedPlayer), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(gv_kickedPlayer), false);
            if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
                gv_numberofVotesYes += 1;
                gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
                gv_voteKickValue[EventPlayer()] = 2;
                if (((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsDonor(EventPlayer()) == true))) {
                    gv_numberofVotesYes += 0;
                }

                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/E444E72A") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + (StringExternal("Param/Value/EAFADF86") + TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))))));
            }

            if ((gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] == false)) {
                gv_numberofVotesNo += 1;
                gv_voteKickVoteBoardVotedAlready[gv_kickedPlayer] = true;
                gv_voteKickValue[gv_kickedPlayer] = 1;
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/D0516F35") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceSalvageFeederPressed_Init () {
    gt_ForceSalvageFeederPressed = TriggerCreate("gt_ForceSalvageFeederPressed_Func");
    TriggerEnable(gt_ForceSalvageFeederPressed, false);
    TriggerAddEventDialogControl(gt_ForceSalvageFeederPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Yes No
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteYesNo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_kickPercent;

    // Automatic Variable Declarations
    unitgroup auto19E1F3EE_g;
    int auto19E1F3EE_u;
    unit auto19E1F3EE_var;
    int auto73B9666F_val;
    playergroup autoE1B4F519_g;
    int autoE1B4F519_var;
    const int auto19B9E8A1_ae = 15;
    int auto19B9E8A1_var;
    playergroup autoA26EE2BA_g;
    int autoA26EE2BA_var;
    unitgroup auto0C91CBD9_g;
    int auto0C91CBD9_u;
    unit auto0C91CBD9_var;
    const int auto2E7E8C1F_ae = 15;
    int auto2E7E8C1F_var;
    playergroup autoBE8CA108_g;
    int autoBE8CA108_var;
    unitgroup auto0C862774_g;
    int auto0C862774_u;
    unit auto0C862774_var;
    const int auto7FAFCE1E_ae = 15;
    int auto7FAFCE1E_var;
    playergroup auto5F38F0BC_g;
    int auto5F38F0BC_var;
    unitgroup autoE27C76EC_g;
    int autoE27C76EC_u;
    unit autoE27C76EC_var;
    const int auto48097510_ae = 15;
    int auto48097510_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_voteKickVoteBoardNo) || (EventDialogControl() == gv_voteKickVoteBoardYes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto19E1F3EE_g = UnitGroup("HighTemplar", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19E1F3EE_u = UnitGroupCount(auto19E1F3EE_g, c_unitCountAll);
    for (;; auto19E1F3EE_u -= 1) {
        auto19E1F3EE_var = UnitGroupUnitFromEnd(auto19E1F3EE_g, auto19E1F3EE_u);
        if (auto19E1F3EE_var == null) { break; }
        DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(UnitGetOwner(auto19E1F3EE_var)), false);
        DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(UnitGetOwner(auto19E1F3EE_var)), false);
    }
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, gv_playerGroupHunters, false);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, gv_playerGroupHunters, false);
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, gv_playerGroupZealots, false);
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == false)) {
        auto73B9666F_val = EventDialogControl();
        if (auto73B9666F_val == gv_voteKickVoteBoardNo) {
            gv_numberofVotesNo += 1;
            if ((gf_PlayerIsDeveloper(EventPlayer()) == true)) {
                gv_numberofVotesNo += 13;
            }

            if ((gf_PlayerIsDonor(EventPlayer()) == true)) {
                gv_numberofVotesNo += 0;
            }

            gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
            gv_voteKickValue[EventPlayer()] = 1;
        }
        else if (auto73B9666F_val == gv_voteKickVoteBoardYes) {
            gv_numberofVotesYes += 1;
            if ((gf_PlayerIsDeveloper(EventPlayer()) == true)) {
                gv_numberofVotesYes += 13;
            }

            if ((gf_PlayerIsDonor(EventPlayer()) == true)) {
                gv_numberofVotesYes += 0;
            }

            gv_voteKickVoteBoardVotedAlready[EventPlayer()] = true;
            gv_voteKickValue[EventPlayer()] = 2;
        }
        else {
        }
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, (StringExternal("Param/Value/DEA1756A") + IntToText(gv_numberofVotesYes)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, (StringExternal("Param/Value/6121891B") + IntToText(gv_numberofVotesNo)), PlayerGroupAll());
    }

    lv_kickPercent = (gv_numberofVotesYes / IntToFixed(gf_NumberofPlayers()));
    lv_kickPercent = (lv_kickPercent * 100.0);
    if ((((PlayerGroupCount(PlayerGroupActive()) == 4) && (lv_kickPercent >= 75.0) && (gv_kickType == 3)) || ((PlayerGroupCount(PlayerGroupActive()) > 4) && (gv_numberofVotesYes > gv_numberofVotesNo) && (lv_kickPercent >= 70.0) && (gv_kickType == 3)))) {
        TimerPause(gv_kickVoteTimer, true);
        DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
        DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
        auto5F38F0BC_g = PlayerGroupActive();
        auto5F38F0BC_var = -1;
        while (true) {
            auto5F38F0BC_var = PlayerGroupNextPlayer(auto5F38F0BC_g, auto5F38F0BC_var);
            if (auto5F38F0BC_var < 0) { break; }
            if (((gv_hunterStatus[auto5F38F0BC_var] == false) && (gv_probeSpiritStatus[auto5F38F0BC_var] == false))) {
                DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(auto5F38F0BC_var), true);
            }

        }
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/E305C35A"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/6B8C9981"), PlayerGroupAll());
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(gv_kickerPlayer) + StringExternal("Param/Value/3DE3DAD9")));
        PlayerCreateEffectUnit(PlayerGroupPlayer(gv_playerGroupZealots, 1), "ScannerSweep", gv_probes[gv_kickerPlayer]);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/618B504D")));
        Wait(5.0, c_timeGame);
        autoE27C76EC_g = UnitGroup(null, gv_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoE27C76EC_u = UnitGroupCount(autoE27C76EC_g, c_unitCountAll);
        for (;; autoE27C76EC_u -= 1) {
            autoE27C76EC_var = UnitGroupUnitFromEnd(autoE27C76EC_g, autoE27C76EC_u);
            if (autoE27C76EC_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(autoE27C76EC_var), c_unitFlagWorker) == false)) {
                UnitIssueOrder(autoE27C76EC_var, Order(AbilityCommand("Destroy", 0)), c_orderQueueReplace);
                UnitIssueOrder(autoE27C76EC_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
                UnitIssueOrder(autoE27C76EC_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
                UnitIssueOrder(autoE27C76EC_var, Order(AbilityCommand("SelfDestruct", 0)), c_orderQueueReplace);
            }

            if ((UnitGetType(autoE27C76EC_var) == "Probe")) {
                RegionSetCenter(RegionFromId(96), gv_centerPoint);
                CameraSetValue(UnitGetOwner(autoE27C76EC_var), c_cameraValueYaw, 90.0, 0.5, -1, 10.0);
                CameraPan(UnitGetOwner(autoE27C76EC_var), gv_centerPoint, 1.0, -1, 10.0, false);
                UnitSetPosition(autoE27C76EC_var, RegionRandomPoint(RegionFromId(96)), true);
                UnitBehaviorAdd(autoE27C76EC_var, "CloakProbe", UnitBehaviorEffectUnit(autoE27C76EC_var, "CloakProbe", c_effectUnitCaster, 0), 1);
            }

        }
        TriggerEnable(gt_KickVoteTimerLabel, false);
        gv_numberofVotesNo = 0;
        gv_numberofVotesYes = 0;
        auto48097510_var = 1;
        for ( ; auto48097510_var <= auto48097510_ae; auto48097510_var += 1 ) {
            gv_voteKickVoteBoardVotedAlready[auto48097510_var] = false;
            gv_voteKickValue[auto48097510_var] = 0;
        }
        gv_voteKickVoteBoardStarted = false;
        TimerStart(gv_voteKickCooldown[gv_kickerPlayer], 60.0, false, c_timeGame);
    }
    else {
        if ((((PlayerGroupCount(PlayerGroupActive()) == 4) && (lv_kickPercent >= 75.0) && (gv_kickType == 2)) || ((PlayerGroupCount(PlayerGroupActive()) > 4) && (gv_numberofVotesYes > gv_numberofVotesNo) && (lv_kickPercent >= 70.0) && (gv_kickType == 2)))) {
            TimerPause(gv_kickVoteTimer, true);
            DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
            DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
            DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
            autoBE8CA108_g = PlayerGroupActive();
            autoBE8CA108_var = -1;
            while (true) {
                autoBE8CA108_var = PlayerGroupNextPlayer(autoBE8CA108_g, autoBE8CA108_var);
                if (autoBE8CA108_var < 0) { break; }
                if (((gv_hunterStatus[autoBE8CA108_var] == false) && (gv_probeSpiritStatus[autoBE8CA108_var] == false))) {
                    DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(autoBE8CA108_var), true);
                }

            }
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/8DEE8778"), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/D333077D"), PlayerGroupAll());
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(gv_kickerPlayer) + StringExternal("Param/Value/FE2552B0")));
            PlayerCreateEffectUnit(PlayerGroupPlayer(gv_playerGroupZealots, 1), "ScannerSweep", gv_probes[gv_kickerPlayer]);
            TextTagDestroy(gv_playersLabelRanks[gv_kickedPlayer]);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/483748D1")));
            GameOver(gv_kickedPlayer, c_gameOverDefeat, false, false);
            TimerStart(gv_timerRemove[gv_kickedPlayer], 15.0, false, c_timeGame);
            UnitSetHeight(gv_probes[gv_kickedPlayer], 1.0, 0.0);
            UnitBehaviorAdd(gv_probes[gv_kickedPlayer], "BuilderRemove", gv_probes[gv_kickedPlayer], 1);
            gv_probes[gv_kickedPlayer] = null;
            auto0C862774_g = UnitGroup(null, gv_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto0C862774_u = UnitGroupCount(auto0C862774_g, c_unitCountAll);
            for (;; auto0C862774_u -= 1) {
                auto0C862774_var = UnitGroupUnitFromEnd(auto0C862774_g, auto0C862774_u);
                if (auto0C862774_var == null) { break; }
                UnitBehaviorAdd(auto0C862774_var, "Removing", auto0C862774_var, 1);
                ActorSend(libNtve_gf_MainActorofUnit(auto0C862774_var), "SetOpacity 0.000000 15.000000");
            }
            TriggerExecute(gt_VictoryDefeatConditionsProbeDies, true, true);
            TriggerEnable(gt_KickVoteTimerLabel, false);
            gv_numberofVotesNo = 0;
            gv_numberofVotesYes = 0;
            auto7FAFCE1E_var = 1;
            for ( ; auto7FAFCE1E_var <= auto7FAFCE1E_ae; auto7FAFCE1E_var += 1 ) {
                gv_voteKickVoteBoardVotedAlready[auto7FAFCE1E_var] = false;
                gv_voteKickValue[auto7FAFCE1E_var] = 0;
            }
            gv_voteKickVoteBoardStarted = false;
            TimerStart(gv_voteKickCooldown[gv_kickerPlayer], 60.0, false, c_timeGame);
        }
        else {
            if ((((PlayerGroupCount(PlayerGroupActive()) == 4) && (lv_kickPercent >= 75.0) && (gv_kickType == 1)) || ((PlayerGroupCount(PlayerGroupActive()) > 4) && (gv_numberofVotesYes > gv_numberofVotesNo) && (lv_kickPercent >= 70.0) && (gv_kickType == 1)))) {
                TimerPause(gv_kickVoteTimer, true);
                DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
                DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
                DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
                autoA26EE2BA_g = PlayerGroupActive();
                autoA26EE2BA_var = -1;
                while (true) {
                    autoA26EE2BA_var = PlayerGroupNextPlayer(autoA26EE2BA_g, autoA26EE2BA_var);
                    if (autoA26EE2BA_var < 0) { break; }
                    if (((gv_hunterStatus[autoA26EE2BA_var] == false) && (gv_probeSpiritStatus[autoA26EE2BA_var] == false))) {
                        DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(autoA26EE2BA_var), true);
                    }

                }
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/3E862C0B"), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/C64CFDCD"), PlayerGroupAll());
                if (((gv_hunterStatus[gv_kickedPlayer] == false) && (gv_probeSpiritStatus[gv_kickedPlayer] == false))) {
                    TextTagDestroy(gv_playersLabelRanks[gv_kickedPlayer]);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (PlayerName(gv_kickerPlayer) + StringExternal("Param/Value/45E1E180")));
                    PlayerCreateEffectUnit(PlayerGroupPlayer(gv_playerGroupZealots, 1), "ScannerSweep", gv_probes[gv_kickerPlayer]);
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(gv_kickedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_kickedPlayer, false))) + StringExternal("Param/Value/0C3028EC")));
                    TimerStart(gv_timerRemove[gv_kickedPlayer], 15.0, false, c_timeGame);
                    UnitSetHeight(gv_probes[gv_kickedPlayer], 1.0, 0.0);
                    UnitBehaviorAdd(gv_probes[gv_kickedPlayer], "BuilderRemove", gv_probes[gv_kickedPlayer], 1);
                    gv_probes[gv_kickedPlayer] = null;
                    auto0C91CBD9_g = UnitGroup(null, gv_kickedPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
                    auto0C91CBD9_u = UnitGroupCount(auto0C91CBD9_g, c_unitCountAll);
                    for (;; auto0C91CBD9_u -= 1) {
                        auto0C91CBD9_var = UnitGroupUnitFromEnd(auto0C91CBD9_g, auto0C91CBD9_u);
                        if (auto0C91CBD9_var == null) { break; }
                        UnitBehaviorAdd(auto0C91CBD9_var, "Removing", auto0C91CBD9_var, 1);
                        ActorSend(libNtve_gf_MainActorofUnit(auto0C91CBD9_var), "SetOpacity 0.000000 15.000000");
                    }
                    gf_ProbeDiesCreateProbeSpirit(gv_kickedPlayer);
                    DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(gv_kickedPlayer), false);
                }

                TriggerEnable(gt_KickVoteTimerLabel, false);
                gv_numberofVotesNo = 0;
                gv_numberofVotesYes = 0;
                auto2E7E8C1F_var = 1;
                for ( ; auto2E7E8C1F_var <= auto2E7E8C1F_ae; auto2E7E8C1F_var += 1 ) {
                    gv_voteKickVoteBoardVotedAlready[auto2E7E8C1F_var] = false;
                    gv_voteKickValue[auto2E7E8C1F_var] = 0;
                }
                gv_voteKickVoteBoardStarted = false;
                TimerStart(gv_voteKickCooldown[gv_kickerPlayer], 60.0, false, c_timeGame);
            }
            else {
                lv_kickPercent = (gv_numberofVotesNo / IntToFixed(gf_NumberofPlayers()));
                lv_kickPercent = (lv_kickPercent * 100.0);
                if ((((PlayerGroupCount(PlayerGroupActive()) == 4) && (lv_kickPercent >= 75.0)) || ((gv_numberofVotesYes < gv_numberofVotesNo) && (PlayerGroupCount(PlayerGroupActive()) > 4) && (lv_kickPercent >= 70.0)))) {
                    TimerPause(gv_kickVoteTimer, true);
                    DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
                    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
                    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
                    autoE1B4F519_g = PlayerGroupActive();
                    autoE1B4F519_var = -1;
                    while (true) {
                        autoE1B4F519_var = PlayerGroupNextPlayer(autoE1B4F519_g, autoE1B4F519_var);
                        if (autoE1B4F519_var < 0) { break; }
                        if (((gv_hunterStatus[autoE1B4F519_var] == false) && (gv_probeSpiritStatus[autoE1B4F519_var] == false))) {
                            DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(autoE1B4F519_var), true);
                        }

                    }
                    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/ED6603CB"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/16CE527C"), PlayerGroupAll());
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/0D5E8B79"));
                    TriggerEnable(gt_KickVoteTimerLabel, false);
                    gv_numberofVotesNo = 0;
                    gv_numberofVotesYes = 0;
                    auto19B9E8A1_var = 1;
                    for ( ; auto19B9E8A1_var <= auto19B9E8A1_ae; auto19B9E8A1_var += 1 ) {
                        gv_voteKickVoteBoardVotedAlready[auto19B9E8A1_var] = false;
                        gv_voteKickValue[auto19B9E8A1_var] = 0;
                    }
                    gv_voteKickVoteBoardStarted = false;
                    TimerStart(gv_voteKickCooldown[gv_kickerPlayer], gf_PvZ2Time(60.0), false, c_timeGame);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteYesNo_Init () {
    gt_KickVoteYesNo = TriggerCreate("gt_KickVoteYesNo_Func");
    TriggerEnable(gt_KickVoteYesNo, false);
    TriggerAddEventDialogControl(gt_KickVoteYesNo, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Timer Label
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteTimerLabel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kickTimerTime -= gv_timescalevalue;
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardTimerLabel, (StringExternal("Param/Value/986921F9") + FixedToText(gv_kickTimerTime, 0)), PlayerGroupActive());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteTimerLabel_Init () {
    gt_KickVoteTimerLabel = TriggerCreate("gt_KickVoteTimerLabel_Func");
    TriggerEnable(gt_KickVoteTimerLabel, false);
    TriggerAddEventTimePeriodic(gt_KickVoteTimerLabel, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kick Vote Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_KickVoteTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_kickPercent;

    // Automatic Variable Declarations
    playergroup auto2E0E787D_g;
    int auto2E0E787D_var;
    const int autoEAAB698F_ae = 15;
    int autoEAAB698F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_voteKickVoteBoard, PlayerGroupActive(), false);
    DialogControlSetEnabled(gv_voteKickVoteBoardNo, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_voteKickVoteBoardYes, PlayerGroupAll(), true);
    auto2E0E787D_g = PlayerGroupActive();
    auto2E0E787D_var = -1;
    while (true) {
        auto2E0E787D_var = PlayerGroupNextPlayer(auto2E0E787D_g, auto2E0E787D_var);
        if (auto2E0E787D_var < 0) { break; }
        if (((gv_hunterStatus[auto2E0E787D_var] == false) && (gv_probeSpiritStatus[auto2E0E787D_var] == false))) {
            DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(auto2E0E787D_var), true);
        }

    }
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardYesLabel, StringExternal("Param/Value/8BA7988F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_voteKickVoteBoardNoLabel, StringExternal("Param/Value/3CA0486B"), PlayerGroupAll());
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/606D99CC"));
    TriggerEnable(gt_KickVoteTimerLabel, false);
    gv_numberofVotesNo = 0;
    gv_numberofVotesYes = 0;
    autoEAAB698F_var = 1;
    for ( ; autoEAAB698F_var <= autoEAAB698F_ae; autoEAAB698F_var += 1 ) {
        gv_voteKickVoteBoardVotedAlready[autoEAAB698F_var] = false;
        gv_voteKickValue[autoEAAB698F_var] = 0;
    }
    gv_voteKickVoteBoardStarted = false;
    TimerStart(gv_voteKickCooldown[gv_kickerPlayer], gf_PvZ2Time(60.0), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KickVoteTimerExpires_Init () {
    gt_KickVoteTimerExpires = TriggerCreate("gt_KickVoteTimerExpires_Func");
    TriggerAddEventTimer(gt_KickVoteTimerExpires, gv_kickVoteTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Kick Cooldown Expires
//--------------------------------------------------------------------------------------------------
bool gt_VoteKickCooldownExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer autoDE9E79ED_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE9E79ED_val = EventTimer();
    if (autoDE9E79ED_val == gv_voteKickCooldown[1]) {
        gv_voteKickCooldownExpired[1] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[2]) {
        gv_voteKickCooldownExpired[2] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[3]) {
        gv_voteKickCooldownExpired[3] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[4]) {
        gv_voteKickCooldownExpired[4] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[5]) {
        gv_voteKickCooldownExpired[5] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[6]) {
        gv_voteKickCooldownExpired[6] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[7]) {
        gv_voteKickCooldownExpired[7] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[8]) {
        gv_voteKickCooldownExpired[8] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[9]) {
        gv_voteKickCooldownExpired[9] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[10]) {
        gv_voteKickCooldownExpired[10] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[11]) {
        gv_voteKickCooldownExpired[11] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[12]) {
        gv_voteKickCooldownExpired[12] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[13]) {
        gv_voteKickCooldownExpired[13] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[14]) {
        gv_voteKickCooldownExpired[14] = true;
    }
    else if (autoDE9E79ED_val == gv_voteKickCooldown[15]) {
        gv_voteKickCooldownExpired[15] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteKickCooldownExpires_Init () {
    gt_VoteKickCooldownExpires = TriggerCreate("gt_VoteKickCooldownExpires_Func");
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[1]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[2]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[3]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[4]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[5]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[6]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[7]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[8]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[9]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[10]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[11]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[12]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[13]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[14]);
    TriggerAddEventTimer(gt_VoteKickCooldownExpires, gv_voteKickCooldown[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Profile
//--------------------------------------------------------------------------------------------------
bool gt_InitProfile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_offsetX;
    int lv_offsetY;
    string lv_tempImage;

    // Automatic Variable Declarations
    const int auto19915795_ae = 14;
    const int auto19915795_ai = 1;
    const int auto00395946_ae = 14;
    const int auto00395946_ai = 1;
    string auto1B8143CF_val;
    const int autoF473B54A_ae = 3;
    const int autoF473B54A_ai = 1;
    const int autoECB981D2_ae = 3;
    const int autoECB981D2_ai = 1;
    const int autoEC9B4983_ae = 3;
    const int autoEC9B4983_ai = 1;
    const int auto1D797BD7_ae = 3;
    const int auto1D797BD7_ai = 1;
    const int auto8CC1CEE9_ae = 3;
    const int auto8CC1CEE9_ai = 1;
    const int auto35EF909A_ae = 3;
    const int auto35EF909A_ai = 1;

    // Variable Initialization
    lv_offsetX = 30;
    lv_offsetY = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorTopLeft, 240, -52, true);
    gv_profileDialogMain = DialogLastCreated();
    lv_i = 1;
    for ( ; ( (auto19915795_ai >= 0 && lv_i <= auto19915795_ae) || (auto19915795_ai < 0 && lv_i >= auto19915795_ae) ) ; lv_i += auto19915795_ai ) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_i), true);
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 40, c_anchorTopLeft, 40, 50, StringExternal("Param/Value/007B200F"), StringExternal("Param/Value/075F7D54"), "");
    gv_profileButton = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogCreate(1600, 768, c_anchorCenter, 0, -150, true);
    gv_profileDialog = DialogLastCreated();
    DialogCreate(400, 768, c_anchorCenter, 0, 0, true);
    gv_profileDialogButtonArea = DialogLastCreated();
    DialogSetPositionRelative(gv_profileDialogButtonArea, c_anchorTopLeft, gv_profileDialog, c_anchorTopLeft, 0, 0);
    libNtve_gf_CreateDialogItemLabel(gv_profileDialogButtonArea, 200, 50, c_anchorTop, 17, 40, StringToText(""), Color(100,100,100), false, 2.0);
    gv_profileDialogNameofPlayer = DialogControlLastCreated();
    gv_yoffset = 70;
    gf_CreateDialogItemProfileButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/85DED22A"));
    gf_CreateDialogItemProfileAchievementButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/D17C9CF7"));
    gv_yoffset += gv_yInc;
    gv_numberofProfileButton += 1;
    gv_numberofProfileAchievementButton += 1;
    gf_CreateDialogItemProfileButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/181B58A2"));
    gf_CreateDialogItemProfileAchievementButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/FB8CBA19"));
    gv_yoffset += gv_yInc;
    gv_numberofProfileButton += 1;
    gv_numberofProfileAchievementButton += 1;
    gf_CreateDialogItemProfileButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/99798A33"));
    gf_CreateDialogItemProfileAchievementButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/4BB3BCD8"));
    gv_yoffset += gv_yInc;
    gv_numberofProfileButton += 1;
    gv_numberofProfileAchievementButton += 1;
    gf_CreateDialogItemProfileButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/FBE24AD8"));
    gf_CreateDialogItemProfileAchievementButton(gv_profileDialogButtonArea, gv_width, gv_height, gv_xoffset, gv_yoffset, StringExternal("Param/Value/F1D37E4C"));
    DialogCreate(1200, 768, c_anchorCenter, 0, 0, true);
    gv_profileDialogWorkArea = DialogLastCreated();
    DialogSetPositionRelative(gv_profileDialogWorkArea, c_anchorTopRight, gv_profileDialog, c_anchorTopRight, 0, 0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 120, c_anchorBottomRight, 0, 0, StringToText(""), StringExternal("Param/Value/5A39E0BE"), "");
    gv_profileCloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1200, 768, c_anchorCenter, 0, 0, StringToText(""), Color(100,100,100), false, 2.0);
    gv_profileDialogText[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 25);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 200, 50);
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 100.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_progressBarAchievements = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorBottomLeft, 50, -25, StringExternal("Param/Value/5F9A438F"), Color(100,100,100), false, 0.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_progressBarName = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorBottomLeft, 510, -25, StringExternal("Param/Value/7AC09C15"), Color(100,100,100), false, 0.0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_progressBarPercent = DialogControlLastCreated();
    lv_i = 1;
    for ( ; ( (auto00395946_ai >= 0 && lv_i <= auto00395946_ae) || (auto00395946_ai < 0 && lv_i >= auto00395946_ae) ) ; lv_i += auto00395946_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            auto1B8143CF_val = PlayerRace(lv_i);
            if (auto1B8143CF_val == "Terr") {
                lv_tempImage = "ui_button_popup_right_normalpressed_terran.dds";
                libNtve_gf_SetDialogItemImage(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_button_popup_right_normaloverpressedover_terran.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_j = 0;
                for ( ; ( (autoF473B54A_ai >= 0 && lv_j <= autoF473B54A_ae) || (autoF473B54A_ai < 0 && lv_j >= autoF473B54A_ae) ) ; lv_j += autoF473B54A_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_terran.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_terran.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_j = 0;
                for ( ; ( (autoECB981D2_ai >= 0 && lv_j <= autoECB981D2_ae) || (autoECB981D2_ai < 0 && lv_j >= autoECB981D2_ae) ) ; lv_j += autoECB981D2_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_terran.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_terran.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_tempImage = "Highlighted Button Terran.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_terran_arrowright.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_terran_arrowright.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_terran_arrowleft.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_terran_arrowleft.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "Highlighted Button Terran.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
            }
            else if (auto1B8143CF_val == "Prot") {
                lv_tempImage = "ui_button_popup_right_normalpressed_protoss.dds";
                libNtve_gf_SetDialogItemImage(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_button_popup_right_normalpressedover_protoss.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                DialogControlSetPosition(gv_profileCloseButton, PlayerGroupSingle(lv_i), c_anchorBottomRight, 15, 15);
                lv_j = 0;
                for ( ; ( (autoEC9B4983_ai >= 0 && lv_j <= autoEC9B4983_ae) || (autoEC9B4983_ai < 0 && lv_j >= autoEC9B4983_ae) ) ; lv_j += autoEC9B4983_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_protoss.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_j = 0;
                for ( ; ( (auto1D797BD7_ai >= 0 && lv_j <= auto1D797BD7_ae) || (auto1D797BD7_ai < 0 && lv_j >= auto1D797BD7_ae) ) ; lv_j += auto1D797BD7_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_protoss.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_tempImage = "Highlighted Button Protoss.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_protoss_arrowright.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss_arrowright.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_protoss_arrowleft.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss_arrowleft.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "Highlighted Button Protoss.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
            }
            else if (auto1B8143CF_val == "Zerg") {
                lv_tempImage = "ui_button_popup_right_normalpressed_zerg.dds";
                libNtve_gf_SetDialogItemImage(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_button_popup_right_normaloverpressedover_zerg.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileCloseButton, lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileCloseButton, c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                DialogControlSetPosition(gv_profileCloseButton, PlayerGroupSingle(lv_i), c_anchorBottomRight, 20, 15);
                lv_j = 0;
                for ( ; ( (auto8CC1CEE9_ai >= 0 && lv_j <= auto8CC1CEE9_ae) || (auto8CC1CEE9_ai < 0 && lv_j >= auto8CC1CEE9_ae) ) ; lv_j += auto8CC1CEE9_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_zerg.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_zerg.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_j = 0;
                for ( ; ( (auto35EF909A_ai >= 0 && lv_j <= auto35EF909A_ae) || (auto35EF909A_ai < 0 && lv_j >= auto35EF909A_ae) ) ; lv_j += auto35EF909A_ai ) {
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_zerg.dds";
                    libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                    lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_zerg.dds";
                    libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[lv_j], lv_tempImage, PlayerGroupSingle(lv_i));
                    libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[lv_j], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                }
                lv_tempImage = "Highlighted Button Zerg.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_zerg_arrowright.dds";
                libNtve_gf_SetDialogItemImage(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_zerg_arrowright.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileButtons[2], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileButtons[2], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normalpressed_zerg_arrowleft.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "ui_help_tabbutton_normaloverpressedover_zerg_arrowleft.dds";
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[0], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[0], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                lv_tempImage = "Highlighted Button Zerg.dds";
                libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[1], lv_tempImage, PlayerGroupSingle(lv_i));
                libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[1], c_triggerImageTypeEndCap, PlayerGroupSingle(lv_i));
            }
            else {
            }
        }

    }
    TriggerExecute(gt_InitCommonAchievementsProfile, true, true);
    TriggerExecute(gt_InitHumanAchievementsProfile, true, true);
    TriggerExecute(gt_InitVampireAchievementsProfile, true, true);
    TriggerExecute(gt_InitRewardsProfile, true, true);
    Wait(0.1, c_timeGame);
    TriggerExecute(gt_CheckAchievements, true, false);
    TriggerExecute(gt_CheckStatusofRewards, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitProfile_Init () {
    gt_InitProfile = TriggerCreate("gt_InitProfile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Profile Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ProfileButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_stats;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_profileButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_profileDialog, EventPlayer()) == false)) {
        gf_UpdateandShowProfileofPlayer(EventPlayer(), EventPlayer());
        gv_profileofPlayer[EventPlayer()] = EventPlayer();
    }
    else {
        DialogSetVisible(gv_profileDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_profileDialogButtonArea, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_profileDialogWorkArea, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProfileButtonPressed_Init () {
    gt_ProfileButtonPressed = TriggerCreate("gt_ProfileButtonPressed_Func");
    TriggerEnable(gt_ProfileButtonPressed, false);
    TriggerAddEventDialogControl(gt_ProfileButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Profile Close Button Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ProfileCloseButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_profileCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_profileDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_profileDialogButtonArea, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_profileDialogWorkArea, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProfileCloseButtonPressed_Init () {
    gt_ProfileCloseButtonPressed = TriggerCreate("gt_ProfileCloseButtonPressed_Func");
    TriggerEnable(gt_ProfileCloseButtonPressed, false);
    TriggerAddEventDialogControl(gt_ProfileCloseButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Profile Buttons Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ProfileButtonsPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_stats;
    string lv_tempImage;

    // Automatic Variable Declarations
    string auto66B44C56_val;
    int autoFFDACE7C_val;
    const int auto1A0A837B_ae = 3;
    const int auto1A0A837B_ai = 1;
    const int autoFC5D6CBE_ae = 3;
    const int autoFC5D6CBE_ai = 1;
    int auto3B12C0F7_val;
    const int auto67EB24EF_ae = gv_numberofCommonAchievements;
    const int auto67EB24EF_ai = 1;
    const int autoBFD02916_ae = gv_numberofProbeAchievements;
    const int autoBFD02916_ai = 1;
    const int auto0DB95C70_ae = gv_numberofZealotAchievements;
    const int auto0DB95C70_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_profileButtons[0]) || (EventDialogControl() == gv_profileButtons[1]) || (EventDialogControl() == gv_profileButtons[2]) || (EventDialogControl() == gv_profileButtons[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_profileDialogText[gv_currentPressedProfileButton[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() != gv_profileButtons[2])) {
        auto66B44C56_val = PlayerRace(EventPlayer());
        if (auto66B44C56_val == "Terr") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_terran.dds";
            libNtve_gf_SetDialogItemImage(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_terran.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Terran.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else if (auto66B44C56_val == "Prot") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_protoss.dds";
            libNtve_gf_SetDialogItemImage(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Protoss.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else if (auto66B44C56_val == "Zerg") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_zerg.dds";
            libNtve_gf_SetDialogItemImage(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_zerg.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileButtons[gv_currentPressedProfileButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Zerg.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
    }

    autoFFDACE7C_val = EventDialogControl();
    if (autoFFDACE7C_val == gv_profileButtons[0]) {
        gv_currentPressedProfileButton[EventPlayer()] = 0;
        DialogControlSetVisible(gv_profileDialogText[0], PlayerGroupSingle(EventPlayer()), true);
        gf_ShowHideRewards(false, EventPlayer());
    }
    else if (autoFFDACE7C_val == gv_profileButtons[1]) {
        gv_currentPressedProfileButton[EventPlayer()] = 1;
        lv_stats = (StringExternal("Param/Value/DA105CA1") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "StructuresBuiltCount")) + ((StringExternal("Param/Value/8AE188D0") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "UnitsKilledCount"))) + ((StringExternal("Param/Value/0276D41C") + IntToText(gv_feed[gv_profileofPlayer[EventPlayer()]])) + ((StringExternal("Param/Value/E40DE922") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "APM"))) + ((StringExternal("Param/Value/F615A25B") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "TotalOverview"))) + StringToText("")))))));
        libNtve_gf_SetDialogItemText(gv_profileDialogText[1], (StringExternal("Param/Value/76A2C665") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "MineralsCollected")) + (StringExternal("Param/Value/40DAC146") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "VespeneCollected")) + (StringExternal("Param/Value/0D2B5A27") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "MineralsCollectionRate")) + (StringExternal("Param/Value/6838299A") + (StringExternal("Param/Value/C8F912E1") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "VespeneCollectionRate")) + (StringExternal("Param/Value/0DE2B3FD") + (StringExternal("Param/Value/8ED40295") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "UnitsLostAll")) + lv_stats)))))))))))), PlayerGroupSingle(EventPlayer()));
        DialogControlSetVisible(gv_profileDialogText[1], PlayerGroupSingle(EventPlayer()), true);
        gf_ShowHideRewards(false, EventPlayer());
    }
    else if (autoFFDACE7C_val == gv_profileButtons[2]) {
        gv_currentProfileSection[EventPlayer()] = "AchievementsSection";
        gf_ShowHideRewards(false, EventPlayer());
        lv_i = 0;
        for ( ; ( (auto1A0A837B_ai >= 0 && lv_i <= auto1A0A837B_ae) || (auto1A0A837B_ai < 0 && lv_i >= auto1A0A837B_ae) ) ; lv_i += auto1A0A837B_ai ) {
            DialogControlSetVisible(gv_profileButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 0;
        for ( ; ( (autoFC5D6CBE_ai >= 0 && lv_i <= autoFC5D6CBE_ae) || (autoFC5D6CBE_ai < 0 && lv_i >= autoFC5D6CBE_ae) ) ; lv_i += autoFC5D6CBE_ai ) {
            DialogControlSetVisible(gv_profileAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        auto3B12C0F7_val = gv_currentPressedProfileAchievementButton[EventPlayer()];
        if (auto3B12C0F7_val == 1) {
            gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[1]);
            lv_i = 1;
            for ( ; ( (auto67EB24EF_ai >= 0 && lv_i <= auto67EB24EF_ae) || (auto67EB24EF_ai < 0 && lv_i >= auto67EB24EF_ae) ) ; lv_i += auto67EB24EF_ai ) {
                DialogControlSetVisible(gv_profileCommonAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_profileCommonAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else if (auto3B12C0F7_val == 2) {
            gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[2]);
            lv_i = 1;
            for ( ; ( (autoBFD02916_ai >= 0 && lv_i <= autoBFD02916_ae) || (autoBFD02916_ai < 0 && lv_i >= autoBFD02916_ae) ) ; lv_i += autoBFD02916_ai ) {
                DialogControlSetVisible(gv_profileHumanAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_profileHumanAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else if (auto3B12C0F7_val == 3) {
            gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[3]);
            lv_i = 1;
            for ( ; ( (auto0DB95C70_ai >= 0 && lv_i <= auto0DB95C70_ae) || (auto0DB95C70_ai < 0 && lv_i >= auto0DB95C70_ae) ) ; lv_i += auto0DB95C70_ai ) {
                DialogControlSetVisible(gv_profileVampireAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_profileVampireAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else {
        }
    }
    else if (autoFFDACE7C_val == gv_profileButtons[3]) {
        gv_currentPressedProfileButton[EventPlayer()] = 3;
        gf_ShowHideRewards(true, EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProfileButtonsPressed_Init () {
    gt_ProfileButtonsPressed = TriggerCreate("gt_ProfileButtonsPressed_Func");
    TriggerEnable(gt_ProfileButtonsPressed, false);
    TriggerAddEventDialogControl(gt_ProfileButtonsPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Profile Achievements Buttons Pressed
//--------------------------------------------------------------------------------------------------
bool gt_ProfileAchievementsButtonsPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_stats;
    int lv_i;
    string lv_tempImage;

    // Automatic Variable Declarations
    string auto4A993F23_val;
    int autoDC6484B6_val;
    const int auto07F7E984_ae = 3;
    const int auto07F7E984_ai = 1;
    const int auto54A52316_ae = 3;
    const int auto54A52316_ai = 1;
    const int autoE64FAC11_ae = gv_numberofCommonAchievements;
    const int autoE64FAC11_ai = 1;
    const int auto2FAD9179_ae = gv_numberofProbeAchievements;
    const int auto2FAD9179_ai = 1;
    const int autoC8243DE8_ae = gv_numberofZealotAchievements;
    const int autoC8243DE8_ai = 1;
    const int autoA25D067F_ae = gv_numberofCommonAchievements;
    const int autoA25D067F_ai = 1;
    const int auto897A1E68_ae = gv_numberofProbeAchievements;
    const int auto897A1E68_ai = 1;
    const int auto949FB860_ae = gv_numberofZealotAchievements;
    const int auto949FB860_ai = 1;
    const int autoB25E30E4_ae = 3;
    const int autoB25E30E4_ai = 1;
    const int auto4CF7C294_ae = gv_numberofCommonAchievements;
    const int auto4CF7C294_ai = 1;
    const int auto3C89616B_ae = gv_numberofProbeAchievements;
    const int auto3C89616B_ai = 1;
    const int auto500578D4_ae = gv_numberofZealotAchievements;
    const int auto500578D4_ai = 1;
    const int autoBE18D96C_ae = 3;
    const int autoBE18D96C_ai = 1;
    const int autoB16A901C_ae = gv_numberofCommonAchievements;
    const int autoB16A901C_ai = 1;
    const int auto3EEF54AF_ae = gv_numberofProbeAchievements;
    const int auto3EEF54AF_ai = 1;
    const int auto728E3EC1_ae = gv_numberofZealotAchievements;
    const int auto728E3EC1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_profileAchievementsButtons[0]) || (EventDialogControl() == gv_profileAchievementsButtons[1]) || (EventDialogControl() == gv_profileAchievementsButtons[2]) || (EventDialogControl() == gv_profileAchievementsButtons[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() != gv_profileAchievementsButtons[0])) {
        auto4A993F23_val = PlayerRace(EventPlayer());
        if (auto4A993F23_val == "Terr") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_terran.dds";
            libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_terran.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Terran.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else if (auto4A993F23_val == "Prot") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_protoss.dds";
            libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "ui_help_tabbutton_normaloverpressedover_protoss.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Protoss.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else if (auto4A993F23_val == "Zerg") {
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normalpressed_zerg.dds";
            libNtve_gf_SetDialogItemImage(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Assets\\Textures\\ui_help_tabbutton_normaloverpressedover_zerg.dds";
            libNtve_gf_SetDialogItemImage2(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(gv_profileAchievementsButtons[gv_currentPressedProfileAchievementButton[EventPlayer()]], c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            lv_tempImage = "Highlighted Button Zerg.dds";
            libNtve_gf_SetDialogItemImage(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImage2(EventDialogControl(), lv_tempImage, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemImageType(EventDialogControl(), c_triggerImageTypeEndCap, PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
    }

    autoDC6484B6_val = EventDialogControl();
    if (autoDC6484B6_val == gv_profileAchievementsButtons[0]) {
        gv_currentProfileSection[EventPlayer()] = "MainSection";
        gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[0]);
        lv_i = 0;
        for ( ; ( (auto07F7E984_ai >= 0 && lv_i <= auto07F7E984_ae) || (auto07F7E984_ai < 0 && lv_i >= auto07F7E984_ae) ) ; lv_i += auto07F7E984_ai ) {
            DialogControlSetVisible(gv_profileButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        lv_i = 0;
        for ( ; ( (auto54A52316_ai >= 0 && lv_i <= auto54A52316_ae) || (auto54A52316_ai < 0 && lv_i >= auto54A52316_ae) ) ; lv_i += auto54A52316_ai ) {
            DialogControlSetVisible(gv_profileAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (autoE64FAC11_ai >= 0 && lv_i <= autoE64FAC11_ae) || (autoE64FAC11_ai < 0 && lv_i >= autoE64FAC11_ae) ) ; lv_i += autoE64FAC11_ai ) {
            DialogControlSetVisible(gv_profileCommonAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileCommonAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (auto2FAD9179_ai >= 0 && lv_i <= auto2FAD9179_ae) || (auto2FAD9179_ai < 0 && lv_i >= auto2FAD9179_ae) ) ; lv_i += auto2FAD9179_ai ) {
            DialogControlSetVisible(gv_profileHumanAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileHumanAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (autoC8243DE8_ai >= 0 && lv_i <= autoC8243DE8_ae) || (autoC8243DE8_ai < 0 && lv_i >= autoC8243DE8_ae) ) ; lv_i += autoC8243DE8_ai ) {
            DialogControlSetVisible(gv_profileVampireAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileVampireAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        if ((gv_currentPressedProfileButton[EventPlayer()] == 1)) {
            lv_stats = (StringExternal("Param/Value/AA0B371E") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "StructuresBuiltCount")) + ((StringExternal("Param/Value/2820ED47") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "UnitsKilledCount"))) + ((StringExternal("Param/Value/DF9F40A7") + IntToText(gv_feed[gv_profileofPlayer[EventPlayer()]])) + ((StringExternal("Param/Value/5CA9E46D") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "APM"))) + ((StringExternal("Param/Value/F4DD449A") + IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "TotalOverview"))) + StringToText("")))))));
            libNtve_gf_SetDialogItemText(gv_profileDialogText[1], (StringExternal("Param/Value/9C342292") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "MineralsCollected")) + (StringExternal("Param/Value/4242DF87") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "VespeneCollected")) + (StringExternal("Param/Value/00927099") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "MineralsCollectionRate")) + (StringExternal("Param/Value/D2F8D36E") + (StringExternal("Param/Value/FC3AC349") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "VespeneCollectionRate")) + (StringExternal("Param/Value/8F25FB4C") + (StringExternal("Param/Value/0149F5B2") + (IntToText(PlayerScoreValueGetAsInt(gv_profileofPlayer[EventPlayer()], "UnitsLostAll")) + lv_stats)))))))))))), PlayerGroupSingle(EventPlayer()));
            DialogControlSetVisible(gv_profileDialogText[1], PlayerGroupSingle(EventPlayer()), true);
        }

        if ((gv_currentPressedProfileButton[EventPlayer()] == 3)) {
            gf_ShowHideRewards(true, EventPlayer());
        }

    }
    else if (autoDC6484B6_val == gv_profileAchievementsButtons[1]) {
        gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[1]);
        gv_currentPressedProfileAchievementButton[EventPlayer()] = 1;
        lv_i = 1;
        for ( ; ( (autoA25D067F_ai >= 0 && lv_i <= autoA25D067F_ae) || (autoA25D067F_ai < 0 && lv_i >= autoA25D067F_ae) ) ; lv_i += autoA25D067F_ai ) {
            DialogControlSetVisible(gv_profileCommonAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_profileCommonAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        lv_i = 1;
        for ( ; ( (auto897A1E68_ai >= 0 && lv_i <= auto897A1E68_ae) || (auto897A1E68_ai < 0 && lv_i >= auto897A1E68_ae) ) ; lv_i += auto897A1E68_ai ) {
            DialogControlSetVisible(gv_profileHumanAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileHumanAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (auto949FB860_ai >= 0 && lv_i <= auto949FB860_ae) || (auto949FB860_ai < 0 && lv_i >= auto949FB860_ae) ) ; lv_i += auto949FB860_ai ) {
            DialogControlSetVisible(gv_profileVampireAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileVampireAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if (autoDC6484B6_val == gv_profileAchievementsButtons[2]) {
        gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[2]);
        gv_currentPressedProfileAchievementButton[EventPlayer()] = 2;
        lv_i = 0;
        for ( ; ( (autoB25E30E4_ai >= 0 && lv_i <= autoB25E30E4_ae) || (autoB25E30E4_ai < 0 && lv_i >= autoB25E30E4_ae) ) ; lv_i += autoB25E30E4_ai ) {
            DialogControlSetVisible(gv_profileAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        lv_i = 1;
        for ( ; ( (auto4CF7C294_ai >= 0 && lv_i <= auto4CF7C294_ae) || (auto4CF7C294_ai < 0 && lv_i >= auto4CF7C294_ae) ) ; lv_i += auto4CF7C294_ai ) {
            DialogControlSetVisible(gv_profileCommonAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileCommonAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (auto3C89616B_ai >= 0 && lv_i <= auto3C89616B_ae) || (auto3C89616B_ai < 0 && lv_i >= auto3C89616B_ae) ) ; lv_i += auto3C89616B_ai ) {
            DialogControlSetVisible(gv_profileHumanAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_profileHumanAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        lv_i = 1;
        for ( ; ( (auto500578D4_ai >= 0 && lv_i <= auto500578D4_ae) || (auto500578D4_ai < 0 && lv_i >= auto500578D4_ae) ) ; lv_i += auto500578D4_ai ) {
            DialogControlSetVisible(gv_profileVampireAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileVampireAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    else if (autoDC6484B6_val == gv_profileAchievementsButtons[3]) {
        gf_ShowandUpdateProgressBar(EventPlayer(), gv_profileofPlayer[EventPlayer()], gv_profileAchievementsButtons[3]);
        gv_currentPressedProfileAchievementButton[EventPlayer()] = 3;
        lv_i = 0;
        for ( ; ( (autoBE18D96C_ai >= 0 && lv_i <= autoBE18D96C_ae) || (autoBE18D96C_ai < 0 && lv_i >= autoBE18D96C_ae) ) ; lv_i += autoBE18D96C_ai ) {
            DialogControlSetVisible(gv_profileAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
        lv_i = 1;
        for ( ; ( (autoB16A901C_ai >= 0 && lv_i <= autoB16A901C_ae) || (autoB16A901C_ai < 0 && lv_i >= autoB16A901C_ae) ) ; lv_i += autoB16A901C_ai ) {
            DialogControlSetVisible(gv_profileCommonAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileCommonAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (auto3EEF54AF_ai >= 0 && lv_i <= auto3EEF54AF_ae) || (auto3EEF54AF_ai < 0 && lv_i >= auto3EEF54AF_ae) ) ; lv_i += auto3EEF54AF_ai ) {
            DialogControlSetVisible(gv_profileHumanAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_profileHumanAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), false);
        }
        lv_i = 1;
        for ( ; ( (auto728E3EC1_ai >= 0 && lv_i <= auto728E3EC1_ae) || (auto728E3EC1_ai < 0 && lv_i >= auto728E3EC1_ae) ) ; lv_i += auto728E3EC1_ai ) {
            DialogControlSetVisible(gv_profileVampireAchievementsButtons[lv_i], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_profileVampireAchievementsImage[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProfileAchievementsButtonsPressed_Init () {
    gt_ProfileAchievementsButtonsPressed = TriggerCreate("gt_ProfileAchievementsButtonsPressed_Func");
    TriggerEnable(gt_ProfileAchievementsButtonsPressed, false);
    TriggerAddEventDialogControl(gt_ProfileAchievementsButtonsPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Common Achievements Profile
//--------------------------------------------------------------------------------------------------
bool gt_InitCommonAchievementsProfile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_offsetX;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto9FC311D3_ae = 14;
    const int auto9FC311D3_ai = 1;
    const int auto550F2FF4_ae = gv_numberofCommonAchievements;
    const int auto550F2FF4_ai = 1;

    // Variable Initialization
    lv_offsetX = 30;
    lv_offsetY = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DCC82701"), lv_i, "D+ rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BFDDE5C9"), lv_i, "ui_wol_achievementicons_sheet2_27.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8FE6E0CA"), lv_i, "Assets\\Textures\\btn-ability-protoss-timebomb.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7A11E299"), lv_i, "ui_wol_achievementicons_sheet2_41.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7A211ED0"), lv_i, "ui_wol_achievementicons_sheet2_70.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/771666AD"), lv_i, "ui_wol_achievementicons_sheet2_62.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3FD4F826"), lv_i, "C- rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/41FE8445"), lv_i, "ui_wol_achievementicons_sheet2_28.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EDE1751F"), lv_i, "ui_wol_achievementicons_sheet2_71.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3D7E75AA"), lv_i, "ui_wol_achievementicons_sheet2_63.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0B51FB27"), lv_i, "C rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/816BAA92"), lv_i, "ui_wol_achievementicons_sheet2_29.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D3588081"), lv_i, "ui_wol_achievementicons_sheet2_72.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/6B730C09"), lv_i, "ui_wol_achievementicons_sheet2_64.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/61B5BB79"), lv_i, "C+ rank.dds", "Common");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/959F9D5D"), lv_i, "ui_wol_achievementicons_sheet2_30.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E94E52C9"), lv_i, "ui_wol_achievementicons_sheet2_73.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F46B78FF"), lv_i, "ui_wol_achievementicons_sheet2_65.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5785B68D"), lv_i, "B- rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/4588A40D"), lv_i, "ui_wol_achievementicons_sheet2_31.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F58EAF98"), lv_i, "ui_wol_achievementicons_sheet2_74.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/211AE6D9"), lv_i, "ui_wol_achievementicons_sheet2_66.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/64EF3891"), lv_i, "B rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/308D6C05"), lv_i, "ui_wol_achievementicons_sheet2_32.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E109AF66"), lv_i, "ui_wol_achievementicons_sheet2_76.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9A6C7088"), lv_i, "ui_wol_achievementicons_sheet2_67.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/6D840DE9"), lv_i, "B+ rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8FF62C1B"), lv_i, "ui_wol_achievementicons_sheet2_33.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/457ACEF1"), lv_i, "ui_wol_achievementicons_sheet2_77.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A0C47D02"), lv_i, "ui_wol_achievementicons_sheet2_68.dds", "Common");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/198BE9F0"), lv_i, "A- rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5E2DB7C8"), lv_i, "ui_wol_achievementicons_sheet2_34.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F4E989E2"), lv_i, "ui_wol_achievementicons_sheet2_69.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AF89F469"), lv_i, "A rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CA042A2A"), lv_i, "ui_wol_achievementicons_sheet2_35.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5D95AE9C"), lv_i, "ui_wol_achievementicons_sheet2_75.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9D834593"), lv_i, "A+ rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F74BF0AB"), lv_i, "A++ rank.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E903DE4E"), lv_i, "Common Achievements\\Reach 5 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/94110944"), lv_i, "Common Achievements\\Reach 10 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DA9FC305"), lv_i, "Common Achievements\\Reach 20 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0E961089"), lv_i, "Common Achievements\\Reach 30 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F8ABE102"), lv_i, "Common Achievements\\Reach 40 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/2A544A89"), lv_i, "Common Achievements\\Reach 50 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/23945053"), lv_i, "Common Achievements\\Reach 60 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3487D2E4"), lv_i, "Common Achievements\\Reach 70 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A0C8F14F"), lv_i, "Common Achievements\\Reach 80 level as Human.dds", "Common");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0BA2E090"), lv_i, "Common Achievements\\Reach 90 level as Human.dds", "Common");
    lv_i = 1;
    for ( ; ( (auto9FC311D3_ai >= 0 && lv_i <= auto9FC311D3_ae) || (auto9FC311D3_ai < 0 && lv_i >= auto9FC311D3_ae) ) ; lv_i += auto9FC311D3_ai ) {
        BankLoad("ProbesvZealot2", lv_i);
        lv_j = 1;
        for ( ; ( (auto550F2FF4_ai >= 0 && lv_j <= auto550F2FF4_ae) || (auto550F2FF4_ai < 0 && lv_j >= auto550F2FF4_ae) ) ; lv_j += auto550F2FF4_ai ) {
            gf_EnableDisableAchievement(lv_j, lv_i, false, "Common");
            if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsCommon, gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lv_j]) == true)) {
                gf_EnableDisableAchievement(lv_j, lv_i, true, "Common");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCommonAchievementsProfile_Init () {
    gt_InitCommonAchievementsProfile = TriggerCreate("gt_InitCommonAchievementsProfile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Human Achievements Profile
//--------------------------------------------------------------------------------------------------
bool gt_InitHumanAchievementsProfile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_offsetX;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto74B33593_ae = 14;
    const int auto74B33593_ai = 1;
    const int auto8E40D04A_ae = gv_numberofProbeAchievements;
    const int auto8E40D04A_ai = 1;

    // Variable Initialization
    lv_offsetX = 30;
    lv_offsetY = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/2A3A47DE"), lv_i, "D+ rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/86E8994E"), lv_i, "ui_wol_achievementicons_sheet2_27.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1590BDA8"), lv_i, "Assets\\Textures\\btn-ability-protoss-timebomb.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F9390CD5"), lv_i, "ui_wol_achievementicons_sheet2_41.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/573E0D9E"), lv_i, "ui_wol_achievementicons_sheet2_70.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C99AB6DC"), lv_i, "ui_wol_achievementicons_sheet2_62.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/474DD6A2"), lv_i, "C- rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EBF00852"), lv_i, "ui_wol_achievementicons_sheet2_28.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5E32D871"), lv_i, "ui_wol_achievementicons_sheet2_71.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/658EE951"), lv_i, "ui_wol_achievementicons_sheet2_63.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D155121E"), lv_i, "C rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/601BE269"), lv_i, "ui_wol_achievementicons_sheet2_29.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/580B30AD"), lv_i, "ui_wol_achievementicons_sheet2_72.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F8314DD9"), lv_i, "ui_wol_achievementicons_sheet2_64.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B64DA416"), lv_i, "C+ rank.dds", "Human");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/91360CCD"), lv_i, "ui_wol_achievementicons_sheet2_30.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BEF38E35"), lv_i, "ui_wol_achievementicons_sheet2_73.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/31C2ABCA"), lv_i, "ui_wol_achievementicons_sheet2_65.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B4E70DA7"), lv_i, "B- rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1F9EE9E7"), lv_i, "ui_wol_achievementicons_sheet2_31.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E7E72B08"), lv_i, "ui_wol_achievementicons_sheet2_74.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B1D9D941"), lv_i, "ui_wol_achievementicons_sheet2_66.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/22BD7464"), lv_i, "B rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/6E5DD85C"), lv_i, "ui_wol_achievementicons_sheet2_32.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C5C60AFD"), lv_i, "ui_wol_achievementicons_sheet2_76.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/045D924E"), lv_i, "ui_wol_achievementicons_sheet2_67.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C0F36F30"), lv_i, "B+ rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/04AFA7FF"), lv_i, "ui_wol_achievementicons_sheet2_33.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C2076249"), lv_i, "ui_wol_achievementicons_sheet2_77.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AB189EE0"), lv_i, "ui_wol_achievementicons_sheet2_68.dds", "Human");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3DA73AC4"), lv_i, "A- rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/59C99948"), lv_i, "ui_wol_achievementicons_sheet2_34.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D8600EA4"), lv_i, "ui_wol_achievementicons_sheet2_69.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F70CA926"), lv_i, "A rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/16D3A3AD"), lv_i, "ui_wol_achievementicons_sheet2_35.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E4EEAEEA"), lv_i, "ui_wol_achievementicons_sheet2_75.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/67FA88E8"), lv_i, "A+ rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AC227665"), lv_i, "A++ rank.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E56DE27C"), lv_i, "Common Achievements\\Reach 5 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8CB466A0"), lv_i, "Common Achievements\\Reach 10 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D60C7B32"), lv_i, "Common Achievements\\Reach 20 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A180C7B4"), lv_i, "Common Achievements\\Reach 30 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F36CACBF"), lv_i, "Common Achievements\\Reach 40 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E9A31B27"), lv_i, "Common Achievements\\Reach 50 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9B622004"), lv_i, "Common Achievements\\Reach 60 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5D119CEF"), lv_i, "Common Achievements\\Reach 70 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/99CF3D80"), lv_i, "Common Achievements\\Reach 80 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F4C4645F"), lv_i, "Common Achievements\\Reach 90 level as Human.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AD5BEB81"), lv_i, "Human Achievements\\Collect 100 minerals.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3CD24274"), lv_i, "Human Achievements\\Collect 1k minerals.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7BB2BE77"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet3_79.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/59923C78"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet3_80.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5F91406A"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet3_81.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/44D6AC30"), lv_i, "Assets\\Textures\\btn-building-terran-refinery.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/2D3969DD"), lv_i, "Human Achievements\\Advanced Refinery.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/300B273D"), lv_i, "Human Achievements\\Elite Refinery.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/2AC7B60E"), lv_i, "Human Achievements\\Gold Refinery.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/881BDFAB"), lv_i, "Assets\\Textures\\btn-research-terran-automatedrefinery.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8C2D360F"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_48.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5EBAA070"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_49.dds", "Human");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/900A1C13"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_50.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C270CA84"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_51.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5A58A0ED"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_52.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A3DE1033"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_53.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BD923816"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_54.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/969AC3E5"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_55.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7CA4754D"), lv_i, "Human Achievements\\ui_wol_achievementicons_sheet2_36.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/35228A76"), lv_i, "Assets\\Textures\\btn-unit-protoss-stonezealot.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9808C195"), lv_i, "Assets\\Textures\\btn-building-protoss-obelisk.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CE02CD47"), lv_i, "Assets\\Textures\\btn-building-terran-supplydepot.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3D90A813"), lv_i, "Assets\\Textures\\btn-building-terran-techreactor.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DD4826A2"), lv_i, "Assets\\Textures\\btn-building-protoss-pylon.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AE521F43"), lv_i, "Assets\\Textures\\btn-unit-terran-vikingassault.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A08B6782"), lv_i, "Assets\\Textures\\btn-unit-terran-taurenspacemarine.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0F3EE855"), lv_i, "Assets\\Textures\\btn-unit-protoss-immortal.dds", "Human");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9362AAF4"), lv_i, "Blue SCV.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/41B1EB8A"), lv_i, "Green SCV.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EEB326A5"), lv_i, "Gold SCV.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9919FEC5"), lv_i, "Assets\\Textures\\btn-building-protoss-nexus.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5ECE1DCF"), lv_i, "Blue Cybernetics Core.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/964DE9CD"), lv_i, "Green Cybernetics Core.dds", "Human");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/FEBBF7AE"), lv_i, "Gold Cybernetics Core.dds", "Human");
    lv_i = 1;
    for ( ; ( (auto74B33593_ai >= 0 && lv_i <= auto74B33593_ae) || (auto74B33593_ai < 0 && lv_i >= auto74B33593_ae) ) ; lv_i += auto74B33593_ai ) {
        BankLoad("ProbesvZealot2", lv_i);
        lv_j = 1;
        for ( ; ( (auto8E40D04A_ai >= 0 && lv_j <= auto8E40D04A_ae) || (auto8E40D04A_ai < 0 && lv_j >= auto8E40D04A_ae) ) ; lv_j += auto8E40D04A_ai ) {
            gf_EnableDisableAchievement(lv_j, lv_i, false, "Human");
            if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsHuman, gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lv_j]) == true)) {
                gf_EnableDisableAchievement(lv_j, lv_i, true, "Human");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitHumanAchievementsProfile_Init () {
    gt_InitHumanAchievementsProfile = TriggerCreate("gt_InitHumanAchievementsProfile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Vampire Achievements Profile
//--------------------------------------------------------------------------------------------------
bool gt_InitVampireAchievementsProfile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_offsetX;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto1A7716E2_ae = 14;
    const int auto1A7716E2_ai = 1;
    const int auto9B6B8045_ae = gv_numberofZealotAchievements;
    const int auto9B6B8045_ai = 1;

    // Variable Initialization
    lv_offsetX = 30;
    lv_offsetY = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E9145B64"), lv_i, "D+ rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C027A389"), lv_i, "ui_wol_achievementicons_sheet2_27.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3C01B29D"), lv_i, "Assets\\Textures\\btn-ability-protoss-timebomb.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/51B28D8B"), lv_i, "ui_wol_achievementicons_sheet2_41.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/FCFA3016"), lv_i, "ui_wol_achievementicons_sheet2_70.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F7D77646"), lv_i, "ui_wol_achievementicons_sheet2_62.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/2667CDF8"), lv_i, "C- rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BB128611"), lv_i, "ui_wol_achievementicons_sheet2_28.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9D161730"), lv_i, "ui_wol_achievementicons_sheet2_71.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/41CE5D47"), lv_i, "ui_wol_achievementicons_sheet2_63.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3AC81367"), lv_i, "C rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/82A53873"), lv_i, "ui_wol_achievementicons_sheet2_29.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B22B7F13"), lv_i, "ui_wol_achievementicons_sheet2_72.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1953B80C"), lv_i, "ui_wol_achievementicons_sheet2_64.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0F8FCBB6"), lv_i, "C+ rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/376B9694"), lv_i, "ui_wol_achievementicons_sheet2_30.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7E1D2BBD"), lv_i, "ui_wol_achievementicons_sheet2_73.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/52F08B63"), lv_i, "ui_wol_achievementicons_sheet2_65.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C8E9BBFB"), lv_i, "B- rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/626C6A6F"), lv_i, "ui_wol_achievementicons_sheet2_31.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/9DEDE443"), lv_i, "ui_wol_achievementicons_sheet2_74.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7CBAB586"), lv_i, "ui_wol_achievementicons_sheet2_66.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0CEE4FB4"), lv_i, "B rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C5EAD1CE"), lv_i, "ui_wol_achievementicons_sheet2_32.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/29997354"), lv_i, "ui_wol_achievementicons_sheet2_76.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A95620A2"), lv_i, "ui_wol_achievementicons_sheet2_67.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EE5F8C89"), lv_i, "B+ rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/AF13CCFB"), lv_i, "ui_wol_achievementicons_sheet2_33.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/239261BA"), lv_i, "ui_wol_achievementicons_sheet2_77.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5C6F1B2B"), lv_i, "ui_wol_achievementicons_sheet2_68.dds", "Vampire");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/61348450"), lv_i, "A- rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/94682754"), lv_i, "ui_wol_achievementicons_sheet2_34.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/49EE7F5C"), lv_i, "ui_wol_achievementicons_sheet2_69.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C31F04EA"), lv_i, "A rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/74BBC9C3"), lv_i, "ui_wol_achievementicons_sheet2_35.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E4BAB696"), lv_i, "ui_wol_achievementicons_sheet2_75.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C83E4D8B"), lv_i, "A+ rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DCC398C4"), lv_i, "A++ rank.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CF8424FF"), lv_i, "Common Achievements\\Reach 5 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1A939908"), lv_i, "Common Achievements\\Reach 10 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/65734483"), lv_i, "Common Achievements\\Reach 20 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7D855E7A"), lv_i, "Common Achievements\\Reach 30 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5FA7ECC1"), lv_i, "Common Achievements\\Reach 40 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0D2560A8"), lv_i, "Common Achievements\\Reach 50 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BF3768CC"), lv_i, "Common Achievements\\Reach 60 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D0A0D650"), lv_i, "Common Achievements\\Reach 70 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EBBAD1FA"), lv_i, "Common Achievements\\Reach 80 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B8C06552"), lv_i, "Common Achievements\\Reach 90 level as Human.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DF07D8FB"), lv_i, "Vampire Achievements\\Kill Builder.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F077C0BC"), lv_i, "Vampire Achievements\\Kill 10 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5B1259AB"), lv_i, "Vampire Achievements\\Kill 25 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/163C0652"), lv_i, "Vampire Achievements\\Kill 50 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C62CF6D4"), lv_i, "Vampire Achievements\\Kill 100 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/ADFEDE76"), lv_i, "Vampire Achievements\\Kill 250 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8430332E"), lv_i, "Vampire Achievements\\Kill 500 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/ACC64094"), lv_i, "Vampire Achievements\\Kill 750 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/0D043D00"), lv_i, "Vampire Achievements\\Kill 1000 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/F679F116"), lv_i, "Vampire Achievements\\Kill 2500 Builders.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/7408AC4E"), lv_i, "Vampire Achievements\\Kill 3 Humans in game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CF528F5F"), lv_i, "Vampire Achievements\\Kill 5 Humans in game.dds", "Vampire");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B40E253F"), lv_i, "Vampire Achievements\\Kill 7 Humans in game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/FD0A13C6"), lv_i, "Vampire Achievements\\Kill 10 Humans in game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C783C2F0"), lv_i, "Vampire Achievements\\Spend 100 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/122D855A"), lv_i, "Vampire Achievements\\Spend 250 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/01104EA6"), lv_i, "Vampire Achievements\\Spend 500 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1986840C"), lv_i, "Vampire Achievements\\Spend 1000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/FA092E17"), lv_i, "Vampire Achievements\\Spend 2000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/22A8EC47"), lv_i, "Vampire Achievements\\Spend 4000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/E3A45AEB"), lv_i, "Vampire Achievements\\Spend 8000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/207685B6"), lv_i, "Vampire Achievements\\Spend 16000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/438667B7"), lv_i, "Vampire Achievements\\Spend 32000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/99879D52"), lv_i, "Vampire Achievements\\Spend 64000 vespene per game.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/6FD60D53"), lv_i, "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/308060A4"), lv_i, "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/920C702E"), lv_i, "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel3.dds", "Vampire");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/69CDF008"), lv_i, "Assets\\Textures\\btn-ability-terran-chronorift.dds", "Vampire");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileAchievement(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B652B2B8"), lv_i, "Assets\\Textures\\btn-ability-terran-stimpack-color.dds", "Vampire");
    lv_i = 1;
    for ( ; ( (auto1A7716E2_ai >= 0 && lv_i <= auto1A7716E2_ae) || (auto1A7716E2_ai < 0 && lv_i >= auto1A7716E2_ae) ) ; lv_i += auto1A7716E2_ai ) {
        BankLoad("ProbesvZealot2", lv_i);
        lv_j = 1;
        for ( ; ( (auto9B6B8045_ai >= 0 && lv_j <= auto9B6B8045_ae) || (auto9B6B8045_ai < 0 && lv_j >= auto9B6B8045_ae) ) ; lv_j += auto9B6B8045_ai ) {
            gf_EnableDisableAchievement(lv_j, lv_i, false, "Vampire");
            if ((BankValueGetAsFlag(BankLastCreated(), gv_banksSections.lv_achievmentsVampire, gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lv_j]) == true)) {
                gf_EnableDisableAchievement(lv_j, lv_i, true, "Vampire");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitVampireAchievementsProfile_Init () {
    gt_InitVampireAchievementsProfile = TriggerCreate("gt_InitVampireAchievementsProfile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Common Achievements Library
//--------------------------------------------------------------------------------------------------
bool gt_InitCommonAchievementsLibrary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_achievementID;
    int lv_points;
    string lv_tempImage;
    string lv_achievementString;

    // Automatic Variable Declarations
    const int auto880E86F4_ae = gv_numberofCommonAchievements;
    const int auto880E86F4_ai = 1;

    // Variable Initialization
    lv_achievementString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto880E86F4_ai >= 0 && lv_i <= auto880E86F4_ae) || (auto880E86F4_ai < 0 && lv_i >= auto880E86F4_ae) ) ; lv_i += auto880E86F4_ai ) {
        gv_banksStats.lv_achievementsCommon.lv_achievementEarned[lv_i] = IntToString(lv_i);
    }
    lv_achievementID = 1;
    lv_points = 10;
    lv_tempImage = "D+ rank.dds";
    lv_achievementString = "Reach D+ rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_27.dds";
    lv_achievementString = "Win 10 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-ability-protoss-timebomb.dds";
    lv_achievementString = "Win for 10 minutes in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_41.dds";
    lv_achievementString = "Win 30-minutes game in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_70.dds";
    lv_achievementString = "Reach winning streak of 3 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_62.dds";
    lv_achievementString = "Play 10 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "C- rank.dds";
    lv_achievementString = "Reach C- rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_28.dds";
    lv_achievementString = "Win 25 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_71.dds";
    lv_achievementString = "Reach winning streak of 5 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_63.dds";
    lv_achievementString = "Play 25 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "C rank.dds";
    lv_achievementString = "Reach C rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_29.dds";
    lv_achievementString = "Win 50 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_72.dds";
    lv_achievementString = "Reach winning streak of 10 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_64.dds";
    lv_achievementString = "Play 50 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "C+ rank.dds";
    lv_achievementString = "Reach C+ rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_30.dds";
    lv_achievementString = "Win 100 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_73.dds";
    lv_achievementString = "Reach winning streak of 15 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_65.dds";
    lv_achievementString = "Play 100 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "B- rank.dds";
    lv_achievementString = "Reach B- rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_31.dds";
    lv_achievementString = "Win 250 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_74.dds";
    lv_achievementString = "Reach winning streak of 20 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_66.dds";
    lv_achievementString = "Play 250 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "B rank.dds";
    lv_achievementString = "Reach B rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_32.dds";
    lv_achievementString = "Win 500 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_76.dds";
    lv_achievementString = "Reach winning streak of 25 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_67.dds";
    lv_achievementString = "Play 500 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "B+ rank.dds";
    lv_achievementString = "Reach B+ rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_33.dds";
    lv_achievementString = "Win 750 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_77.dds";
    lv_achievementString = "Reach winning streak of 30 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_68.dds";
    lv_achievementString = "Play 750 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "A- rank.dds";
    lv_achievementString = "Reach A- rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_34.dds";
    lv_achievementString = "Win 1000 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_69.dds";
    lv_achievementString = "Play 1000 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "A rank.dds";
    lv_achievementString = "Reach A rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_35.dds";
    lv_achievementString = "Win 2500 games in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_75.dds";
    lv_achievementString = "Play 2500 hours in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "A+ rank.dds";
    lv_achievementString = "Reach A+ rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_tempImage = "A++ rank.dds";
    lv_achievementString = "Reach A++ rank in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Common Achievements\\Reach 5 level as Human.dds";
    lv_achievementString = "Reach 5 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Common Achievements\\Reach 10 level as Human.dds";
    lv_achievementString = "Reach 10 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Common Achievements\\Reach 20 level as Human.dds";
    lv_achievementString = "Reach 20 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Common Achievements\\Reach 30 level as Human.dds";
    lv_achievementString = "Reach 30 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Common Achievements\\Reach 40 level as Human.dds";
    lv_achievementString = "Reach 40 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "Common Achievements\\Reach 50 level as Human.dds";
    lv_achievementString = "Reach 50 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "Common Achievements\\Reach 60 level as Human.dds";
    lv_achievementString = "Reach 60 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "Common Achievements\\Reach 70 level as Human.dds";
    lv_achievementString = "Reach 70 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "Common Achievements\\Reach 80 level as Human.dds";
    lv_achievementString = "Reach 80 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "Common Achievements\\Reach 90 level as Human.dds";
    lv_achievementString = "Reach 90 level in PvZ 2.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitCommonAchievementsLibrary_Init () {
    gt_InitCommonAchievementsLibrary = TriggerCreate("gt_InitCommonAchievementsLibrary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Probe Achievements Library
//--------------------------------------------------------------------------------------------------
bool gt_InitProbeAchievementsLibrary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_achievementID;
    int lv_points;
    string lv_tempImage;
    string lv_achievementString;

    // Automatic Variable Declarations
    const int auto8395B86E_ae = gv_numberofProbeAchievements;
    const int auto8395B86E_ai = 1;

    // Variable Initialization
    lv_achievementString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto8395B86E_ai >= 0 && lv_i <= auto8395B86E_ae) || (auto8395B86E_ai < 0 && lv_i >= auto8395B86E_ae) ) ; lv_i += auto8395B86E_ai ) {
        gv_banksStats.lv_achievementsHuman.lv_achievementEarned[lv_i] = IntToString(lv_i);
    }
    lv_achievementID = 1;
    lv_points = 10;
    lv_tempImage = "D+ rank.dds";
    lv_achievementString = "Reach D+ rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_27.dds";
    lv_achievementString = "Win 10 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-ability-protoss-timebomb.dds";
    lv_achievementString = "Win for 10 minutes as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_41.dds";
    lv_achievementString = "Win 30-minutes game as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_70.dds";
    lv_achievementString = "Reach winning streak of 3 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_62.dds";
    lv_achievementString = "Play 10 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "C- rank.dds";
    lv_achievementString = "Reach C- rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_28.dds";
    lv_achievementString = "Win 25 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_71.dds";
    lv_achievementString = "Reach winning streak of 5 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_63.dds";
    lv_achievementString = "Play 25 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "C rank.dds";
    lv_achievementString = "Reach C rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_29.dds";
    lv_achievementString = "Win 50 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_72.dds";
    lv_achievementString = "Reach winning streak of 10 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_64.dds";
    lv_achievementString = "Play 50 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "C+ rank.dds";
    lv_achievementString = "Reach C+ rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_30.dds";
    lv_achievementString = "Win 100 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_73.dds";
    lv_achievementString = "Reach winning streak of 15 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_65.dds";
    lv_achievementString = "Play 100 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "B- rank.dds";
    lv_achievementString = "Reach B- rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_31.dds";
    lv_achievementString = "Win 250 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_74.dds";
    lv_achievementString = "Reach winning streak of 20 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_66.dds";
    lv_achievementString = "Play 250 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "B rank.dds";
    lv_achievementString = "Reach B rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_32.dds";
    lv_achievementString = "Win 500 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_76.dds";
    lv_achievementString = "Reach winning streak of 25 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_67.dds";
    lv_achievementString = "Play 500 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "B+ rank.dds";
    lv_achievementString = "Reach B+ rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_33.dds";
    lv_achievementString = "Win 750 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_77.dds";
    lv_achievementString = "Reach winning streak of 30 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_68.dds";
    lv_achievementString = "Play 750 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "A- rank.dds";
    lv_achievementString = "Reach A- rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_34.dds";
    lv_achievementString = "Win 1000 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_69.dds";
    lv_achievementString = "Play 1000 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "A rank.dds";
    lv_achievementString = "Reach A rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_35.dds";
    lv_achievementString = "Win 2500 games as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_75.dds";
    lv_achievementString = "Play 2500 hours as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "A+ rank.dds";
    lv_achievementString = "Reach A+ rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_tempImage = "A++ rank.dds";
    lv_achievementString = "Reach A++ rank as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Common Achievements\\Reach 5 level as Human.dds";
    lv_achievementString = "Reach 5 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Common Achievements\\Reach 10 level as Human.dds";
    lv_achievementString = "Reach 10 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Common Achievements\\Reach 20 level as Human.dds";
    lv_achievementString = "Reach 20 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Common Achievements\\Reach 30 level as Human.dds";
    lv_achievementString = "Reach 30 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Common Achievements\\Reach 40 level as Human.dds";
    lv_achievementString = "Reach 40 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "Common Achievements\\Reach 50 level as Human.dds";
    lv_achievementString = "Reach 50 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "Common Achievements\\Reach 60 level as Human.dds";
    lv_achievementString = "Reach 60 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "Common Achievements\\Reach 70 level as Human.dds";
    lv_achievementString = "Reach 70 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "Common Achievements\\Reach 80 level as Human.dds";
    lv_achievementString = "Reach 80 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "Common Achievements\\Reach 90 level as Human.dds";
    lv_achievementString = "Reach 90 level as Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Human Achievements\\Collect 100 minerals.dds";
    lv_achievementString = "Collect 100 minerals.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Human Achievements\\Collect 1k minerals.dds";
    lv_achievementString = "Collect 1k minerals.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet3_79.dds";
    lv_achievementString = "Collect 10k minerals.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet3_80.dds";
    lv_achievementString = "Collect 100k minerals.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet3_81.dds";
    lv_achievementString = "Collect 1 mln minerals.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Assets\\Textures\\btn-building-terran-refinery.dds";
    lv_achievementString = "Collect 100 vespene.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Human Achievements\\Advanced Refinery.dds";
    lv_achievementString = "Collect 1k vespene.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Human Achievements\\Elite Refinery.dds";
    lv_achievementString = "Collect 10k vespene.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Human Achievements\\Gold Refinery.dds";
    lv_achievementString = "Collect 100k vespene.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Assets\\Textures\\btn-research-terran-automatedrefinery.dds";
    lv_achievementString = "Collect 1 mln vespene.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_48.dds";
    lv_achievementString = "Kill Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_49.dds";
    lv_achievementString = "Kill 10 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_50.dds";
    lv_achievementString = "Kill 25 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_51.dds";
    lv_achievementString = "Kill 50 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_52.dds";
    lv_achievementString = "Kill 100 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_53.dds";
    lv_achievementString = "Kill 250 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_54.dds";
    lv_achievementString = "Kill 500 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_55.dds";
    lv_achievementString = "Kill 750 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "Human Achievements\\ui_wol_achievementicons_sheet2_36.dds";
    lv_achievementString = "Kill 1000 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "Assets\\Textures\\btn-unit-protoss-stonezealot.dds";
    lv_achievementString = "Kill 2500 Zealots.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Assets\\Textures\\btn-building-protoss-obelisk.dds";
    lv_achievementString = "Build a Ultra Wall.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Assets\\Textures\\btn-building-terran-supplydepot.dds";
    lv_achievementString = "Build a Mega Wall.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Assets\\Textures\\btn-building-terran-techreactor.dds";
    lv_achievementString = "Build a Power Wall.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Assets\\Textures\\btn-building-protoss-pylon.dds";
    lv_achievementString = "Build a Final Wall.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Assets\\Textures\\btn-unit-terran-vikingassault.dds";
    lv_achievementString = "Build a Turret Level 7.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Assets\\Textures\\btn-unit-terran-taurenspacemarine.dds";
    lv_achievementString = "Build a Turret Level 11.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Assets\\Textures\\btn-unit-protoss-immortal.dds";
    lv_achievementString = "Build a Turret Level 13.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Blue SCV.dds";
    lv_achievementString = "Train a Ultra Miner.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Green SCV.dds";
    lv_achievementString = "Train a Legendary Miner.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Gold SCV.dds";
    lv_achievementString = "Train a Perfect Miner.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Assets\\Textures\\btn-building-protoss-nexus.dds";
    lv_achievementString = "Build a Generator Max.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Blue Cybernetics Core.dds";
    lv_achievementString = "Build a Automated Mine Level 6.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Green Cybernetics Core.dds";
    lv_achievementString = "Build a Automated Mine Level 7.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Gold Cybernetics Core.dds";
    lv_achievementString = "Build a Automated Mine Level 8.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitProbeAchievementsLibrary_Init () {
    gt_InitProbeAchievementsLibrary = TriggerCreate("gt_InitProbeAchievementsLibrary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Zealot Achievements Library
//--------------------------------------------------------------------------------------------------
bool gt_InitZealotAchievementsLibrary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_achievementID;
    int lv_points;
    string lv_tempImage;
    string lv_achievementString;

    // Automatic Variable Declarations
    const int autoCA4B4365_ae = gv_numberofZealotAchievements;
    const int autoCA4B4365_ai = 1;

    // Variable Initialization
    lv_achievementString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCA4B4365_ai >= 0 && lv_i <= autoCA4B4365_ae) || (autoCA4B4365_ai < 0 && lv_i >= autoCA4B4365_ae) ) ; lv_i += autoCA4B4365_ai ) {
        gv_banksStats.lv_achievementsVampire.lv_achievementEarned[lv_i] = IntToString(lv_i);
    }
    lv_achievementID = 1;
    lv_points = 10;
    lv_tempImage = "D+ rank.dds";
    lv_achievementString = "Reach D+ rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_27.dds";
    lv_achievementString = "Win 10 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-ability-protoss-timebomb.dds";
    lv_achievementString = "Win for 10 minutes as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_41.dds";
    lv_achievementString = "Win 30-minutes game as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_70.dds";
    lv_achievementString = "Reach winning streak of 3 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_62.dds";
    lv_achievementString = "Play 10 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "C- rank.dds";
    lv_achievementString = "Reach C- rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_28.dds";
    lv_achievementString = "Win 25 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_71.dds";
    lv_achievementString = "Reach winning streak of 5 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_63.dds";
    lv_achievementString = "Play 25 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "C rank.dds";
    lv_achievementString = "Reach C rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_29.dds";
    lv_achievementString = "Win 50 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_72.dds";
    lv_achievementString = "Reach winning streak of 10 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_64.dds";
    lv_achievementString = "Play 50 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "C+ rank.dds";
    lv_achievementString = "Reach C+ rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_30.dds";
    lv_achievementString = "Win 100 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_73.dds";
    lv_achievementString = "Reach winning streak of 15 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_65.dds";
    lv_achievementString = "Play 100 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "B- rank.dds";
    lv_achievementString = "Reach B- rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_31.dds";
    lv_achievementString = "Win 250 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_74.dds";
    lv_achievementString = "Reach winning streak of 20 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_66.dds";
    lv_achievementString = "Play 250 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "B rank.dds";
    lv_achievementString = "Reach B rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_32.dds";
    lv_achievementString = "Win 500 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_76.dds";
    lv_achievementString = "Reach winning streak of 25 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_67.dds";
    lv_achievementString = "Play 500 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "B+ rank.dds";
    lv_achievementString = "Reach B+ rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_33.dds";
    lv_achievementString = "Win 750 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_77.dds";
    lv_achievementString = "Reach winning streak of 30 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_68.dds";
    lv_achievementString = "Play 750 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "A- rank.dds";
    lv_achievementString = "Reach A- rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_34.dds";
    lv_achievementString = "Win 1000 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_69.dds";
    lv_achievementString = "Play 1000 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "A rank.dds";
    lv_achievementString = "Reach A rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_35.dds";
    lv_achievementString = "Win 2500 games as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "ui_wol_achievementicons_sheet2_75.dds";
    lv_achievementString = "Play 2500 hours as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "A+ rank.dds";
    lv_achievementString = "Reach A+ rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "A++ rank.dds";
    lv_achievementString = "Reach A++ rank as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Common Achievements\\Reach 5 level as Human.dds";
    lv_achievementString = "Reach 5 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 20;
    lv_tempImage = "Common Achievements\\Reach 10 level as Human.dds";
    lv_achievementString = "Reach 10 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 30;
    lv_tempImage = "Common Achievements\\Reach 20 level as Human.dds";
    lv_achievementString = "Reach 20 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 40;
    lv_tempImage = "Common Achievements\\Reach 30 level as Human.dds";
    lv_achievementString = "Reach 30 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 50;
    lv_tempImage = "Common Achievements\\Reach 40 level as Human.dds";
    lv_achievementString = "Reach 40 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 60;
    lv_tempImage = "Common Achievements\\Reach 50 level as Human.dds";
    lv_achievementString = "Reach 50 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 70;
    lv_tempImage = "Common Achievements\\Reach 60 level as Human.dds";
    lv_achievementString = "Reach 60 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 80;
    lv_tempImage = "Common Achievements\\Reach 70 level as Human.dds";
    lv_achievementString = "Reach 70 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 90;
    lv_tempImage = "Common Achievements\\Reach 80 level as Human.dds";
    lv_achievementString = "Reach 80 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 99;
    lv_tempImage = "Common Achievements\\Reach 90 level as Human.dds";
    lv_achievementString = "Reach 90 level as Zealot.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Vampire Achievements\\Kill Builder.dds";
    lv_achievementString = "Kill Probe.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 10 Builders.dds";
    lv_achievementString = "Kill 10 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 25 Builders.dds";
    lv_achievementString = "Kill 25 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 50 Builders.dds";
    lv_achievementString = "Kill 50 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 100 Builders.dds";
    lv_achievementString = "Kill 100 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 250 Builders.dds";
    lv_achievementString = "Kill 250 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 500 Builders.dds";
    lv_achievementString = "Kill 500 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 750 Builders.dds";
    lv_achievementString = "Kill 750 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 1000 Builders.dds";
    lv_achievementString = "Kill 1000 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 9;
    lv_tempImage = "Vampire Achievements\\Kill 2500 Builders.dds";
    lv_achievementString = "Kill 2500 Probes.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Vampire Achievements\\Kill 3 Humans in game.dds";
    lv_achievementString = "Kill 3 Probes in game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 5 Humans in game.dds";
    lv_achievementString = "Kill 5 Probes in game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 7 Humans in game.dds";
    lv_achievementString = "Kill 7 Probes in game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Kill 10 Humans in game.dds";
    lv_achievementString = "Kill 10 Probes in game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Vampire Achievements\\Spend 100 vespene per game.dds";
    lv_achievementString = "Spend 100 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 250 vespene per game.dds";
    lv_achievementString = "Spend 250 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 500 vespene per game.dds";
    lv_achievementString = "Spend 500 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 1000 vespene per game.dds";
    lv_achievementString = "Spend 1000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 2000 vespene per game.dds";
    lv_achievementString = "Spend 2000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 4000 vespene per game.dds";
    lv_achievementString = "Spend 4000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 8000 vespene per game.dds";
    lv_achievementString = "Spend 8000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 16000 vespene per game.dds";
    lv_achievementString = "Spend 16000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 10;
    lv_tempImage = "Vampire Achievements\\Spend 32000 vespene per game.dds";
    lv_achievementString = "Spend 32000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points += 9;
    lv_tempImage = "Vampire Achievements\\Spend 64000 vespene per game.dds";
    lv_achievementString = "Spend 64000 minerals per game.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_points = 10;
    lv_tempImage = "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds";
    lv_achievementString = "Purchase Ultimate Blade.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds";
    lv_achievementString = "Purchase Super Gloves.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel3.dds";
    lv_achievementString = "Purchase Nanocrystalline Diamond Armor.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-ability-terran-chronorift.dds";
    lv_achievementString = "Purchase Diamond Amulet.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    lv_achievementID += 1;
    lv_tempImage = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
    lv_achievementString = "Purchase Ultimate Regeneration Potion.";
    gf_CreateAchievement(lv_achievementID, lv_tempImage, lv_points, lv_achievementString, lv_achievementString, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitZealotAchievementsLibrary_Init () {
    gt_InitZealotAchievementsLibrary = TriggerCreate("gt_InitZealotAchievementsLibrary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Spend Resources Achievements
//--------------------------------------------------------------------------------------------------
bool gt_CheckSpendResourcesAchievements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_achievementID;

    // Automatic Variable Declarations
    playergroup auto435972DB_g;
    int auto435972DB_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto435972DB_g = PlayerGroupActive();
    auto435972DB_var = -1;
    while (true) {
        auto435972DB_var = PlayerGroupNextPlayer(auto435972DB_g, auto435972DB_var);
        if (auto435972DB_var < 0) { break; }
        if ((UnitIsAlive(gv_zealots[auto435972DB_var]) == true)) {
            lv_achievementID = 63;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 100)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 250)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 500)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 1000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 2000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 4000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 8000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 16000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 32000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

            lv_achievementID += 1;
            if ((PlayerScoreValueGetAsInt(auto435972DB_var, "MineralsSpent") >= 64000)) {
                gf_CheckStatusofAchievement(lv_achievementID, auto435972DB_var, "Vampire");
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckSpendResourcesAchievements_Init () {
    gt_CheckSpendResourcesAchievements = TriggerCreate("gt_CheckSpendResourcesAchievements_Func");
    TriggerEnable(gt_CheckSpendResourcesAchievements, false);
    TriggerAddEventTimePeriodic(gt_CheckSpendResourcesAchievements, 25.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Vampire Achievements
//--------------------------------------------------------------------------------------------------
bool gt_CheckVampireAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_VampireAchievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckVampireAchievements_Init () {
    gt_CheckVampireAchievements = TriggerCreate("gt_CheckVampireAchievements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Human Achievements
//--------------------------------------------------------------------------------------------------
bool gt_CheckHumanAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_HumanAchievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckHumanAchievements_Init () {
    gt_CheckHumanAchievements = TriggerCreate("gt_CheckHumanAchievements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Common Achievements
//--------------------------------------------------------------------------------------------------
bool gt_CheckCommonAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CommonAchievements();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckCommonAchievements_Init () {
    gt_CheckCommonAchievements = TriggerCreate("gt_CheckCommonAchievements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Achievements
//--------------------------------------------------------------------------------------------------
bool gt_CheckAchievements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_CheckCommonAchievements, true, false);
    TriggerExecute(gt_CheckHumanAchievements, true, false);
    TriggerExecute(gt_CheckVampireAchievements, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckAchievements_Init () {
    gt_CheckAchievements = TriggerCreate("gt_CheckAchievements_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Write Hours and resources Achievements
//--------------------------------------------------------------------------------------------------
bool gt_WriteHoursandresourcesAchievements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_achievementID;

    // Automatic Variable Declarations
    playergroup auto7BD4158F_g;
    int auto7BD4158F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BD4158F_g = PlayerGroupActive();
    auto7BD4158F_var = -1;
    while (true) {
        auto7BD4158F_var = PlayerGroupNextPlayer(auto7BD4158F_g, auto7BD4158F_var);
        if (auto7BD4158F_var < 0) { break; }
        BankValueSetFromInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_hours, (BankValueGetAsInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_hours) + 1));
        if ((UnitIsAlive(gv_probes[auto7BD4158F_var]) == true)) {
            BankValueSetFromInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_hours, (BankValueGetAsInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_hours) + 1));
        }

        if ((UnitIsAlive(gv_zealots[auto7BD4158F_var]) == true)) {
            BankValueSetFromInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_hours, (BankValueGetAsInt(gv_banks[auto7BD4158F_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_hours) + 1));
        }

        BankSave(gv_banks[auto7BD4158F_var]);
        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "MineralsCollected") >= 100)) {
            gf_CheckStatusofAchievement(49, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "MineralsCollected") >= 1000)) {
            gf_CheckStatusofAchievement(50, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "MineralsCollected") >= 10000)) {
            gf_CheckStatusofAchievement(51, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "MineralsCollected") >= 100000)) {
            gf_CheckStatusofAchievement(52, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "MineralsCollected") >= 1000000)) {
            gf_CheckStatusofAchievement(53, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "VespeneCollected") >= 100)) {
            gf_CheckStatusofAchievement(54, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "VespeneCollected") >= 1000)) {
            gf_CheckStatusofAchievement(55, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "VespeneCollected") >= 10000)) {
            gf_CheckStatusofAchievement(56, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "VespeneCollected") >= 100000)) {
            gf_CheckStatusofAchievement(57, auto7BD4158F_var, "Human");
        }

        if ((PlayerScoreValueGetAsInt(auto7BD4158F_var, "VespeneCollected") >= 1000000)) {
            gf_CheckStatusofAchievement(58, auto7BD4158F_var, "Human");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WriteHoursandresourcesAchievements_Init () {
    gt_WriteHoursandresourcesAchievements = TriggerCreate("gt_WriteHoursandresourcesAchievements_Func");
    TriggerEnable(gt_WriteHoursandresourcesAchievements, false);
    TriggerAddEventTimePeriodic(gt_WriteHoursandresourcesAchievements, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Rewards Library
//--------------------------------------------------------------------------------------------------
bool gt_InitRewardsLibrary_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_rewardID;

    // Automatic Variable Declarations
    const int autoCA086473_ae = gv_numberofRewards;
    const int autoCA086473_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCA086473_ai >= 0 && lv_i <= autoCA086473_ae) || (autoCA086473_ai < 0 && lv_i >= autoCA086473_ae) ) ; lv_i += autoCA086473_ai ) {
        gv_banksStats.lv_rewards.lv_rewardsUnlocked[lv_i] = IntToString(lv_i);
    }
        lv_rewardID = 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-scvfusionwelder.dds", 0, "Fusion Welder Skin", "Fusion Welder Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Miner Skin.dds", 0, "Miner Skin", "Miner Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Automaton 2000 Skin.dds", 0, "Automaton 2000 Skin", "Automaton 2000 Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-protoss-probe-dark.dds", 0, "Dark Probe Skin", "Dark Probe Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-marauderswann.dds", 0, "Mechanic Skin", "Mechanic Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-medicstetmann.dds", 0, "Scientist Skin", "Scientist Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-mule.dds", 0, "MULE Skin", "MULE Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-medic.dds", 0, "Medic Skin", "Medic Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-protoss-sentry.dds", 0, "Sentry Skin", "Sentry Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Prisoner Skin.dds", 0, "Prisoner Skin", "Prisoner Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds", 0, "Devil Dog Skin", "Devil Dog Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-baneling.dds", 0, "Baneling Skin", "Baneling Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-hellion.dds", 0, "Hellion Skin", "Hellion Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-computerterminals.dds", 0, "Big Scale of Probe", "Big Scale of Probe", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-missioncase.dds", 0, "Set Color of Probe", "Set Color of Probe", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-hotkeys.dds", 0, "Set Name of Probe", "Set Name of Probe", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-hacking.dds", 0, "Init AI Economic Build", "Init AI Economic Build", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds", 0, "Infested Marine Skin", "Infested Marine Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-infestedcolonist.dds", 0, "Infested Colonist Skin", "Infested Colonist Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-kerrigan.dds", 0, "Kerrigan Skin", "Kerrigan Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-roach.dds", 0, "Roach Skin", "Roach Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-queen.dds", 0, "Queen Skin", "Queen Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-brutalisk.dds", 0, "Brutalisk Skin", "Brutalisk Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-hydralisk.dds", 0, "Hydralisk Skin", "Hydralisk Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-terran-predator.dds", 0, "Predator Skin", "Predator Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-protoss-zealot-dark.dds", 0, "Dark Zealot Skin", "Dark Zealot Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-protoss-darktemplar.dds", 0, "Dark Templar Skin", "Dark Templar Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Hybrid Skin.dds", 0, "Hybrid Skin", "Hybrid Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-protoss-zealot.dds", 0, "Standard Zealot Skin", "Standard Zealot Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-unit-zerg-aberration.dds", 0, "Aberration Skin", "Aberration Skin", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-missioncase.dds", 0, "Set Color of Zealot", "Set Color of Zealot", 3);
        lv_rewardID += 1;
        gf_CreateAchievement(lv_rewardID, "Assets\\Textures\\btn-tips-hotkeys.dds", 0, "Set Name of Zealot", "Set Name of Zealot", 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitRewardsLibrary_Init () {
    gt_InitRewardsLibrary = TriggerCreate("gt_InitRewardsLibrary_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Rewards Profile
//--------------------------------------------------------------------------------------------------
bool gt_InitRewardsProfile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_offsetX;
    int lv_offsetY;

    // Automatic Variable Declarations
    const int auto008C32BA_ae = 14;
    const int auto008C32BA_ai = 1;
    const int auto7DF90647_ae = gv_numberofRewards;
    const int auto7DF90647_ai = 1;

    // Variable Initialization
    lv_offsetX = 30;
    lv_offsetY = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/C2A9C74D"), lv_i, "Assets\\Textures\\btn-unit-terran-scvfusionwelder.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/31CF35C2"), lv_i, "Miner Skin.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/843F4A8B"), lv_i, "Automaton 2000 Skin.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/DAB73360"), lv_i, "Assets\\Textures\\btn-unit-protoss-probe-dark.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/87A7C70C"), lv_i, "Assets\\Textures\\btn-unit-terran-marauderswann.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/84CAFF31"), lv_i, "Assets\\Textures\\btn-unit-terran-medicstetmann.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/3ACD5D97"), lv_i, "Assets\\Textures\\btn-unit-terran-mule.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/B93AE7F8"), lv_i, "Assets\\Textures\\btn-unit-terran-medic.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/6FA7EDAA"), lv_i, "Assets\\Textures\\btn-unit-protoss-sentry.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/1D45BC1E"), lv_i, "Prisoner Skin.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5706F81C"), lv_i, "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/CC7F6EA4"), lv_i, "Assets\\Textures\\btn-unit-zerg-baneling.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D43A8AD6"), lv_i, "Assets\\Textures\\btn-unit-terran-hellion.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/26061BD8"), lv_i, "Assets\\Textures\\btn-tips-missioncase.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/83D2196C"), lv_i, "Assets\\Textures\\btn-tips-computerterminals.dds");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/4BBAF7CD"), lv_i, "Assets\\Textures\\btn-tips-hotkeys.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5706374A"), lv_i, "Assets\\Textures\\btn-tips-hacking.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/BBCABFDE"), lv_i, "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/ED484C68"), lv_i, "Assets\\Textures\\btn-unit-zerg-infestedcolonist.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/413A0309"), lv_i, "Assets\\Textures\\btn-unit-zerg-kerrigan.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/63A7779B"), lv_i, "Assets\\Textures\\btn-unit-zerg-roach.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/11C08EF3"), lv_i, "Assets\\Textures\\btn-unit-zerg-queen.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A183D1B0"), lv_i, "Assets\\Textures\\btn-unit-zerg-brutalisk.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/38A94DAD"), lv_i, "Assets\\Textures\\btn-unit-zerg-hydralisk.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/8D370A7C"), lv_i, "Assets\\Textures\\btn-unit-terran-predator.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/A904F81E"), lv_i, "Assets\\Textures\\btn-unit-protoss-zealot-dark.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/67D8E777"), lv_i, "Assets\\Textures\\btn-unit-protoss-darktemplar.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D19369CF"), lv_i, "Hybrid Skin.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/5CFAE6D9"), lv_i, "Assets\\Textures\\btn-unit-protoss-zealot.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/EE2347DD"), lv_i, "Assets\\Textures\\btn-unit-zerg-aberration.dds");
    lv_i += 1;
    lv_offsetY += 76;
    lv_offsetX = 30;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/D40753BF"), lv_i, "Assets\\Textures\\btn-tips-missioncase.dds");
    lv_i += 1;
    lv_offsetX += 76;
    gf_CreateProfileReward(gv_profileDialogWorkArea, lv_offsetX, lv_offsetY, StringExternal("Param/Value/294FDCE5"), lv_i, "Assets\\Textures\\btn-tips-hotkeys.dds");
    lv_i = 1;
    for ( ; ( (auto008C32BA_ai >= 0 && lv_i <= auto008C32BA_ae) || (auto008C32BA_ai < 0 && lv_i >= auto008C32BA_ae) ) ; lv_i += auto008C32BA_ai ) {
        lv_j = 1;
        for ( ; ( (auto7DF90647_ai >= 0 && lv_j <= auto7DF90647_ae) || (auto7DF90647_ai < 0 && lv_j >= auto7DF90647_ae) ) ; lv_j += auto7DF90647_ai ) {
            gf_EnableDisableReward(lv_j, lv_i, false);
            if ((BankValueGetAsFlag(gv_banks[lv_i], gv_banksSections.lv_rewards, gv_banksStats.lv_rewards.lv_rewardsUnlocked[lv_j]) == true)) {
                gf_EnableDisableReward(lv_j, lv_i, true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitRewardsProfile_Init () {
    gt_InitRewardsProfile = TriggerCreate("gt_InitRewardsProfile_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Status of Rewards
//--------------------------------------------------------------------------------------------------
bool gt_CheckStatusofRewards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_sRank;
    int lv_rewardID;
    int lv_level;

    // Automatic Variable Declarations
    const int autoD81892C1_ae = 14;
    const int autoD81892C1_ai = 1;
    const int auto8EDED094_ae = 17;
    const int auto8EDED094_ai = 1;
    const int autoF1F8C020_ae = 15;
    const int autoF1F8C020_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoD81892C1_ai >= 0 && lv_i <= autoD81892C1_ae) || (autoD81892C1_ai < 0 && lv_i >= autoD81892C1_ae) ) ; lv_i += autoD81892C1_ai ) {
        if (((PlayerStatus(lv_i) == c_playerStatusActive) && (PlayerType(lv_i) == c_playerTypeUser))) {
            lv_rewardID = 1;
            lv_level = 3;
            lv_j = 1;
            for ( ; ( (auto8EDED094_ai >= 0 && lv_j <= auto8EDED094_ae) || (auto8EDED094_ai < 0 && lv_j >= auto8EDED094_ae) ) ; lv_j += auto8EDED094_ai ) {
                gf_CheckProbeReward(lv_i, lv_rewardID, lv_level);
                lv_rewardID += 1;
                lv_level += 3;
            }
            lv_rewardID = 18;
            lv_level = 3;
            lv_j = 1;
            for ( ; ( (autoF1F8C020_ai >= 0 && lv_j <= autoF1F8C020_ae) || (autoF1F8C020_ai < 0 && lv_j >= autoF1F8C020_ae) ) ; lv_j += autoF1F8C020_ai ) {
                gf_CheckZealotReward(lv_i, lv_rewardID, lv_level);
                lv_rewardID += 1;
                lv_level += 3;
            }
            gf_SetRankSkinAll(0, lv_i);
            lv_sRank = (((gv_pointsVampire[lv_i] - 12000) / 1000) + 1);
            if ((lv_sRank >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS1", 1);
            }

            if ((lv_sRank >= 5)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS5", 1);
            }

            if ((lv_sRank >= 10)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS10", 1);
            }

            if ((lv_sRank >= 15)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS15", 1);
            }

            if ((lv_sRank >= 20)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS20", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "HunterRankS20", 1);
            }

            if ((lv_sRank >= 25)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS25", 1);
            }

            if ((lv_sRank >= 30)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS30", 1);
            }

            if ((lv_sRank >= 35)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS35", 1);
            }

            if ((lv_sRank >= 40)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS40", 1);
            }

            if ((lv_sRank >= 45)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS45", 1);
            }

            if ((lv_sRank >= 50)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "VampireSkinRankS50", 1);
            }

            lv_sRank = (((gv_pointsHuman[lv_i] - 12000) / 1000) + 1);
            if ((lv_sRank >= 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "SpiritRankS1", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS1", 1);
            }

            if ((lv_sRank >= 5)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS5", 1);
            }

            if ((lv_sRank >= 10)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS10", 1);
            }

            if ((lv_sRank >= 15)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "SpiritRankS15", 1);
            }

            if ((lv_sRank >= 20)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS20", 1);
            }

            if ((lv_sRank >= 25)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "SpiritRankS25", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS25", 1);
            }

            if ((lv_sRank >= 30)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS30", 1);
            }

            if ((lv_sRank >= 35)) {
            }

            if ((lv_sRank >= 40)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS40", 1);
            }

            if ((lv_sRank >= 45)) {
            }

            if ((lv_sRank >= 50)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "SpiritRankS50", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS50", 1);
            }

            if ((lv_sRank >= 55)) {
            }

            if ((lv_sRank >= 60)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS60", 1);
            }

            if ((lv_sRank >= 65)) {
            }

            if ((lv_sRank >= 70)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS70", 1);
            }

            if ((lv_sRank >= 75)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS75", 1);
            }

            if ((lv_sRank >= 80)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS80", 1);
            }

            if ((lv_sRank >= 85)) {
            }

            if ((lv_sRank >= 90)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS90", 1);
            }

            if ((lv_sRank >= 95)) {
            }

            if ((lv_sRank >= 100)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "ProbeRankS100", 1);
                libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "SpiritRankS100", 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckStatusofRewards_Init () {
    gt_CheckStatusofRewards = TriggerCreate("gt_CheckStatusofRewards_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_InitLeaderboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_currentRow;
    int lv_numberofPlayers;

    // Automatic Variable Declarations
    const int auto105C7130_ae = 14;
    const int auto105C7130_ai = 1;
    const int autoADED5414_ae = 14;
    const int autoADED5414_ai = 1;
    int autoB48B3ECB_val;
    const int autoD8292C2A_ae = 14;
    const int autoD8292C2A_ai = 1;
    int autoFACD2C1D_val;

    // Variable Initialization
    lv_currentRow = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto105C7130_ai >= 0 && lv_i <= auto105C7130_ae) || (auto105C7130_ai < 0 && lv_i >= auto105C7130_ae) ) ; lv_i += auto105C7130_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            lv_numberofPlayers += 1;
        }

    }
    BoardCreate(6, (lv_numberofPlayers + 5), StringExternal("Param/Value/C507234D"), Color(100.00, 100.00, 100.00));
    BoardMinimizeSetState(BoardLastCreated(), PlayerGroupAll(), true);
    gv_leaderboard = BoardLastCreated();
    BoardItemSetText(BoardLastCreated(), 1, 1, StringExternal("Param/Value/BCFE75C0"));
    BoardItemSetText(BoardLastCreated(), 2, 1, StringExternal("Param/Value/F01DB199"));
    BoardItemSetText(BoardLastCreated(), 3, 1, StringExternal("Param/Value/5377C030"));
    BoardItemSetText(BoardLastCreated(), 4, 1, StringExternal("Param/Value/C3D0BE05"));
    BoardItemSetText(BoardLastCreated(), 5, 1, StringExternal("Param/Value/53A3A98F"));
    BoardItemSetText(BoardLastCreated(), 6, 1, StringExternal("Param/Value/7608B645"));
    lv_i = 1;
    for ( ; ( (autoADED5414_ai >= 0 && lv_i <= autoADED5414_ae) || (autoADED5414_ai < 0 && lv_i >= autoADED5414_ae) ) ; lv_i += autoADED5414_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
            BoardItemSetText(BoardLastCreated(), 1, lv_currentRow, PlayerName(lv_i));
            BoardItemSetTextColor(BoardLastCreated(), 1, lv_currentRow, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)));
            BoardItemSetText(BoardLastCreated(), 2, lv_currentRow, StringExternal("Param/Value/61A22E4E"));
            BoardItemSetText(BoardLastCreated(), 4, lv_currentRow, StringExternal("Param/Value/4EB32BD9"));
            autoB48B3ECB_val = PlayerGetColorIndex(lv_i, false);
            if (autoB48B3ECB_val == 1) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/B2F0CAD7")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 2) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/45C98FFB")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 3) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/197D0F94")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 4) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/4DCB3D98")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 5) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/58AD26EE")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 6) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/80ECD378")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 7) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/42CFEBCE")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 8) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/929039A9")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 9) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/551870D0")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 10) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/A242A1EE")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 11) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/3B7E637E")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 12) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/5961C142")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 13) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/E33C11D0")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 14) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/5AF93F25")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoB48B3ECB_val == 15) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/86D78741")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else {
            }
            gv_rowofPlayer[lv_i] = lv_currentRow;
            lv_currentRow += 1;
        }

    }
    BoardItemSetText(BoardLastCreated(), 1, lv_currentRow, StringToText(""));
    BoardItemSetText(BoardLastCreated(), 2, lv_currentRow, StringToText(""));
    BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, StringExternal("Param/Value/D0E59272"));
    BoardItemSetText(BoardLastCreated(), 4, lv_currentRow, StringExternal("Param/Value/BC306D22"));
    gv_totalFeedRowLeaderboard = lv_currentRow;
    lv_currentRow += 1;
    gv_averageRow = lv_currentRow;
    BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, (StringExternal("Param/Value/3673D838") + IntToText(gv_playersUsedforAverageProbePoints) + StringExternal("Param/Value/EFF66674")));
    lv_currentRow += 1;
    BoardItemSetText(BoardLastCreated(), 1, lv_currentRow, StringExternal("Param/Value/485B6AA2"));
    BoardItemSetText(BoardLastCreated(), 2, lv_currentRow, StringExternal("Param/Value/19ADF6A1"));
    BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, StringExternal("Param/Value/1BE6CF2C"));
    lv_currentRow += 1;
    lv_i = 1;
    for ( ; ( (autoD8292C2A_ai >= 0 && lv_i <= autoD8292C2A_ae) || (autoD8292C2A_ai < 0 && lv_i >= autoD8292C2A_ae) ) ; lv_i += autoD8292C2A_ai ) {
        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (gv_side[lv_i] == "Zealot"))) {
            BoardItemSetText(BoardLastCreated(), 1, lv_currentRow, PlayerName(lv_i));
            BoardItemSetTextColor(BoardLastCreated(), 1, lv_currentRow, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false)));
            BoardItemSetText(BoardLastCreated(), 2, lv_currentRow, StringExternal("Param/Value/452118BD"));
            autoFACD2C1D_val = PlayerGetColorIndex(lv_i, false);
            if (autoFACD2C1D_val == 1) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/7873334C")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 2) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/2995D29B")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 3) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/52402CD9")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 4) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/EA84E684")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 5) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/057319A9")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 6) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/7539F44D")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 7) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/4AAE6C73")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 8) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/5494CE87")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 9) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/30E84652")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 10) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/8EDCB015")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 11) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/A761179F")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 12) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/1DED2D73")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 13) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/48DCDE99")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 14) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/792F99CC")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else if (autoFACD2C1D_val == 15) {
                BoardItemSetText(BoardLastCreated(), 3, lv_currentRow, TextWithColor((StringToText("") + StringExternal("Param/Value/70BE3BC4")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))));
            }
            else {
            }
            gv_rowofPlayer[lv_i] = lv_currentRow;
            lv_currentRow += 1;
        }

    }
    BoardItemSetText(BoardLastCreated(), 2, lv_currentRow, StringExternal("Param/Value/932EBB0D"));
    TriggerEnable(gt_RenderLeaderboardTime, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitLeaderboard_Init () {
    gt_InitLeaderboard = TriggerCreate("gt_InitLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Render Leaderboard Time
//--------------------------------------------------------------------------------------------------
bool gt_RenderLeaderboardTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup autoFA9E4462_g;
    int autoFA9E4462_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_missionTime += gv_timescalevalue;
    gv_perSecondIntervalTicker += 1;
    gv_gameTimeMinutes = (FixedToInt(gv_missionTime) / 60);
    gv_gameTimeSeconds = ModI(FixedToInt(gv_missionTime), 60);
    lv_i = FixedToInt(gv_missionTime);
    gv_gameTimeMinutesText = (StringExternal("Param/Value/EEA8942A") + TextTimeFormat(StringToText("<min2/>:<sec2/>"), lv_i) + StringExternal("Param/Value/3A4BD04A"));
    if ((gv_gameTimeSeconds < 10)) {
        BoardSetName(gv_leaderboard, (StringExternal("Param/Value/71502B1E") + (IntToText(gv_gameTimeMinutes) + (StringExternal("Param/Value/91852CF5") + (StringExternal("Param/Value/381CB07C") + (IntToText(gv_gameTimeSeconds) + StringExternal("Param/Value/2353174C") + FixedToTextAdvanced(gv_timescalevalue, c_formatNumberStyleNormal, true, 2, 1) + StringExternal("Param/Value/AC91D7DD")))))), Color(100.00, 100.00, 100.00));
    }
    else {
        BoardSetName(gv_leaderboard, (StringExternal("Param/Value/C0ED1363") + (IntToText(gv_gameTimeMinutes) + (StringExternal("Param/Value/11185A3E") + (StringToText("") + (IntToText(gv_gameTimeSeconds) + StringExternal("Param/Value/F08A6A70") + FixedToTextAdvanced(gv_timescalevalue, c_formatNumberStyleNormal, true, 2, 1) + StringExternal("Param/Value/B5A4ACCA")))))), Color(100.00, 100.00, 100.00));
    }
    autoFA9E4462_g = gv_playerGroupProbes;
    autoFA9E4462_var = -1;
    while (true) {
        autoFA9E4462_var = PlayerGroupNextPlayer(autoFA9E4462_g, autoFA9E4462_var);
        if (autoFA9E4462_var < 0) { break; }
        gv_gatheredGasLastRecorded[autoFA9E4462_var] = gv_gatheredGasCurrent[autoFA9E4462_var];
        gv_gatheredGasCurrent[autoFA9E4462_var] = PlayerScoreValueGetAsInt(autoFA9E4462_var, "VespeneCollected");
        gv_gatheredGasMatrix[autoFA9E4462_var][ModI(gv_perSecondIntervalTicker, 16)] = FixedToInt((IntToFixed((gv_gatheredGasCurrent[autoFA9E4462_var] - gv_gatheredGasLastRecorded[autoFA9E4462_var])) / gv_timescalevalue));
        gv_gatheredMinsLastRecorded[autoFA9E4462_var] = gv_gatheredMinsCurrent[autoFA9E4462_var];
        gv_gatheredMinsCurrent[autoFA9E4462_var] = PlayerScoreValueGetAsInt(autoFA9E4462_var, "MineralsCollected");
        gv_gatheredMinsMatrix[autoFA9E4462_var][ModI(gv_perSecondIntervalTicker, 16)] = FixedToInt((IntToFixed((gv_gatheredMinsCurrent[autoFA9E4462_var] - gv_gatheredMinsLastRecorded[autoFA9E4462_var])) / gv_timescalevalue));
    }
    TriggerExecute(gt_ResourcePerSecondUpdater, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RenderLeaderboardTime_Init () {
    gt_RenderLeaderboardTime = TriggerCreate("gt_RenderLeaderboardTime_Func");
    TriggerEnable(gt_RenderLeaderboardTime, false);
    TriggerAddEventTimePeriodic(gt_RenderLeaderboardTime, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Stats Leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_InitStatsLeaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_WritePlayerInfo();
    gf_GenerateXPTable();
    gf_CreateStatsLeaderboard();
    gf_CheckStatsofPlayers();
    gf_CheckPreviousGame();
    gf_UpdateStatsLeaderboard();
    gf_CalculateAveragePoints();
    gf_WritePreviousGameData();
    gf_UpdateLeaderboardRanks();
    gf_IncreaseNumberofGamesinBank();
    gf_InitLabelRanks();
    TriggerExecute(gt_InitXPBar, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitStatsLeaderboard_Init () {
    gt_InitStatsLeaderboard = TriggerCreate("gt_InitStatsLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: -afk
//--------------------------------------------------------------------------------------------------
bool gt_afk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoAB222030_ae = 14;
    const int autoAB222030_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoAB222030_ai >= 0 && lv_i <= autoAB222030_ae) || (autoAB222030_ai < 0 && lv_i >= autoAB222030_ae) ) ; lv_i += autoAB222030_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            if ((gv_aFKTimerRunning == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringToText("") + StringExternal("Param/Value/816A6AB1") + StringExternal("Param/Value/CF989BD5") + StringExternal("Param/Value/16087644") + StringExternal("Param/Value/71F61960") + StringToText("")));
                if ((gv_aFKDetectInProgress[lv_i] == true)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/BD6080A2") + libNtve_gf_ConvertBooleanToText(gv_aFKPlayer[lv_i]) + StringExternal("Param/Value/07ABD367") + StringExternal("Param/Value/3CD93120") + StringToText("")));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/1421217F") + libNtve_gf_ConvertBooleanToText(gv_aFKPlayer[lv_i]) + StringExternal("Param/Value/BD250185") + StringToText("") + StringToText("")));
                }
            }
            else {
                if ((gv_aFKDetectInProgress[lv_i] == true)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/2A10F5E0") + libNtve_gf_ConvertBooleanToText(gv_aFKPlayer[lv_i]) + StringExternal("Param/Value/0A4F2E23") + StringExternal("Param/Value/126FD190") + StringToText("")));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/975C8F09") + libNtve_gf_ConvertBooleanToText(gv_aFKPlayer[lv_i]) + StringExternal("Param/Value/2FBFEF28") + StringToText("") + StringToText("")));
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_afk_Init () {
    gt_afk = TriggerCreate("gt_afk_Func");
    TriggerAddEventChatMessage(gt_afk, c_playerAny, "-afk", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -afk test
//--------------------------------------------------------------------------------------------------
bool gt_afktest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_aFKTimerRunning == false))) {
            return false;
        }

        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AFKDetectStart();
    gf_AFKDetectDuration(180);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_afktest_Init () {
    gt_afktest = TriggerCreate("gt_afktest_Func");
    TriggerAddEventChatMessage(gt_afktest, c_playerAny, "-afk test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AFKDetectStop();
    gv_aFKTimerRunning = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectTimerExpires_Init () {
    gt_AFKDetectTimerExpires = TriggerCreate("gt_AFKDetectTimerExpires_Func");
    TriggerAddEventTimer(gt_AFKDetectTimerExpires, gv_aFKDetectTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 0
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer0_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer0_Init () {
    gt_AFKDetectPlayer0 = TriggerCreate("gt_AFKDetectPlayer0_Func");
    TriggerEnable(gt_AFKDetectPlayer0, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer0, 0);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 1
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer1_Init () {
    gt_AFKDetectPlayer1 = TriggerCreate("gt_AFKDetectPlayer1_Func");
    TriggerEnable(gt_AFKDetectPlayer1, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer1, 1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 2
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer2_Init () {
    gt_AFKDetectPlayer2 = TriggerCreate("gt_AFKDetectPlayer2_Func");
    TriggerEnable(gt_AFKDetectPlayer2, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer2, 2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 3
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer3_Init () {
    gt_AFKDetectPlayer3 = TriggerCreate("gt_AFKDetectPlayer3_Func");
    TriggerEnable(gt_AFKDetectPlayer3, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer3, 3);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 4
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer4_Init () {
    gt_AFKDetectPlayer4 = TriggerCreate("gt_AFKDetectPlayer4_Func");
    TriggerEnable(gt_AFKDetectPlayer4, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer4, 4);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 5
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer5_Init () {
    gt_AFKDetectPlayer5 = TriggerCreate("gt_AFKDetectPlayer5_Func");
    TriggerEnable(gt_AFKDetectPlayer5, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer5, 5);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 6
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer6_Init () {
    gt_AFKDetectPlayer6 = TriggerCreate("gt_AFKDetectPlayer6_Func");
    TriggerEnable(gt_AFKDetectPlayer6, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer6, 6);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 7
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer7_Init () {
    gt_AFKDetectPlayer7 = TriggerCreate("gt_AFKDetectPlayer7_Func");
    TriggerEnable(gt_AFKDetectPlayer7, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer7, 7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 8
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer8_Init () {
    gt_AFKDetectPlayer8 = TriggerCreate("gt_AFKDetectPlayer8_Func");
    TriggerEnable(gt_AFKDetectPlayer8, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer8, 8);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 9
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer9_Init () {
    gt_AFKDetectPlayer9 = TriggerCreate("gt_AFKDetectPlayer9_Func");
    TriggerEnable(gt_AFKDetectPlayer9, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer9, 9);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 10
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer10_Init () {
    gt_AFKDetectPlayer10 = TriggerCreate("gt_AFKDetectPlayer10_Func");
    TriggerEnable(gt_AFKDetectPlayer10, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer10, 10);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 11
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer11_Init () {
    gt_AFKDetectPlayer11 = TriggerCreate("gt_AFKDetectPlayer11_Func");
    TriggerEnable(gt_AFKDetectPlayer11, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer11, 11);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 12
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer12_Init () {
    gt_AFKDetectPlayer12 = TriggerCreate("gt_AFKDetectPlayer12_Func");
    TriggerEnable(gt_AFKDetectPlayer12, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer12, 12);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 13
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer13_Init () {
    gt_AFKDetectPlayer13 = TriggerCreate("gt_AFKDetectPlayer13_Func");
    TriggerEnable(gt_AFKDetectPlayer13, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer13, 13);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 14
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer14_Init () {
    gt_AFKDetectPlayer14 = TriggerCreate("gt_AFKDetectPlayer14_Func");
    TriggerEnable(gt_AFKDetectPlayer14, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer14, 14);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Detect Player 15
//--------------------------------------------------------------------------------------------------
bool gt_AFKDetectPlayer15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_aFKDetectInProgress[EventPlayer()] = false;
    gv_aFKPlayer[EventPlayer()] = false;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKDetectPlayer15_Init () {
    gt_AFKDetectPlayer15 = TriggerCreate("gt_AFKDetectPlayer15_Func");
    TriggerEnable(gt_AFKDetectPlayer15, false);
    TriggerAddEventMouseMoved(gt_AFKDetectPlayer15, 15);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anit-Troll - PAUSE Killer
//--------------------------------------------------------------------------------------------------
bool gt_AnitTrollPAUSEKiller_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnitTrollPAUSEKiller_Init () {
    gt_AnitTrollPAUSEKiller = TriggerCreate("gt_AnitTrollPAUSEKiller_Func");
    TriggerEnable(gt_AnitTrollPAUSEKiller, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Angry Lava Critter
//--------------------------------------------------------------------------------------------------
bool gt_AngryLavaCritter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto618A7744_g;
    int auto618A7744_u;
    unit auto618A7744_var;
    unitgroup auto10CA09B2_g;
    int auto10CA09B2_u;
    unit auto10CA09B2_var;
    unitgroup auto5CB77395_g;
    int auto5CB77395_u;
    unit auto5CB77395_var;
    unitgroup autoA13641E9_g;
    int autoA13641E9_u;
    unit autoA13641E9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_lavaCritters = UnitGroup("LavaCritterStatueDefenderUnit", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    libNtve_gf_SetAlliance(0, gv_lavaStatueKiller, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAlliance(gv_lavaStatueKiller, 0, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    if ((PlayerStatus(gv_lavaStatueKiller) == c_playerStatusLeft)) {
        auto618A7744_g = gv_lavaCritters;
        auto618A7744_u = UnitGroupCount(auto618A7744_g, c_unitCountAll);
        for (;; auto618A7744_u -= 1) {
            auto618A7744_var = UnitGroupUnitFromEnd(auto618A7744_g, auto618A7744_u);
            if (auto618A7744_var == null) { break; }
            UnitRemove(auto618A7744_var);
        }
    }
    else {
        gv_lavaCrittersTarget = UnitGroup(null, gv_lavaStatueKiller, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if (((gv_side[gv_lavaStatueKiller] != "Zealot") && (PlayerType(gv_lavaStatueKiller) == c_playerTypeUser) && (PlayerStatus(gv_lavaStatueKiller) == c_playerStatusActive) && (UnitIsAlive(gv_probes[gv_lavaStatueKiller]) == true))) {
            auto10CA09B2_g = gv_lavaCrittersTarget;
            auto10CA09B2_u = UnitGroupCount(auto10CA09B2_g, c_unitCountAll);
            for (;; auto10CA09B2_u -= 1) {
                auto10CA09B2_var = UnitGroupUnitFromEnd(auto10CA09B2_g, auto10CA09B2_u);
                if (auto10CA09B2_var == null) { break; }
                if ((UnitGetType(auto10CA09B2_var) == "Probe")) {
                    gv_lavaStatueKillersUnit = auto10CA09B2_var;
                }
                else {
                    if ((UnitGetType(auto10CA09B2_var) == "HighTemplar")) {
                        gv_lavaStatueKillersUnit = auto10CA09B2_var;
                    }

                }
            }
        }

        if (((gv_side[gv_lavaStatueKiller] == "Zealot") && (PlayerType(gv_lavaStatueKiller) == c_playerTypeUser) && (PlayerStatus(gv_lavaStatueKiller) == c_playerStatusActive) && (UnitIsAlive(gv_zealots[gv_lavaStatueKiller]) == true))) {
            auto5CB77395_g = gv_lavaCrittersTarget;
            auto5CB77395_u = UnitGroupCount(auto5CB77395_g, c_unitCountAll);
            for (;; auto5CB77395_u -= 1) {
                auto5CB77395_var = UnitGroupUnitFromEnd(auto5CB77395_g, auto5CB77395_u);
                if (auto5CB77395_var == null) { break; }
                if ((UnitGetType(auto5CB77395_var) == "PrisonZealot")) {
                    gv_lavaStatueKillersUnit = auto5CB77395_var;
                }
                else {
                    if ((UnitGetType(auto5CB77395_var) == "Predator")) {
                        gv_lavaStatueKillersUnit = auto5CB77395_var;
                    }

                }
            }
        }

        autoA13641E9_g = gv_lavaCritters;
        autoA13641E9_u = UnitGroupCount(autoA13641E9_g, c_unitCountAll);
        for (;; autoA13641E9_u -= 1) {
            autoA13641E9_var = UnitGroupUnitFromEnd(autoA13641E9_g, autoA13641E9_u);
            if (autoA13641E9_var == null) { break; }
            UnitIssueOrder(autoA13641E9_var, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(gv_lavaCrittersTarget, UnitGetPosition(autoA13641E9_var))), c_orderQueueReplace);
            UnitIssueOrder(autoA13641E9_var, OrderTargetingUnitGroup(AbilityCommand("attack", 0), gv_lavaCrittersTarget), c_orderQueueAddToEnd);
            UnitIssueOrder(autoA13641E9_var, OrderTargetingUnit(AbilityCommand("attack", 0), gv_lavaStatueKillersUnit), c_orderQueueAddToEnd);
        }
        TimerStart(gv_lavaCritterRemovalTimer, 3.0, false, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AngryLavaCritter_Init () {
    gt_AngryLavaCritter = TriggerCreate("gt_AngryLavaCritter_Func");
    TriggerAddEventTimer(gt_AngryLavaCritter, gv_lavaCritterRemovalTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death By Penguin
//--------------------------------------------------------------------------------------------------
bool gt_DeathByPenguin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3BF562B7_g;
    int auto3BF562B7_u;
    unit auto3BF562B7_var;
    unitgroup auto28A76AE3_g;
    int auto28A76AE3_u;
    unit auto28A76AE3_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(libNtve_gf_KillingUnit()) == 0) && ((UnitGetType(libNtve_gf_KillingUnit()) == "Zergling2") || (UnitGetType(libNtve_gf_KillingUnit()) == "Zergling3"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(UnitGetOwner(EventUnit())) + StringExternal("Param/Value/5C8DA239")));
    GameOver(UnitGetOwner(EventUnit()), c_gameOverDefeat, false, false);
    if ((gv_penguinsCameOnMeteors == 1)) {
    }
    else {
        auto3BF562B7_g = UnitGroupFilterPlayer(UnitGroup("Zergling3", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 0, 0);
        auto3BF562B7_u = UnitGroupCount(auto3BF562B7_g, c_unitCountAll);
        for (;; auto3BF562B7_u -= 1) {
            auto3BF562B7_var = UnitGroupUnitFromEnd(auto3BF562B7_g, auto3BF562B7_u);
            if (auto3BF562B7_var == null) { break; }
            UnitRemove(auto3BF562B7_var);
        }
        auto28A76AE3_g = UnitGroupFilterPlayer(UnitGroup("Zergling2", 0, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), 0, 0);
        auto28A76AE3_u = UnitGroupCount(auto28A76AE3_g, c_unitCountAll);
        for (;; auto28A76AE3_u -= 1) {
            auto28A76AE3_var = UnitGroupUnitFromEnd(auto28A76AE3_g, auto28A76AE3_u);
            if (auto28A76AE3_var == null) { break; }
            UnitRemove(auto28A76AE3_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathByPenguin_Init () {
    gt_DeathByPenguin = TriggerCreate("gt_DeathByPenguin_Func");
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[1]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[2]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[3]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[4]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[5]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[6]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[7]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[8]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[9]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[10]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[11]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[12]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[13]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probes[14]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[1]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[2]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[3]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[4]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[5]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[6]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[7]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[8]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[9]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[10]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[11]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[12]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[13]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealots[14]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[1]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[2]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[3]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[4]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[5]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[6]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[7]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[8]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[9]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[10]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[11]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[12]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[13]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_probeSpirit[14]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[1]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[2]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[3]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[4]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[5]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[6]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[7]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[8]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[9]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[10]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[11]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[12]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[13]"));
    TriggerAddEventUnitDied(gt_DeathByPenguin, UnitRefFromVariable("gv_zealotsTemp[14]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death By LavaCritter
//--------------------------------------------------------------------------------------------------
bool gt_DeathByLavaCritter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libNtve_gf_KillingUnit()) == "LavaCritterStatueDefenderUnit") && (UnitGetOwner(libNtve_gf_KillingUnit()) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringToText("") + StringExternal("Param/Value/D807BD28")));
    GameOver(UnitGetOwner(gv_lavaStatueKillersUnit), c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathByLavaCritter_Init () {
    gt_DeathByLavaCritter = TriggerCreate("gt_DeathByLavaCritter_Func");
    TriggerAddEventUnitDied(gt_DeathByLavaCritter, UnitRefFromVariable("gv_lavaStatueKillersUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init AI Probe
//--------------------------------------------------------------------------------------------------
bool gt_InitAIProbe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;
    order lv_order;
    int lv_numberofRichMineralFields;

    // Automatic Variable Declarations
    const int auto89B4E4CF_ae = 69;
    int auto89B4E4CF_var;
    unitgroup auto169DD4FA_g;
    int auto169DD4FA_u;
    unit auto169DD4FA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto89B4E4CF_var = 1;
    for ( ; auto89B4E4CF_var <= auto89B4E4CF_ae; auto89B4E4CF_var += 1 ) {
        if ((RegionContainsPoint(RegionFromName(("Probe AI Base " + IntToString(auto89B4E4CF_var))), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) == true)) {
            gv_regionAI = RegionFromName(("Probe AI Base " + IntToString(auto89B4E4CF_var)));
        }

    }
    gv_stage = -1;
    gv_aIPlayerNumber = EventPlayer();
    auto169DD4FA_g = UnitGroup("RichMineralField", 0, gv_regionAI, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto169DD4FA_u = UnitGroupCount(auto169DD4FA_g, c_unitCountAll);
    for (;; auto169DD4FA_u -= 1) {
        auto169DD4FA_var = UnitGroupUnitFromEnd(auto169DD4FA_g, auto169DD4FA_u);
        if (auto169DD4FA_var == null) { break; }
        lv_numberofRichMineralFields += 1;
    }
    if ((lv_numberofRichMineralFields >= 1)) {
        gv_mineralFieldMiner = UnitGroupRandomUnit(UnitGroup("RichMineralField", 0, gv_regionAI, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    else {
        gv_mineralFieldMiner = UnitGroupRandomUnit(UnitGroup("MineralField", 0, gv_regionAI, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    }
    gf_Create4x4Building(AbilityCommand("ProtossBuild", 0));
    while (!((UnitIsAlive(UnitGroupUnit(UnitGroup("GeneratorLevel00", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == true))) {
        Wait(1.0, c_timeGame);
    }
    gf_Create2x2Building(AbilityCommand("ProtossBuild", 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitAIProbe_Init () {
    gt_InitAIProbe = TriggerCreate("gt_InitAIProbe_Func");
    TriggerEnable(gt_InitAIProbe, false);
    TriggerAddEventPlayerEffectUsed(gt_InitAIProbe, c_playerAny, "CalldownMULECreateUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Stage
//--------------------------------------------------------------------------------------------------
bool gt_CheckStage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto36219BB0_val;
    unitgroup auto69EE241A_g;
    int auto69EE241A_u;
    unit auto69EE241A_var;
    unitgroup auto157B771B_g;
    int auto157B771B_u;
    unit auto157B771B_var;
    unitgroup autoF6C3320E_g;
    int autoF6C3320E_u;
    unit autoF6C3320E_var;
    unitgroup auto20D7FCDA_g;
    int auto20D7FCDA_u;
    unit auto20D7FCDA_var;
    unitgroup auto8E0F648B_g;
    int auto8E0F648B_u;
    unit auto8E0F648B_var;
    unitgroup autoD650BE2F_g;
    int autoD650BE2F_u;
    unit autoD650BE2F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto36219BB0_val = gv_stage;
    if (auto36219BB0_val == 1) {
        gf_CheckStage(0, 50, 2, "GeneratorLevel00", AbilityCommand("UpgradetoGeneratorLevel2", 0));
    }
    else if (auto36219BB0_val == 2) {
        gf_CheckStage(0, 8, 3, "wall1", AbilityCommand("UpgradetoWallLevel2", 0));
    }
    else if (auto36219BB0_val == 3) {
        gf_CheckStage(0, 16, 4, "Wall2", AbilityCommand("UpgradetoWallLevel3", 0));
    }
    else if (auto36219BB0_val == 4) {
        gf_CheckStage(0, 32, 5, "Wall3", AbilityCommand("UpgradetoWallLevel4", 0));
    }
    else if (auto36219BB0_val == 5) {
        gf_CheckStage(0, 100, 6, "GeneratorLevel01", AbilityCommand("UpgradetoGeneratorLevel3", 0));
    }
    else if (auto36219BB0_val == 6) {
        auto69EE241A_g = UnitGroup("Wall4", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto69EE241A_u = UnitGroupCount(auto69EE241A_g, c_unitCountAll);
        for (;; auto69EE241A_u -= 1) {
            auto69EE241A_var = UnitGroupUnitFromEnd(auto69EE241A_g, auto69EE241A_u);
            if (auto69EE241A_var == null) { break; }
            UnitIssueOrder(auto69EE241A_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueAddToEnd);
        }
        if (((AIHasRes(gv_aIPlayerNumber, 0, 64) == true) && (UnitIsAlive(UnitGroupUnit(UnitGroup("Market", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == false))) {
            gf_Create4x4Building(AbilityCommand("ProtossBuild", 4));
        }

    }
    else if (auto36219BB0_val == 7) {
        gf_CheckStage(0, 200, 8, "GeneratorLevel02", AbilityCommand("UpgradetoGeneratorLevel4", 0));
    }
    else if (auto36219BB0_val == 8) {
        auto157B771B_g = UnitGroup("Market", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto157B771B_u = UnitGroupCount(auto157B771B_g, c_unitCountAll);
        for (;; auto157B771B_u -= 1) {
            auto157B771B_var = UnitGroupUnitFromEnd(auto157B771B_g, auto157B771B_u);
            if (auto157B771B_var == null) { break; }
            UnitIssueOrder(auto157B771B_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueAddToEnd);
        }
        if (((AIHasRes(gv_aIPlayerNumber, 0, 4) == true) && (UnitIsAlive(UnitGroupUnit(UnitGroup("wall1", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == false))) {
            gf_Create2x2Building(AbilityCommand("ProtossBuild", 1));
        }

    }
    else if (auto36219BB0_val == 9) {
        gf_CheckStage(0, 8, 10, "wall1", AbilityCommand("UpgradetoWallLevel2", 0));
    }
    else if (auto36219BB0_val == 10) {
        gf_CheckStage(0, 16, 11, "Wall2", AbilityCommand("UpgradetoWallLevel3", 0));
    }
    else if (auto36219BB0_val == 11) {
        gf_CheckStage(0, 32, 12, "Wall3", AbilityCommand("UpgradetoWallLevel4", 0));
    }
    else if (auto36219BB0_val == 12) {
        gf_CheckStage(0, 64, 13, "Wall4", AbilityCommand("UpgradetoWallLevel5", 0));
    }
    else if (auto36219BB0_val == 13) {
        gf_CheckStage(0, 128, 14, "Wall5", AbilityCommand("UpgradetoWallLevel6", 0));
    }
    else if (auto36219BB0_val == 14) {
        gf_CheckStage(0, 400, 15, "GeneratorLevel03", AbilityCommand("UpgradetoGeneratorLevel5", 0));
    }
    else if (auto36219BB0_val == 15) {
        autoF6C3320E_g = UnitGroup("Wall6", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF6C3320E_u = UnitGroupCount(autoF6C3320E_g, c_unitCountAll);
        for (;; autoF6C3320E_u -= 1) {
            autoF6C3320E_var = UnitGroupUnitFromEnd(autoF6C3320E_g, autoF6C3320E_u);
            if (autoF6C3320E_var == null) { break; }
            UnitIssueOrder(autoF6C3320E_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueAddToEnd);
        }
        if (((AIHasRes(gv_aIPlayerNumber, 0, 64) == true) && (UnitIsAlive(UnitGroupUnit(UnitGroup("Market", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == false))) {
            gf_Create4x4Building(AbilityCommand("ProtossBuild", 4));
        }

    }
    else if (auto36219BB0_val == 16) {
        gf_CheckStage(0, gv_buy10MineralsPrice, 17, "Market", AbilityCommand("BuyMinerals", 0));
    }
    else if (auto36219BB0_val == 17) {
        gf_CheckStage(0, gv_buy10MineralsPrice, 18, "Market", AbilityCommand("BuyMinerals", 0));
    }
    else if (auto36219BB0_val == 18) {
        gf_CheckStage(0, gv_buy10MineralsPrice, 19, "Market", AbilityCommand("BuyMinerals", 0));
    }
    else if (auto36219BB0_val == 19) {
        gf_CheckStage(0, gv_buy10MineralsPrice, 20, "Market", AbilityCommand("BuyMinerals", 0));
    }
    else if (auto36219BB0_val == 20) {
        gf_CheckStage(0, 256, 21, "Market", AbilityCommand("UpgradetoUndergroundMarket", 0));
    }
    else if (auto36219BB0_val == 21) {
        gf_CheckStage(32, 800, 22, "GeneratorLevel04", AbilityCommand("UpgradetoGeneratorLevel6", 0));
    }
    else if (auto36219BB0_val == 22) {
        auto20D7FCDA_g = UnitGroup("UndergroundMarket", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto20D7FCDA_u = UnitGroupCount(auto20D7FCDA_g, c_unitCountAll);
        for (;; auto20D7FCDA_u -= 1) {
            auto20D7FCDA_var = UnitGroupUnitFromEnd(auto20D7FCDA_g, auto20D7FCDA_u);
            if (auto20D7FCDA_var == null) { break; }
            UnitIssueOrder(auto20D7FCDA_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueAddToEnd);
        }
        if (((AIHasRes(gv_aIPlayerNumber, 0, 256) == true) && (UnitIsAlive(UnitGroupUnit(UnitGroup("Gateway", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == false))) {
            gf_Create4x4Building(AbilityCommand("ProtossBuild", 3));
        }

    }
    else if (auto36219BB0_val == 23) {
        auto8E0F648B_g = UnitGroup("Gateway", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8E0F648B_u = UnitGroupCount(auto8E0F648B_g, c_unitCountAll);
        for (;; auto8E0F648B_u -= 1) {
            auto8E0F648B_var = UnitGroupUnitFromEnd(auto8E0F648B_g, auto8E0F648B_u);
            if (auto8E0F648B_var == null) { break; }
            gv_stage += 1;
            UnitIssueOrder(auto8E0F648B_var, OrderTargetingUnit(AbilityCommand("Rally", 0), gv_mineralFieldMiner), c_orderQueueAddToEnd);
        }
    }
    else if (auto36219BB0_val == 24) {
        gf_CheckStage(0, 512, (gv_stage + 1), "Gateway", AbilityCommand("GatewayTrain", 0));
    }
    else if (auto36219BB0_val == 25) {
        gf_CheckStage(0, 512, (gv_stage + 1), "Gateway", AbilityCommand("GatewayTrain", 0));
    }
    else if (auto36219BB0_val == 26) {
        gf_CheckStage(0, 512, (gv_stage + 1), "Gateway", AbilityCommand("GatewayTrain", 0));
    }
    else if (auto36219BB0_val == 27) {
        gf_CheckStage(0, 512, (gv_stage + 1), "Gateway", AbilityCommand("GatewayTrain", 0));
    }
    else if (auto36219BB0_val == 28) {
        if (((AIHasRes(gv_aIPlayerNumber, 0, 4) == true) && (UnitIsAlive(UnitGroupUnit(UnitGroup("wall1", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1)) == false))) {
            gf_Create2x2Building(AbilityCommand("ProtossBuild", 1));
        }

    }
    else if (auto36219BB0_val == 29) {
        gf_CheckStage(0, 8, (gv_stage + 1), "wall1", AbilityCommand("UpgradetoWallLevel2", 0));
    }
    else if (auto36219BB0_val == 30) {
        gf_CheckStage(0, 16, (gv_stage + 1), "Wall2", AbilityCommand("UpgradetoWallLevel3", 0));
    }
    else if (auto36219BB0_val == 31) {
        gf_CheckStage(0, 32, (gv_stage + 1), "Wall3", AbilityCommand("UpgradetoWallLevel4", 0));
    }
    else if (auto36219BB0_val == 32) {
        gf_CheckStage(0, 64, (gv_stage + 1), "Wall4", AbilityCommand("UpgradetoWallLevel5", 0));
    }
    else if (auto36219BB0_val == 33) {
        gf_CheckStage(0, 128, (gv_stage + 1), "Wall5", AbilityCommand("UpgradetoWallLevel6", 0));
    }
    else if (auto36219BB0_val == 34) {
        gf_CheckStage(0, 256, (gv_stage + 1), "Wall6", AbilityCommand("UpgradetoWallLevel7", 0));
        autoD650BE2F_g = UnitGroup("Gateway", gv_aIPlayerNumber, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD650BE2F_u = UnitGroupCount(autoD650BE2F_g, c_unitCountAll);
        for (;; autoD650BE2F_u -= 1) {
            autoD650BE2F_var = UnitGroupUnitFromEnd(autoD650BE2F_g, autoD650BE2F_u);
            if (autoD650BE2F_var == null) { break; }
            UnitIssueOrder(autoD650BE2F_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueAddToEnd);
        }
    }
    else if (auto36219BB0_val == 35) {
        gf_CheckStage(0, 512, (gv_stage + 1), "Wall7", AbilityCommand("UpgradetoWallLevel8", 0));
    }
    else if (auto36219BB0_val == 36) {
        gf_CheckStage(0, 1024, (gv_stage + 1), "Wall8", AbilityCommand("UpgradetoWallLevel9", 0));
    }
    else if (auto36219BB0_val == 37) {
        gf_CheckStage(64, 1600, (gv_stage + 1), "GeneratorLevel05", AbilityCommand("UpgradetoGeneratorLevel7", 0));
    }
    else if (auto36219BB0_val == 38) {
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckStage_Init () {
    gt_CheckStage = TriggerCreate("gt_CheckStage_Func");
    TriggerEnable(gt_CheckStage, false);
    TriggerAddEventTimePeriodic(gt_CheckStage, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Wall
//--------------------------------------------------------------------------------------------------
bool gt_UltraWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ultraWall == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8E9E81C0")));
    gv_ultraWall = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraWall_Init () {
    gt_UltraWall = TriggerCreate("gt_UltraWall_Func");
    TriggerAddEventUnitAbility(gt_UltraWall, null, AbilityCommand("UpgradetoWallLevel6", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UltraWall, null, AbilityCommand("ProtossBuild", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mega Wall
//--------------------------------------------------------------------------------------------------
bool gt_MegaWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_megaWall == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/5E984813")));
    gv_megaWall = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegaWall_Init () {
    gt_MegaWall = TriggerCreate("gt_MegaWall_Func");
    TriggerAddEventUnitAbility(gt_MegaWall, null, AbilityCommand("UpgradetoWallLevel11", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MegaWall, null, AbilityCommand("ProtossBuild", 26), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Wall
//--------------------------------------------------------------------------------------------------
bool gt_PowerWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_powerWall == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/BE8EB30C")));
    gv_powerWall = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerWall_Init () {
    gt_PowerWall = TriggerCreate("gt_PowerWall_Func");
    TriggerAddEventUnitAbility(gt_PowerWall, null, AbilityCommand("UpgradetoWallLevel16", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PowerWall, null, AbilityCommand("ProtossBuild", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Wall
//--------------------------------------------------------------------------------------------------
bool gt_FinalWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_finalWall == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/04140784")));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, StringExternal("Param/Value/F01A0BE2"));
    gv_finalWall = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalWall_Init () {
    gt_FinalWall = TriggerCreate("gt_FinalWall_Func");
    TriggerAddEventUnitAbility(gt_FinalWall, null, AbilityCommand("UpgradetoWallMax", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_FinalWall, null, AbilityCommand("ProtossBuild", 20), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 7
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel7 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/DBE34700")));
    gv_turretLevel7 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel7_Init () {
    gt_TurretLevel7 = TriggerCreate("gt_TurretLevel7_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel7, null, AbilityCommand("UpgradetoTurretlevel7", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 11
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel11 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/753B864B")));
    gv_turretLevel11 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel11_Init () {
    gt_TurretLevel11 = TriggerCreate("gt_TurretLevel11_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel11, null, AbilityCommand("UpgradetoTurretlevel11", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLevel11, null, AbilityCommand("ProtossBuild", 21), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 13
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel13 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/3A6F0CFB")));
    gv_turretLevel13 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel13_Init () {
    gt_TurretLevel13 = TriggerCreate("gt_TurretLevel13_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel13, null, AbilityCommand("UpgradetoTurretlevel13", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_TurretLevel13, null, AbilityCommand("ProtossBuild", 23), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level Final
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevelFinal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevelFinal == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/BEA32D23") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (StringExternal("Param/Value/370FA1E9") + StringExternal("Param/Value/FB3E2F2E") + gv_gameTimeMinutesText + StringExternal("Param/Value/6A62BBFC")));
    gv_turretLevelFinal = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevelFinal_Init () {
    gt_TurretLevelFinal = TriggerCreate("gt_TurretLevelFinal_Func");
    TriggerAddEventUnitAbility(gt_TurretLevelFinal, null, AbilityCommand("ProtossBuild", 24), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Miner
//--------------------------------------------------------------------------------------------------
bool gt_UltraMiner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ultraMiner == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/DB1C9049") + gv_gameTimeMinutesText));
    gv_ultraMiner = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraMiner_Init () {
    gt_UltraMiner = TriggerCreate("gt_UltraMiner_Func");
    TriggerAddEventUnitAbility(gt_UltraMiner, null, AbilityCommand("UltraMiner", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legendary Miner
//--------------------------------------------------------------------------------------------------
bool gt_LegendaryMiner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_legendaryMiner == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/AD96DF8E") + gv_gameTimeMinutesText));
    gv_legendaryMiner = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LegendaryMiner_Init () {
    gt_LegendaryMiner = TriggerCreate("gt_LegendaryMiner_Func");
    TriggerAddEventUnitAbility(gt_LegendaryMiner, null, AbilityCommand("LegendaryMiner", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perfect Miner
//--------------------------------------------------------------------------------------------------
bool gt_PerfectMiner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_perfectMiner == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/F99261A4") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (StringExternal("Param/Value/30BAE4D0") + StringExternal("Param/Value/428D7F3E") + gv_gameTimeMinutesText));
    gv_perfectMiner = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerfectMiner_Init () {
    gt_PerfectMiner = TriggerCreate("gt_PerfectMiner_Func");
    TriggerAddEventUnitAbility(gt_PerfectMiner, null, AbilityCommand("PerfectMiner", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ludicrous Miner
//--------------------------------------------------------------------------------------------------
bool gt_LudicrousMiner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ludicrousMiner == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/A8AE63D6") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (StringExternal("Param/Value/0416804E") + StringExternal("Param/Value/B4795C98") + gv_gameTimeMinutesText));
    gv_ludicrousMiner = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LudicrousMiner_Init () {
    gt_LudicrousMiner = TriggerCreate("gt_LudicrousMiner_Func");
    TriggerAddEventUnitAbility(gt_LudicrousMiner, null, AbilityCommand("LudicrousMiner", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replenish Minerals
//--------------------------------------------------------------------------------------------------
bool gt_ReplenishMinerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 0) && ((UnitGetType(EventUnit()) == "MineralField") || (UnitGetType(EventUnit()) == "RichMineralField"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(EventUnit()), c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    libNtve_gf_UnitCreateFacingPoint(1, "ResourceBlocker", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplenishMinerals_Init () {
    gt_ReplenishMinerals = TriggerCreate("gt_ReplenishMinerals_Func");
    TriggerEnable(gt_ReplenishMinerals, false);
    TriggerAddEventUnitRemoved(gt_ReplenishMinerals, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dominion Train
//--------------------------------------------------------------------------------------------------
bool gt_DominionTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_dominionTrain == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/444B4EF2")));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (StringExternal("Param/Value/BA38B0D8") + StringExternal("Param/Value/47068E8D")));
    gv_dominionTrain = true;
    gf_BonusXPtoProbe5(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DominionTrain_Init () {
    gt_DominionTrain = TriggerCreate("gt_DominionTrain_Func");
    TriggerAddEventUnitAbility(gt_DominionTrain, null, AbilityCommand("GatewayTrain", 11), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gen Max
//--------------------------------------------------------------------------------------------------
bool gt_GenMax_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_genMax == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/1ED44CC0") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (StringExternal("Param/Value/AA2AB608") + StringExternal("Param/Value/B9A50D2D") + gv_gameTimeMinutesText));
    gv_genMax = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenMax_Init () {
    gt_GenMax = TriggerCreate("gt_GenMax_Func");
    TriggerAddEventUnitAbility(gt_GenMax, null, AbilityCommand("UpgradetoGeneratorMax", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_GenMax, null, AbilityCommand("ProtossBuild", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build a Automated Mine Level 6
//--------------------------------------------------------------------------------------------------
bool gt_BuildaAutomatedMineLevel6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel6 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/96ABDE18")));
    gv_buildaAutomatedMineLevel6 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildaAutomatedMineLevel6_Init () {
    gt_BuildaAutomatedMineLevel6 = TriggerCreate("gt_BuildaAutomatedMineLevel6_Func");
    TriggerAddEventUnitAbility(gt_BuildaAutomatedMineLevel6, null, AbilityCommand("Automatedmine", 5), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build a Automated Mine Level 7
//--------------------------------------------------------------------------------------------------
bool gt_BuildaAutomatedMineLevel7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel7 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/15AB712A")));
    gv_buildaAutomatedMineLevel7 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildaAutomatedMineLevel7_Init () {
    gt_BuildaAutomatedMineLevel7 = TriggerCreate("gt_BuildaAutomatedMineLevel7_Func");
    TriggerAddEventUnitAbility(gt_BuildaAutomatedMineLevel7, null, AbilityCommand("Automatedmine", 6), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build a Automated Mine Level 8
//--------------------------------------------------------------------------------------------------
bool gt_BuildaAutomatedMineLevel8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel8 == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/EC12962A")));
    gv_buildaAutomatedMineLevel8 = true;
    gf_BonusXPtoProbe(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildaAutomatedMineLevel8_Init () {
    gt_BuildaAutomatedMineLevel8 = TriggerCreate("gt_BuildaAutomatedMineLevel8_Func");
    TriggerAddEventUnitAbility(gt_BuildaAutomatedMineLevel8, null, AbilityCommand("AutomatedMineLevel8", 0), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Wall Achievement
//--------------------------------------------------------------------------------------------------
bool gt_UltraWallAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ultraWallAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ultraWallAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(69, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraWallAchievement_Init () {
    gt_UltraWallAchievement = TriggerCreate("gt_UltraWallAchievement_Func");
    TriggerAddEventUnitAbility(gt_UltraWallAchievement, null, AbilityCommand("UpgradetoWallLevel6", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mega Wall Achievement
//--------------------------------------------------------------------------------------------------
bool gt_MegaWallAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_megaWallAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_megaWallAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(70, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MegaWallAchievement_Init () {
    gt_MegaWallAchievement = TriggerCreate("gt_MegaWallAchievement_Func");
    TriggerAddEventUnitAbility(gt_MegaWallAchievement, null, AbilityCommand("UpgradetoWallLevel11", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Wall Achievement
//--------------------------------------------------------------------------------------------------
bool gt_PowerWallAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_powerWallAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerWallAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(71, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerWallAchievement_Init () {
    gt_PowerWallAchievement = TriggerCreate("gt_PowerWallAchievement_Func");
    TriggerAddEventUnitAbility(gt_PowerWallAchievement, null, AbilityCommand("UpgradetoWallLevel16", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Wall Achievement
//--------------------------------------------------------------------------------------------------
bool gt_FinalWallAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_finalWallAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_finalWallAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(72, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalWallAchievement_Init () {
    gt_FinalWallAchievement = TriggerCreate("gt_FinalWallAchievement_Func");
    TriggerAddEventUnitAbility(gt_FinalWallAchievement, null, AbilityCommand("UpgradetoWallMax", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 7 Achievement
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel7Achievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel7Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_turretLevel7Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(73, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel7Achievement_Init () {
    gt_TurretLevel7Achievement = TriggerCreate("gt_TurretLevel7Achievement_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel7Achievement, null, AbilityCommand("UpgradetoTurretlevel7", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 11 Achievement
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel11Achievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel11Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_turretLevel11Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(74, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel11Achievement_Init () {
    gt_TurretLevel11Achievement = TriggerCreate("gt_TurretLevel11Achievement_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel11Achievement, null, AbilityCommand("UpgradetoTurretlevel11", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turret Level 13 Achievement
//--------------------------------------------------------------------------------------------------
bool gt_TurretLevel13Achievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_turretLevel13Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_turretLevel13Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(75, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurretLevel13Achievement_Init () {
    gt_TurretLevel13Achievement = TriggerCreate("gt_TurretLevel13Achievement_Func");
    TriggerAddEventUnitAbility(gt_TurretLevel13Achievement, null, AbilityCommand("UpgradetoTurretlevel13", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultra Miner Achievement
//--------------------------------------------------------------------------------------------------
bool gt_UltraMinerAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_ultraMinerAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ultraMinerAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(76, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UltraMinerAchievement_Init () {
    gt_UltraMinerAchievement = TriggerCreate("gt_UltraMinerAchievement_Func");
    TriggerAddEventUnitAbility(gt_UltraMinerAchievement, null, AbilityCommand("UltraMiner", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Legendary Miner Achievement
//--------------------------------------------------------------------------------------------------
bool gt_LegendaryMinerAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_legendaryMinerAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_legendaryMinerAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(77, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LegendaryMinerAchievement_Init () {
    gt_LegendaryMinerAchievement = TriggerCreate("gt_LegendaryMinerAchievement_Func");
    TriggerAddEventUnitAbility(gt_LegendaryMinerAchievement, null, AbilityCommand("LegendaryMiner", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perfect Miner Achievement
//--------------------------------------------------------------------------------------------------
bool gt_PerfectMinerAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_perfectMinerAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_perfectMinerAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(78, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerfectMinerAchievement_Init () {
    gt_PerfectMinerAchievement = TriggerCreate("gt_PerfectMinerAchievement_Func");
    TriggerAddEventUnitAbility(gt_PerfectMinerAchievement, null, AbilityCommand("PerfectMiner", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gen Max Achievement
//--------------------------------------------------------------------------------------------------
bool gt_GenMaxAchievement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_genMaxAchievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_genMaxAchievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(79, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenMaxAchievement_Init () {
    gt_GenMaxAchievement = TriggerCreate("gt_GenMaxAchievement_Func");
    TriggerAddEventUnitAbility(gt_GenMaxAchievement, null, AbilityCommand("UpgradetoGeneratorMax", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automated Mine Level 6
//--------------------------------------------------------------------------------------------------
bool gt_AutomatedMineLevel6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel6Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buildaAutomatedMineLevel6Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(80, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomatedMineLevel6_Init () {
    gt_AutomatedMineLevel6 = TriggerCreate("gt_AutomatedMineLevel6_Func");
    TriggerAddEventUnitAbility(gt_AutomatedMineLevel6, null, AbilityCommand("Automatedmine", 5), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automated Mine Level 7
//--------------------------------------------------------------------------------------------------
bool gt_AutomatedMineLevel7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel7Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buildaAutomatedMineLevel7Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(81, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomatedMineLevel7_Init () {
    gt_AutomatedMineLevel7 = TriggerCreate("gt_AutomatedMineLevel7_Func");
    TriggerAddEventUnitAbility(gt_AutomatedMineLevel7, null, AbilityCommand("Automatedmine", 6), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automated Mine Level 8
//--------------------------------------------------------------------------------------------------
bool gt_AutomatedMineLevel8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_buildaAutomatedMineLevel8Achievement[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buildaAutomatedMineLevel8Achievement[EventPlayer()] = true;
    gf_CheckStatusofAchievement(82, EventPlayer(), "Human");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomatedMineLevel8_Init () {
    gt_AutomatedMineLevel8 = TriggerCreate("gt_AutomatedMineLevel8_Func");
    TriggerAddEventUnitAbility(gt_AutomatedMineLevel8, null, AbilityCommand("AutomatedMineLevel8", 0), c_abilBuildStageConstruct, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vespene
//--------------------------------------------------------------------------------------------------
bool gt_Vespene_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotVespene == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4A6B43BB") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/DC66B7C3") + gv_gameTimeMinutesText));
    gv_zealotVespene = true;
    gf_BonusXPtoZealot5(EventPlayer());
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vespene_Init () {
    gt_Vespene = TriggerCreate("gt_Vespene_Func");
    TriggerAddEventUnitAbility(gt_Vespene, null, AbilityCommand("Purchase1Vespene", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Blade
//--------------------------------------------------------------------------------------------------
bool gt_FinalBlade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotFinalBlade == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(gv_playerGroupProbes, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0AF83D67") + gv_gameTimeMinutesText));
    UIDisplayMessage(gv_playerGroupZealots, c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4349AAED") + gv_gameTimeMinutesText));
    gv_zealotVespene = true;
    gf_BonusXPtoZealot(EventPlayer());
    libNtve_gf_SetUpgradeLevelForPlayer(0, "DisableBoots", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(0, "EnableBoots", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalBlade_Init () {
    gt_FinalBlade = TriggerCreate("gt_FinalBlade_Func");
    TriggerAddEventUnitAbility(gt_FinalBlade, null, AbilityCommand("Train3", 24), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Ultimate Blade
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseUltimateBlade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_purchaseUltimateBlade[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purchaseUltimateBlade[EventPlayer()] = true;
    gf_CheckStatusofAchievement(73, EventPlayer(), "Vampire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseUltimateBlade_Init () {
    gt_PurchaseUltimateBlade = TriggerCreate("gt_PurchaseUltimateBlade_Func");
    TriggerAddEventUnitAbility(gt_PurchaseUltimateBlade, null, AbilityCommand("PurchaseUltimateBlade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Super Gloves
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseSuperGloves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_purchaseSuperGloves[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purchaseSuperGloves[EventPlayer()] = true;
    gf_CheckStatusofAchievement(74, EventPlayer(), "Vampire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseSuperGloves_Init () {
    gt_PurchaseSuperGloves = TriggerCreate("gt_PurchaseSuperGloves_Func");
    TriggerAddEventUnitAbility(gt_PurchaseSuperGloves, null, AbilityCommand("PurchaseSuperGloves", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Nanocrystalline Diamond Armor
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseNanocrystallineDiamondArmor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_purchaseNanocrystallineDiamondArmor[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purchaseNanocrystallineDiamondArmor[EventPlayer()] = true;
    gf_CheckStatusofAchievement(75, EventPlayer(), "Vampire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseNanocrystallineDiamondArmor_Init () {
    gt_PurchaseNanocrystallineDiamondArmor = TriggerCreate("gt_PurchaseNanocrystallineDiamondArmor_Func");
    TriggerAddEventUnitAbility(gt_PurchaseNanocrystallineDiamondArmor, null, AbilityCommand("PurchaseNanocrystallineDiamondArmor", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Diamond Amulet
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseDiamondAmulet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_purchaseDiamondAmulet[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purchaseDiamondAmulet[EventPlayer()] = true;
    gf_CheckStatusofAchievement(76, EventPlayer(), "Vampire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseDiamondAmulet_Init () {
    gt_PurchaseDiamondAmulet = TriggerCreate("gt_PurchaseDiamondAmulet_Func");
    TriggerAddEventUnitAbility(gt_PurchaseDiamondAmulet, null, AbilityCommand("PurchaseDiamondAmulet", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Ultimate Regeneration Potion
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseUltimateRegenerationPotion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_purchaseUltimateRegenerationPotion[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_purchaseUltimateRegenerationPotion[EventPlayer()] = true;
    gf_CheckStatusofAchievement(77, EventPlayer(), "Vampire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseUltimateRegenerationPotion_Init () {
    gt_PurchaseUltimateRegenerationPotion = TriggerCreate("gt_PurchaseUltimateRegenerationPotion_Func");
    TriggerAddEventUnitAbility(gt_PurchaseUltimateRegenerationPotion, null, AbilityCommand("PurchaseUltimateRegenerationPotion", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory/Defeat Conditions Probe Dies
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeatConditionsProbeDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoF0678998_ae = 14;
    const int autoF0678998_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gf_NumberofAliveHumans() == 0) && (gv_gameEnd == false) && (gv_startRecording == true))) {
        gv_gameEnd = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D99A6C1B"));
        lv_i = 1;
        for ( ; ( (autoF0678998_ai >= 0 && lv_i <= autoF0678998_ae) || (autoF0678998_ai < 0 && lv_i >= autoF0678998_ae) ) ; lv_i += autoF0678998_ai ) {
            if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && (UnitIsAlive(gv_zealots[lv_i]) == true))) {
                gv_playerWin[lv_i] = true;
                if ((gv_rankedGame == true)) {
                    gv_pointsforWinVampire[lv_i] = gf_CalculatePointsMinMaxforTime(gv_pointsforWinVampire[lv_i], true);
                    BankLoad("ProbesvZealot2", lv_i);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins) + 1));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins) + 1));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points) + gv_pointsforWinVampire[lv_i]));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points)) / 2));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak) + 1));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak) + 1));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinVampire, gv_pointsforWinVampire[lv_i]);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinTotal, gv_pointsforWinTotal[lv_i]);
                    BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, true);
                    BankSave(gv_banks[lv_i]);
                    gv_xPinGameforVampire[lv_i] += 100;
                    gv_xPinGameforTotal[lv_i] += 100;
                    gv_xPofPlayerVampire[lv_i] += 100;
                    gv_levelofPlayerVampire[lv_i] = gf_GetLevelofPlayer(gv_xPofPlayerVampire[lv_i]);
                    gf_UpdateXPBar(lv_i);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire, gv_xPinGameforVampire[lv_i]);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lv_i]);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP) + gv_xPinGameforHuman[lv_i]));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP) + gv_xPinGameforVampire[lv_i]));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP) + gv_xPinGameforTotal[lv_i]));
                    BankSave(gv_banks[lv_i]);
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/68D8A3B6") + (IntToText(gv_pointsforWinVampire[lv_i]) + StringExternal("Param/Value/3803D112"))));
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/D0F21E57") + (IntToText(gv_xPinGameforVampire[lv_i]) + StringExternal("Param/Value/9B54019E"))));
                }

            }

            if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                if ((gv_rankedGame == true)) {
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, 0);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_winningStreak, 0);
                    BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, false);
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP) + gv_xPinGameforHuman[lv_i]));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP) + gv_xPinGameforVampire[lv_i]));
                    BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP) + gv_xPinGameforTotal[lv_i]));
                    BankSave(gv_banks[lv_i]);
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/65B80396") + (IntToText(gv_pointsforLossHuman[lv_i]) + StringExternal("Param/Value/FCD26E90"))));
                    UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/EB7DA983") + (IntToText(gv_xPinGameforHuman[lv_i]) + StringExternal("Param/Value/58829805"))));
                }

            }

        }
        if ((gv_rankedGame == true)) {
            TriggerExecute(gt_CheckAchievements, true, false);
            TriggerExecute(gt_CheckStatusofRewards, true, false);
        }

        gv_probesWins = false;
        Wait(10.0, c_timeGame);
        TriggerExecute(gt_RegameInit, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeatConditionsProbeDies_Init () {
    gt_VictoryDefeatConditionsProbeDies = TriggerCreate("gt_VictoryDefeatConditionsProbeDies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory/Defeat Conditions Zealot Dies
//--------------------------------------------------------------------------------------------------
bool gt_VictoryDefeatConditionsZealotDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6C77C29D_ae = 14;
    const int auto6C77C29D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/43D6B206"));
    lv_i = 1;
    for ( ; ( (auto6C77C29D_ai >= 0 && lv_i <= auto6C77C29D_ae) || (auto6C77C29D_ai < 0 && lv_i >= auto6C77C29D_ae) ) ; lv_i += auto6C77C29D_ai ) {
        if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && ((UnitIsAlive(gv_probes[lv_i]) == true) || (gv_probeSpiritStatus[lv_i] == true)))) {
            gv_playerWin[lv_i] = true;
            if ((gv_rankedGame == true)) {
                gv_pointsforWinHuman[lv_i] = gf_CalculatePointsMinMaxforTime(gv_pointsforWinHuman[lv_i], UnitIsAlive(gv_probes[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins) + 1));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins) + 1));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) + gv_pointsforWinHuman[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, ((BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points) + BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points)) / 2));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak) + 1));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_winningStreak, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_winningStreak) + 1));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinHuman, gv_pointsforWinHuman[lv_i]);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_pointsWinTotal, gv_pointsforWinTotal[lv_i]);
                BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, true);
                BankSave(gv_banks[lv_i]);
                gv_xPinGameforHuman[lv_i] += 100;
                gv_xPinGameforTotal[lv_i] += 100;
                gv_xPofPlayerHuman[lv_i] += 100;
                gv_levelofPlayerHuman[lv_i] = gf_GetLevelofPlayer(gv_xPofPlayerHuman[lv_i]);
                gf_UpdateXPBar(lv_i);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman, gv_xPinGameforHuman[lv_i]);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lv_i]);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP) + gv_xPinGameforHuman[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP) + gv_xPinGameforVampire[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP) + gv_xPinGameforTotal[lv_i]));
                BankSave(gv_banks[lv_i]);
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/01F7916E") + (IntToText(gv_pointsforWinHuman[lv_i]) + StringExternal("Param/Value/9764BB0C"))));
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/05A331DA") + (IntToText(gv_xPinGameforHuman[lv_i]) + StringExternal("Param/Value/26B3ED68"))));
            }

        }

        if (((PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive) && ((gv_side[lv_i] == "Zealot") || (gv_hunterStatus[lv_i] == true)))) {
            if ((gv_rankedGame == true)) {
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_winningStreak, 0);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_winningStreak, 0);
                BankValueSetFromFlag(gv_banks[lv_i], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_winPreviousGame, false);
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP) + gv_xPinGameforHuman[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP) + gv_xPinGameforVampire[lv_i]));
                BankValueSetFromInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, (BankValueGetAsInt(gv_banks[lv_i], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP) + gv_xPinGameforTotal[lv_i]));
                BankSave(gv_banks[lv_i]);
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/E1027319") + (IntToText(gv_pointsforLossVampire[lv_i]) + StringExternal("Param/Value/772E418E"))));
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaDebug, (StringExternal("Param/Value/8C9C1E6E") + (IntToText(gv_xPinGameforVampire[lv_i]) + StringExternal("Param/Value/DC2C7649"))));
            }

        }

    }
    if ((gv_rankedGame == true)) {
        TriggerExecute(gt_CheckAchievements, true, false);
        TriggerExecute(gt_CheckStatusofRewards, true, false);
    }

    gv_probesWins = true;
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_RegameInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryDefeatConditionsZealotDies_Init () {
    gt_VictoryDefeatConditionsZealotDies = TriggerCreate("gt_VictoryDefeatConditionsZealotDies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable Trading
//--------------------------------------------------------------------------------------------------
bool gt_EnableTrading_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_enableTrading = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnableTrading_Init () {
    gt_EnableTrading = TriggerCreate("gt_EnableTrading_Func");
    TriggerAddEventTimer(gt_EnableTrading, gv_timerEnableTrading);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit is Selected
//--------------------------------------------------------------------------------------------------
bool gt_UnitisSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_ownerofSelectedUnit[EventPlayer()] = UnitGetOwner(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitisSelected_Init () {
    gt_UnitisSelected = TriggerCreate("gt_UnitisSelected_Func");
    TriggerAddEventUnitSelected(gt_UnitisSelected, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Minerals to Player
//--------------------------------------------------------------------------------------------------
bool gt_GiveMineralstoPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_integerAmount;
    string lv_stringAmount;
    int lv_amountUnit;

    // Automatic Variable Declarations
    string auto10F274B5_val;
    string auto1BAF02E1_val;

    // Variable Initialization
    lv_stringAmount = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if(GameAttributeGameValue("1") == "0005"){return true;}

    lv_stringAmount = StringWord(EventChatMessage(false), 2);
    auto10F274B5_val = StringSub(lv_stringAmount, StringLength(lv_stringAmount), StringLength(lv_stringAmount));
    if (auto10F274B5_val == "k") {
        auto1BAF02E1_val = StringSub(lv_stringAmount, (StringLength(lv_stringAmount) - 1), StringLength(lv_stringAmount));
        if (auto1BAF02E1_val == "kk") {
            lv_amountUnit = 1000000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 2));
        }
        else {
            lv_amountUnit = 1000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
        }
    }
    else if (auto10F274B5_val == "m") {
        lv_amountUnit = 1000000;
        lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
    }
    else {
        lv_amountUnit = 1;
    }
    lv_integerAmount = StringToInt(lv_stringAmount);
    if ((lv_integerAmount > 0)) {
        lv_integerAmount = (lv_integerAmount * lv_amountUnit);
        gf_GiveResourcestoPlayer(EventPlayer(), gv_ownerofSelectedUnit[EventPlayer()], c_playerPropMinerals, lv_integerAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveMineralstoPlayer_Init () {
    gt_GiveMineralstoPlayer = TriggerCreate("gt_GiveMineralstoPlayer_Func");
    TriggerAddEventChatMessage(gt_GiveMineralstoPlayer, c_playerAny, "-m ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Vespene to Player
//--------------------------------------------------------------------------------------------------
bool gt_GiveVespenetoPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_integerAmount;
    string lv_stringAmount;
    int lv_amountUnit;

    // Automatic Variable Declarations
    string auto8D5FF99D_val;
    string auto422636AF_val;

    // Variable Initialization
    lv_stringAmount = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if(GameAttributeGameValue("1") == "0005"){return true;}

    lv_stringAmount = StringWord(EventChatMessage(false), 2);
    auto8D5FF99D_val = StringSub(lv_stringAmount, StringLength(lv_stringAmount), StringLength(lv_stringAmount));
    if (auto8D5FF99D_val == "k") {
        auto422636AF_val = StringSub(lv_stringAmount, (StringLength(lv_stringAmount) - 1), StringLength(lv_stringAmount));
        if (auto422636AF_val == "kk") {
            lv_amountUnit = 1000000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 2));
        }
        else {
            lv_amountUnit = 1000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
        }
    }
    else if (auto8D5FF99D_val == "m") {
        lv_amountUnit = 1000000;
        lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
    }
    else {
        lv_amountUnit = 1;
    }
    lv_integerAmount = StringToInt(lv_stringAmount);
    if ((lv_integerAmount > 0)) {
        lv_integerAmount = (lv_integerAmount * lv_amountUnit);
        gf_GiveResourcestoPlayer(EventPlayer(), gv_ownerofSelectedUnit[EventPlayer()], c_playerPropVespene, lv_integerAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveVespenetoPlayer_Init () {
    gt_GiveVespenetoPlayer = TriggerCreate("gt_GiveVespenetoPlayer_Func");
    TriggerAddEventChatMessage(gt_GiveVespenetoPlayer, c_playerAny, "-v ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Both Button
//--------------------------------------------------------------------------------------------------
bool gt_GiveBothButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_flag[EventPlayer()] = 1;
    gf_GiveResourcestoPlayer(EventPlayer(), gv_ownerofSelectedUnit[EventPlayer()], c_playerPropVespene, 99999999);
    gv_flag[EventPlayer()] = 1;
    gf_GiveResourcestoPlayer(EventPlayer(), gv_ownerofSelectedUnit[EventPlayer()], c_playerPropMinerals, 99999999);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveBothButton_Init () {
    gt_GiveBothButton = TriggerCreate("gt_GiveBothButton_Func");
    TriggerAddEventUnitAbility(gt_GiveBothButton, null, AbilityCommand("GiveResources", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Remove Expires
//--------------------------------------------------------------------------------------------------
bool gt_TimerRemoveExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto475CBAC4_val;
    unitgroup autoC8EB12C4_g;
    int autoC8EB12C4_u;
    unit autoC8EB12C4_var;
    unitgroup autoE9CC5AA8_g;
    int autoE9CC5AA8_u;
    unit autoE9CC5AA8_var;
    unitgroup auto81D0EDEC_g;
    int auto81D0EDEC_u;
    unit auto81D0EDEC_var;
    unitgroup auto268DC9BD_g;
    int auto268DC9BD_u;
    unit auto268DC9BD_var;
    unitgroup auto80A6F360_g;
    int auto80A6F360_u;
    unit auto80A6F360_var;
    unitgroup autoF54940A7_g;
    int autoF54940A7_u;
    unit autoF54940A7_var;
    unitgroup auto336BB22A_g;
    int auto336BB22A_u;
    unit auto336BB22A_var;
    unitgroup auto98918942_g;
    int auto98918942_u;
    unit auto98918942_var;
    unitgroup autoA8019CB9_g;
    int autoA8019CB9_u;
    unit autoA8019CB9_var;
    unitgroup autoD80E1CEA_g;
    int autoD80E1CEA_u;
    unit autoD80E1CEA_var;
    unitgroup auto1BCA6F62_g;
    int auto1BCA6F62_u;
    unit auto1BCA6F62_var;
    unitgroup autoEBD619D8_g;
    int autoEBD619D8_u;
    unit autoEBD619D8_var;
    unitgroup autoD10D6A93_g;
    int autoD10D6A93_u;
    unit autoD10D6A93_var;
    unitgroup autoB15E8FE7_g;
    int autoB15E8FE7_u;
    unit autoB15E8FE7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto475CBAC4_val = EventTimer();
    if (auto475CBAC4_val == gv_timerRemove[1]) {
        autoC8EB12C4_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoC8EB12C4_u = UnitGroupCount(autoC8EB12C4_g, c_unitCountAll);
        for (;; autoC8EB12C4_u -= 1) {
            autoC8EB12C4_var = UnitGroupUnitFromEnd(autoC8EB12C4_g, autoC8EB12C4_u);
            if (autoC8EB12C4_var == null) { break; }
            if ((UnitHasBehavior(autoC8EB12C4_var, "Removing") == true)) {
                UnitRemove(autoC8EB12C4_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[2]) {
        autoE9CC5AA8_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoE9CC5AA8_u = UnitGroupCount(autoE9CC5AA8_g, c_unitCountAll);
        for (;; autoE9CC5AA8_u -= 1) {
            autoE9CC5AA8_var = UnitGroupUnitFromEnd(autoE9CC5AA8_g, autoE9CC5AA8_u);
            if (autoE9CC5AA8_var == null) { break; }
            if ((UnitHasBehavior(autoE9CC5AA8_var, "Removing") == true)) {
                UnitRemove(autoE9CC5AA8_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[3]) {
        auto81D0EDEC_g = UnitGroup(null, 3, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto81D0EDEC_u = UnitGroupCount(auto81D0EDEC_g, c_unitCountAll);
        for (;; auto81D0EDEC_u -= 1) {
            auto81D0EDEC_var = UnitGroupUnitFromEnd(auto81D0EDEC_g, auto81D0EDEC_u);
            if (auto81D0EDEC_var == null) { break; }
            if ((UnitHasBehavior(auto81D0EDEC_var, "Removing") == true)) {
                UnitRemove(auto81D0EDEC_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[4]) {
        auto268DC9BD_g = UnitGroup(null, 4, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto268DC9BD_u = UnitGroupCount(auto268DC9BD_g, c_unitCountAll);
        for (;; auto268DC9BD_u -= 1) {
            auto268DC9BD_var = UnitGroupUnitFromEnd(auto268DC9BD_g, auto268DC9BD_u);
            if (auto268DC9BD_var == null) { break; }
            if ((UnitHasBehavior(auto268DC9BD_var, "Removing") == true)) {
                UnitRemove(auto268DC9BD_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[5]) {
        auto80A6F360_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto80A6F360_u = UnitGroupCount(auto80A6F360_g, c_unitCountAll);
        for (;; auto80A6F360_u -= 1) {
            auto80A6F360_var = UnitGroupUnitFromEnd(auto80A6F360_g, auto80A6F360_u);
            if (auto80A6F360_var == null) { break; }
            if ((UnitHasBehavior(auto80A6F360_var, "Removing") == true)) {
                UnitRemove(auto80A6F360_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[6]) {
        autoF54940A7_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoF54940A7_u = UnitGroupCount(autoF54940A7_g, c_unitCountAll);
        for (;; autoF54940A7_u -= 1) {
            autoF54940A7_var = UnitGroupUnitFromEnd(autoF54940A7_g, autoF54940A7_u);
            if (autoF54940A7_var == null) { break; }
            if ((UnitHasBehavior(autoF54940A7_var, "Removing") == true)) {
                UnitRemove(autoF54940A7_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[7]) {
        auto336BB22A_g = UnitGroup(null, 7, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto336BB22A_u = UnitGroupCount(auto336BB22A_g, c_unitCountAll);
        for (;; auto336BB22A_u -= 1) {
            auto336BB22A_var = UnitGroupUnitFromEnd(auto336BB22A_g, auto336BB22A_u);
            if (auto336BB22A_var == null) { break; }
            if ((UnitHasBehavior(auto336BB22A_var, "Removing") == true)) {
                UnitRemove(auto336BB22A_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[8]) {
        auto98918942_g = UnitGroup(null, 8, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto98918942_u = UnitGroupCount(auto98918942_g, c_unitCountAll);
        for (;; auto98918942_u -= 1) {
            auto98918942_var = UnitGroupUnitFromEnd(auto98918942_g, auto98918942_u);
            if (auto98918942_var == null) { break; }
            if ((UnitHasBehavior(auto98918942_var, "Removing") == true)) {
                UnitRemove(auto98918942_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[9]) {
        autoA8019CB9_g = UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoA8019CB9_u = UnitGroupCount(autoA8019CB9_g, c_unitCountAll);
        for (;; autoA8019CB9_u -= 1) {
            autoA8019CB9_var = UnitGroupUnitFromEnd(autoA8019CB9_g, autoA8019CB9_u);
            if (autoA8019CB9_var == null) { break; }
            if ((UnitHasBehavior(autoA8019CB9_var, "Removing") == true)) {
                UnitRemove(autoA8019CB9_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[10]) {
        autoD80E1CEA_g = UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoD80E1CEA_u = UnitGroupCount(autoD80E1CEA_g, c_unitCountAll);
        for (;; autoD80E1CEA_u -= 1) {
            autoD80E1CEA_var = UnitGroupUnitFromEnd(autoD80E1CEA_g, autoD80E1CEA_u);
            if (autoD80E1CEA_var == null) { break; }
            if ((UnitHasBehavior(autoD80E1CEA_var, "Removing") == true)) {
                UnitRemove(autoD80E1CEA_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[11]) {
        auto1BCA6F62_g = UnitGroup(null, 11, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1BCA6F62_u = UnitGroupCount(auto1BCA6F62_g, c_unitCountAll);
        for (;; auto1BCA6F62_u -= 1) {
            auto1BCA6F62_var = UnitGroupUnitFromEnd(auto1BCA6F62_g, auto1BCA6F62_u);
            if (auto1BCA6F62_var == null) { break; }
            if ((UnitHasBehavior(auto1BCA6F62_var, "Removing") == true)) {
                UnitRemove(auto1BCA6F62_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[12]) {
        autoEBD619D8_g = UnitGroup(null, 12, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoEBD619D8_u = UnitGroupCount(autoEBD619D8_g, c_unitCountAll);
        for (;; autoEBD619D8_u -= 1) {
            autoEBD619D8_var = UnitGroupUnitFromEnd(autoEBD619D8_g, autoEBD619D8_u);
            if (autoEBD619D8_var == null) { break; }
            if ((UnitHasBehavior(autoEBD619D8_var, "Removing") == true)) {
                UnitRemove(autoEBD619D8_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[13]) {
        autoD10D6A93_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoD10D6A93_u = UnitGroupCount(autoD10D6A93_g, c_unitCountAll);
        for (;; autoD10D6A93_u -= 1) {
            autoD10D6A93_var = UnitGroupUnitFromEnd(autoD10D6A93_g, autoD10D6A93_u);
            if (autoD10D6A93_var == null) { break; }
            if ((UnitHasBehavior(autoD10D6A93_var, "Removing") == true)) {
                UnitRemove(autoD10D6A93_var);
            }

        }
    }
    else if (auto475CBAC4_val == gv_timerRemove[14]) {
        autoB15E8FE7_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoB15E8FE7_u = UnitGroupCount(autoB15E8FE7_g, c_unitCountAll);
        for (;; autoB15E8FE7_u -= 1) {
            autoB15E8FE7_var = UnitGroupUnitFromEnd(autoB15E8FE7_g, autoB15E8FE7_u);
            if (autoB15E8FE7_var == null) { break; }
            if ((UnitHasBehavior(autoB15E8FE7_var, "Removing") == true)) {
                UnitRemove(autoB15E8FE7_var);
            }

        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerRemoveExpires_Init () {
    gt_TimerRemoveExpires = TriggerCreate("gt_TimerRemoveExpires_Func");
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[1]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[2]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[3]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[4]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[5]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[6]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[7]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[8]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[9]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[10]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[11]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[12]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[13]);
    TriggerAddEventTimer(gt_TimerRemoveExpires, gv_timerRemove[14]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Left the Game Alive
//--------------------------------------------------------------------------------------------------
bool gt_ProbeLefttheGameAlive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_numberofAliveHumans;

    // Automatic Variable Declarations
    unitgroup auto5496484D_g;
    int auto5496484D_u;
    unit auto5496484D_var;
    unitgroup auto5F6958B4_g;
    int auto5F6958B4_u;
    unit auto5F6958B4_var;
    unitgroup auto778173AE_g;
    int auto778173AE_u;
    unit auto778173AE_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_playerGroupProbes, EventPlayer()) == true) && (PlayerType(EventPlayer()) == c_playerTypeUser) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft) && (UnitIsAlive(gv_probes[EventPlayer()]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateRequiredVotes();
    gf_UpdateKickBoard();
    TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == true)) {
        gf_UpdateKickVotes(EventPlayer());
    }

    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/AB4E387F"));
    if ((gv_gameEnd == false)) {
        if ((gv_startRecording == true)) {
            TimerStart(gv_timerRemove[EventPlayer()], gf_PvZ2Time(30.0), false, c_timeGame);
            UnitSetHeight(gv_probes[EventPlayer()], 1.0, 0.0);
            UnitBehaviorAdd(gv_probes[EventPlayer()], "BuilderRemove", gv_probes[EventPlayer()], 1);
            gv_probes[EventPlayer()] = null;
            auto5F6958B4_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto5F6958B4_u = UnitGroupCount(auto5F6958B4_g, c_unitCountAll);
            for (;; auto5F6958B4_u -= 1) {
                auto5F6958B4_var = UnitGroupUnitFromEnd(auto5F6958B4_g, auto5F6958B4_u);
                if (auto5F6958B4_var == null) { break; }
                UnitBehaviorAdd(auto5F6958B4_var, "Removing", auto5F6958B4_var, 1);
                ActorSend(libNtve_gf_MainActorofUnit(auto5F6958B4_var), "SetOpacity 0.000000 30.000000");
            }
            lv_numberofAliveHumans = gf_NumberofAliveHumans();
            gf_SplitResourcesHuman(EventPlayer(), lv_numberofAliveHumans);
        }
        else {
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            auto5496484D_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto5496484D_u = UnitGroupCount(auto5496484D_g, c_unitCountAll);
            for (;; auto5496484D_u -= 1) {
                auto5496484D_var = UnitGroupUnitFromEnd(auto5496484D_g, auto5496484D_u);
                if (auto5496484D_var == null) { break; }
                UnitRemove(auto5496484D_var);
            }
        }
        TriggerExecute(gt_VictoryDefeatConditionsProbeDies, true, true);
    }
    else {
        auto778173AE_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto778173AE_u = UnitGroupCount(auto778173AE_g, c_unitCountAll);
        for (;; auto778173AE_u -= 1) {
            auto778173AE_var = UnitGroupUnitFromEnd(auto778173AE_g, auto778173AE_u);
            if (auto778173AE_var == null) { break; }
            UnitRemove(auto778173AE_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeLefttheGameAlive_Init () {
    gt_ProbeLefttheGameAlive = TriggerCreate("gt_ProbeLefttheGameAlive_Func");
    TriggerAddEventPlayerLeft(gt_ProbeLefttheGameAlive, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Left the Game Dead
//--------------------------------------------------------------------------------------------------
bool gt_ProbeLefttheGameDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_numberofHumans;

    // Automatic Variable Declarations
    const int auto0E664F99_ae = 14;
    const int auto0E664F99_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_playerGroupProbes, EventPlayer()) == true) && (PlayerType(EventPlayer()) == c_playerTypeUser) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft) && (UnitIsAlive(gv_probes[EventPlayer()]) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateRequiredVotes();
    gf_UpdateKickBoard();
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == true)) {
        gf_UpdateKickVotes(EventPlayer());
    }

    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/33EDBF23"));
    if ((UnitIsAlive(gv_probeSpirit[EventPlayer()]) == true)) {
        UnitRemove(gv_probeSpirit[EventPlayer()]);
    }

    if ((gv_startRecording == false)) {
        lv_i = 1;
        for ( ; ( (auto0E664F99_ai >= 0 && lv_i <= auto0E664F99_ae) || (auto0E664F99_ai < 0 && lv_i >= auto0E664F99_ae) ) ; lv_i += auto0E664F99_ai ) {
            if (((gv_side[lv_i] != "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                lv_numberofHumans += 1;
            }

        }
        if (((lv_numberofHumans == 0) && (gv_gameEnd == false))) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/3ADEAA41"));
            gv_gameEnd = true;
            Wait(3.0, c_timeGame);
            TriggerExecute(gt_RegameInit, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeLefttheGameDead_Init () {
    gt_ProbeLefttheGameDead = TriggerCreate("gt_ProbeLefttheGameDead_Func");
    TriggerEnable(gt_ProbeLefttheGameDead, false);
    TriggerAddEventPlayerLeft(gt_ProbeLefttheGameDead, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Left the Game Alive
//--------------------------------------------------------------------------------------------------
bool gt_ZealotLefttheGameAlive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_numberofAliveVampires;

    // Automatic Variable Declarations
    unitgroup autoCEB6ECA6_g;
    int autoCEB6ECA6_u;
    unit autoCEB6ECA6_var;
    unitgroup autoF42E1AB2_g;
    int autoF42E1AB2_u;
    unit autoF42E1AB2_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_playerGroupZealots, EventPlayer()) == true) && (PlayerType(EventPlayer()) == c_playerTypeUser) && (UnitIsAlive(gv_zealots[EventPlayer()]) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateRequiredVotes();
    gf_UpdateKickBoard();
    TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == true)) {
        gf_UpdateKickVotes(EventPlayer());
    }

    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/E755ABFA"));
    if ((gv_gameEnd == false)) {
        gf_SplitResourcesVampire(EventPlayer());
        if ((gv_side[EventPlayer()] == "Zealot")) {
            gv_gameEnd = true;
            autoF42E1AB2_g = UnitGroup("Predator", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF42E1AB2_u = UnitGroupCount(autoF42E1AB2_g, c_unitCountAll);
            for (;; autoF42E1AB2_u -= 1) {
                autoF42E1AB2_var = UnitGroupUnitFromEnd(autoF42E1AB2_g, autoF42E1AB2_u);
                if (autoF42E1AB2_var == null) { break; }
                UnitRemove(autoF42E1AB2_var);
            }
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
            TriggerExecute(gt_VictoryDefeatConditionsZealotDies, true, true);
        }

    }
    else {
        autoCEB6ECA6_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32))), 0);
        autoCEB6ECA6_u = UnitGroupCount(autoCEB6ECA6_g, c_unitCountAll);
        for (;; autoCEB6ECA6_u -= 1) {
            autoCEB6ECA6_var = UnitGroupUnitFromEnd(autoCEB6ECA6_g, autoCEB6ECA6_u);
            if (autoCEB6ECA6_var == null) { break; }
            UnitRemove(autoCEB6ECA6_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotLefttheGameAlive_Init () {
    gt_ZealotLefttheGameAlive = TriggerCreate("gt_ZealotLefttheGameAlive_Func");
    TriggerAddEventPlayerLeft(gt_ZealotLefttheGameAlive, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Left the Game Dead
//--------------------------------------------------------------------------------------------------
bool gt_ZealotLefttheGameDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_numberofVampires;

    // Automatic Variable Declarations
    const int auto831FF3C3_ae = 14;
    const int auto831FF3C3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerGroupHasPlayer(gv_playerGroupZealots, EventPlayer()) == true) && (PlayerType(EventPlayer()) == c_playerTypeUser) && (UnitIsAlive(gv_zealots[EventPlayer()]) == false) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UpdateRequiredVotes();
    gf_UpdateKickBoard();
    if ((gv_voteKickVoteBoardVotedAlready[EventPlayer()] == true)) {
        gf_UpdateKickVotes(EventPlayer());
    }

    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/D1B2D61D"));
    if ((gv_startRecording == false)) {
        lv_i = 1;
        for ( ; ( (auto831FF3C3_ai >= 0 && lv_i <= auto831FF3C3_ae) || (auto831FF3C3_ai < 0 && lv_i >= auto831FF3C3_ae) ) ; lv_i += auto831FF3C3_ai ) {
            if (((gv_side[lv_i] == "Zealot") && (PlayerType(lv_i) == c_playerTypeUser) && (PlayerStatus(lv_i) == c_playerStatusActive))) {
                lv_numberofVampires += 1;
            }

        }
        if (((lv_numberofVampires == 0) && (gv_gameEnd == false))) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/75E99FE2"));
            gv_gameEnd = true;
            Wait(3.0, c_timeGame);
            TriggerExecute(gt_RegameInit, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotLefttheGameDead_Init () {
    gt_ZealotLefttheGameDead = TriggerCreate("gt_ZealotLefttheGameDead_Func");
    TriggerEnable(gt_ZealotLefttheGameDead, false);
    TriggerAddEventPlayerLeft(gt_ZealotLefttheGameDead, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Dies
//--------------------------------------------------------------------------------------------------
bool gt_ProbeDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    int lv_playerWhoDied;

    // Automatic Variable Declarations
    playergroup auto858883F2_g;
    int auto858883F2_var;
    unitgroup auto781256A5_g;
    int auto781256A5_u;
    unit auto781256A5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameEnd == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_playerWhoDied = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    auto858883F2_g = gv_playerGroupProbes;
    auto858883F2_var = -1;
    while (true) {
        auto858883F2_var = PlayerGroupNextPlayer(auto858883F2_g, auto858883F2_var);
        if (auto858883F2_var < 0) { break; }
        libNtve_gf_SetAlliance(auto858883F2_var, lv_playerWhoDied, libNtve_ge_AllianceSetting_Neutral);
    }
    auto781256A5_g = UnitGroup(null, lv_playerWhoDied, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto781256A5_u = UnitGroupCount(auto781256A5_g, c_unitCountAll);
    for (;; auto781256A5_u -= 1) {
        auto781256A5_var = UnitGroupUnitFromEnd(auto781256A5_g, auto781256A5_u);
        if (auto781256A5_var == null) { break; }
        UnitRemove(auto781256A5_var);
    }
    Wait(0.2, c_timeGame);
    VisExploreArea(lv_playerWhoDied, RegionEntireMap(), false, false);
    UISetFrameVisible(PlayerGroupSingle(lv_playerWhoDied), c_syncFrameTypeMinimapPanel, false);
    CameraShakeStart(lv_playerWhoDied, c_cameraPositionBoth, c_cameraDirectionXYZ, 1.0, 2.0, 100.0, 3.0);
    DialogControlSetEnabled(gv_voteKickButton, PlayerGroupSingle(lv_playerWhoDied), false);
    TextTagDestroy(gv_playersLabelRanks[lv_playerWhoDied]);
    DialogSetVisible(gv_resourcePerSecond[lv_playerWhoDied], PlayerGroupSingle(lv_playerWhoDied), false);
    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[lv_playerWhoDied], StringExternal("Param/Value/F973E944"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/39F7316B") + TextWithColor(PlayerName(lv_playerWhoDied), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerWhoDied, false)))) + (StringExternal("Param/Value/FEE7C862") + TextWithColor(PlayerName(lv_killingPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))))));
    gv_xPinGameforVampire[lv_killingPlayer] += 10;
    gv_xPinGameforTotal[lv_killingPlayer] += 10;
    gv_xPofPlayerVampire[lv_killingPlayer] += 10;
    gv_levelofPlayerVampire[lv_killingPlayer] = gf_GetLevelofPlayer(gv_xPofPlayerVampire[lv_killingPlayer]);
    gf_UpdateXPBar(lv_killingPlayer);
    UIDisplayMessage(PlayerGroupSingle(lv_killingPlayer), c_messageAreaDebug, StringExternal("Param/Value/703FF29C"));
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[lv_killingPlayer], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotVampire, gv_xPinGameforVampire[lv_killingPlayer]);
        BankValueSetFromInt(gv_banks[lv_killingPlayer], gv_banksSections.lv_totalStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[lv_killingPlayer]);
        BankSave(gv_banks[lv_killingPlayer]);
    }

    if ((gv_rankedGame == true)) {
        gf_ProbeDiesCheckAchievements(lv_killingPlayer);
    }

    PlayerModifyPropertyInt(lv_playerWhoDied, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lv_playerWhoDied, c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerExecute(gt_VictoryDefeatConditionsProbeDies, true, true);
    gv_probeDead[lv_playerWhoDied] = true;
    if (((gv_gameEnd == false))) {
        DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(lv_playerWhoDied), true);
        if ((PlayerGroupCount(gv_playerGroupHunters) >= gv_maxHuntersAllowed)) {
            DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupAll(), false);
        }
        else {
            DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupAll(), true);
        }
        gv_probeDead[lv_playerWhoDied] = false;
    }
    else {
        TimerWindowShow(gv_timerWindowChooseHelpSide, PlayerGroupSingle(lv_playerWhoDied), true);
        DialogSetVisible(gv_chooseHelpSideDialog, PlayerGroupSingle(lv_playerWhoDied), true);
        DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeDies_Init () {
    gt_ProbeDies = TriggerCreate("gt_ProbeDies_Func");
    TriggerAddEventPlayerEffectUsed(gt_ProbeDies, c_playerAny, "ProbeDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Spirit Dies
//--------------------------------------------------------------------------------------------------
bool gt_ProbeSpiritDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameEnd == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_triggeringPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    TextTagDestroy(gv_playersLabelRanks[lv_triggeringPlayer]);
    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/00AB3C03"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/351A77B2") + TextWithColor(PlayerName(lv_triggeringPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_triggeringPlayer, false)))) + (StringExternal("Param/Value/3F66F1CA") + TextWithColor(PlayerName(lv_killingPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_killingPlayer, false))))));
    TimerStart(gv_timerProbeSpiritDies[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], gf_PvZ2Time(60.0), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/4ECD93C5"), true, false);
    gv_timerWindowProbeSpiritDies[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = TimerWindowLastCreated();
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeSpiritDies_Init () {
    gt_ProbeSpiritDies = TriggerCreate("gt_ProbeSpiritDies_Func");
    TriggerAddEventPlayerEffectUsed(gt_ProbeSpiritDies, c_playerAny, "ProbeSpiritDies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Probe Spirit Dies Expires
//--------------------------------------------------------------------------------------------------
bool gt_TimerProbeSpiritDiesExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer autoA658578F_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA658578F_val = EventTimer();
    if (autoA658578F_val == gv_timerProbeSpiritDies[1]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(1);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[2]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(2);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[3]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(3);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[4]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(4);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[5]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(5);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[6]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(6);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[7]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(7);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[8]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(8);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[9]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(9);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[10]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(10);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[11]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(11);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[12]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(12);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[13]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(13);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[14]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(14);
    }
    else if (autoA658578F_val == gv_timerProbeSpiritDies[15]) {
        gf_ProbeSpiritDiesReviveProbeSpirit(15);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerProbeSpiritDiesExpires_Init () {
    gt_TimerProbeSpiritDiesExpires = TriggerCreate("gt_TimerProbeSpiritDiesExpires_Func");
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[1]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[2]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[3]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[4]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[5]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[6]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[7]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[8]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[9]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[10]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[11]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[12]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[13]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[14]);
    TriggerAddEventTimer(gt_TimerProbeSpiritDiesExpires, gv_timerProbeSpiritDies[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Dies
//--------------------------------------------------------------------------------------------------
bool gt_ZealotDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto739E66DB_g;
    int auto739E66DB_u;
    unit auto739E66DB_var;
    unitgroup autoD99AFA83_g;
    int autoD99AFA83_u;
    unit autoD99AFA83_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PrisonZealot") && (gv_gameEnd == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
    gv_gameEnd = true;
    auto739E66DB_g = UnitGroup("Predator", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto739E66DB_u = UnitGroupCount(auto739E66DB_g, c_unitCountAll);
    for (;; auto739E66DB_u -= 1) {
        auto739E66DB_var = UnitGroupUnitFromEnd(auto739E66DB_g, auto739E66DB_u);
        if (auto739E66DB_var == null) { break; }
        UnitRemove(auto739E66DB_var);
    }
    gv_xPinGameforHuman[libNtve_gf_KillingPlayer()] += 30;
    gv_xPinGameforTotal[libNtve_gf_KillingPlayer()] += 30;
    gv_xPofPlayerHuman[libNtve_gf_KillingPlayer()] += 30;
    gv_levelofPlayerHuman[libNtve_gf_KillingPlayer()] = gf_GetLevelofPlayer(gv_xPofPlayerHuman[libNtve_gf_KillingPlayer()]);
    gf_UpdateXPBar(libNtve_gf_KillingPlayer());
    UIDisplayMessage(PlayerGroupSingle(libNtve_gf_KillingPlayer()), c_messageAreaDebug, StringExternal("Param/Value/4E271ABC"));
    if ((gv_rankedGame == true)) {
        BankValueSetFromInt(gv_banks[libNtve_gf_KillingPlayer()], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotHuman, gv_xPinGameforHuman[libNtve_gf_KillingPlayer()]);
        BankValueSetFromInt(gv_banks[libNtve_gf_KillingPlayer()], gv_banksSections.lv_previousGameStats, gv_banksStats.lv_previousGameStats.lv_xPGotTotal, gv_xPinGameforTotal[libNtve_gf_KillingPlayer()]);
        BankSave(gv_banks[libNtve_gf_KillingPlayer()]);
    }

    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/FCFC9AEA"));
    if ((libNtve_gf_KillingPlayer() == 16)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/1274674C") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))) + (StringExternal("Param/Value/7DF4346C") + StringExternal("Param/Value/2C76D738"))));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/AADC9935") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))) + (StringExternal("Param/Value/6009102B") + TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))))));
        if ((gv_rankedGame == true)) {
            gf_ZealotDiesCheckAchievements(libNtve_gf_KillingUnit());
        }

    }
    if ((gv_rankedGame == true)) {
        gf_ZealotDiesWriteStatstoBank(EventUnit());
    }

    autoD99AFA83_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD99AFA83_u = UnitGroupCount(autoD99AFA83_g, c_unitCountAll);
    for (;; autoD99AFA83_u -= 1) {
        autoD99AFA83_var = UnitGroupUnitFromEnd(autoD99AFA83_g, autoD99AFA83_u);
        if (autoD99AFA83_var == null) { break; }
        UnitRemove(autoD99AFA83_var);
    }
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
    TriggerExecute(gt_VictoryDefeatConditionsZealotDies, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotDies_Init () {
    gt_ZealotDies = TriggerCreate("gt_ZealotDies_Func");
    TriggerEnable(gt_ZealotDies, false);
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[1]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[2]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[3]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[4]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[5]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[6]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[7]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[8]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[9]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[10]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[11]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[12]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[13]"));
    TriggerAddEventUnitDied(gt_ZealotDies, UnitRefFromVariable("gv_zealotsTemp[14]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter Dies
//--------------------------------------------------------------------------------------------------
bool gt_HunterDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Predator") && (gv_gameEnd == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "TerrazineBonus", 0, 0, UnitGetPosition(EventUnit()), RegionGetCenter(RegionPlayableMap()));
    libNtve_gf_UnitCreateFacingPoint(1, "TerrazineBonus", 0, 0, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
    BoardItemSetText(gv_leaderboard, 2, gv_rowofPlayer[EventPlayer()], StringExternal("Param/Value/5CDF5BB5"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/88A3193C") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))) + (StringExternal("Param/Value/8806DA42") + TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))))));
    TimerStart(gv_timerHunterDies[EventPlayer()], gf_PvZ2Time(60.0), false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/2091FB13"), true, false);
    gv_timerWindowHunterDies[EventPlayer()] = TimerWindowLastCreated();
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    if ((UnitGetType(libNtve_gf_KillingUnit()) != "PrisonZealot")) {
        gf_BonusXPtoProbe5(libNtve_gf_KillingPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterDies_Init () {
    gt_HunterDies = TriggerCreate("gt_HunterDies_Func");
    TriggerEnable(gt_HunterDies, false);
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[1]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[2]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[3]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[4]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[5]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[6]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[7]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[8]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[9]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[10]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[11]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[12]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[13]"));
    TriggerAddEventUnitDied(gt_HunterDies, UnitRefFromVariable("gv_zealotsTemp[14]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Hunter Dies Expires
//--------------------------------------------------------------------------------------------------
bool gt_TimerHunterDiesExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto1393C590_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1393C590_val = EventTimer();
    if (auto1393C590_val == gv_timerHunterDies[1]) {
        gf_HunterDiesReviveHunter(1);
    }
    else if (auto1393C590_val == gv_timerHunterDies[2]) {
        gf_HunterDiesReviveHunter(2);
    }
    else if (auto1393C590_val == gv_timerHunterDies[3]) {
        gf_HunterDiesReviveHunter(3);
    }
    else if (auto1393C590_val == gv_timerHunterDies[4]) {
        gf_HunterDiesReviveHunter(4);
    }
    else if (auto1393C590_val == gv_timerHunterDies[5]) {
        gf_HunterDiesReviveHunter(5);
    }
    else if (auto1393C590_val == gv_timerHunterDies[6]) {
        gf_HunterDiesReviveHunter(6);
    }
    else if (auto1393C590_val == gv_timerHunterDies[7]) {
        gf_HunterDiesReviveHunter(7);
    }
    else if (auto1393C590_val == gv_timerHunterDies[8]) {
        gf_HunterDiesReviveHunter(8);
    }
    else if (auto1393C590_val == gv_timerHunterDies[9]) {
        gf_HunterDiesReviveHunter(9);
    }
    else if (auto1393C590_val == gv_timerHunterDies[10]) {
        gf_HunterDiesReviveHunter(10);
    }
    else if (auto1393C590_val == gv_timerHunterDies[11]) {
        gf_HunterDiesReviveHunter(11);
    }
    else if (auto1393C590_val == gv_timerHunterDies[12]) {
        gf_HunterDiesReviveHunter(12);
    }
    else if (auto1393C590_val == gv_timerHunterDies[13]) {
        gf_HunterDiesReviveHunter(13);
    }
    else if (auto1393C590_val == gv_timerHunterDies[14]) {
        gf_HunterDiesReviveHunter(14);
    }
    else if (auto1393C590_val == gv_timerHunterDies[15]) {
        gf_HunterDiesReviveHunter(15);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerHunterDiesExpires_Init () {
    gt_TimerHunterDiesExpires = TriggerCreate("gt_TimerHunterDiesExpires_Func");
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[1]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[2]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[3]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[4]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[5]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[6]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[7]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[8]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[9]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[10]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[11]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[12]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[13]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[14]);
    TriggerAddEventTimer(gt_TimerHunterDiesExpires, gv_timerHunterDies[15]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed Region
//--------------------------------------------------------------------------------------------------
bool gt_SpeedRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto36C91941_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PrisonZealot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto36C91941_val = gv_chosenMap;
    if (auto36C91941_val == 9) {
        UnitBehaviorAdd(EventUnit(), "TempSpeed", EventUnit(), 1);
    }
    else if (auto36C91941_val == 7) {
        UnitBehaviorAdd(EventUnit(), "TempSpeed", EventUnit(), 1);
    }
    else if (auto36C91941_val == 10) {
        UnitBehaviorAdd(EventUnit(), "TempSpeed", EventUnit(), 2);
    }
    else if (auto36C91941_val == 5) {
        UnitBehaviorAdd(EventUnit(), "TempSpeed", EventUnit(), 1);
    }
    else if (auto36C91941_val == 4) {
        UnitBehaviorAdd(EventUnit(), "TempSpeed", EventUnit(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedRegion_Init () {
    gt_SpeedRegion = TriggerCreate("gt_SpeedRegion_Func");
    TriggerEnable(gt_SpeedRegion, false);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(20), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(190), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(191), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(192), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(193), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(194), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(195), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(196), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(216), true);
    TriggerAddEventUnitRegion(gt_SpeedRegion, null, RegionFromId(217), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Income
//--------------------------------------------------------------------------------------------------
bool gt_ZealotIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_feed[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] += CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    BoardItemSetText(gv_leaderboard, 4, gv_rowofPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)], IntToText(gv_feed[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)]));
    gv_totalFeed += CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    BoardItemSetText(gv_leaderboard, 4, gv_totalFeedRowLeaderboard, IntToText(gv_totalFeed));
    TextTagCreate((StringExternal("Param/Value/80FC89FD") + (FixedToText((1.0 * IntToFixed(gv_damage[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)])), c_fixedPrecisionAny) + StringExternal("Param/Value/4C150BFF"))), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 2.0, true, false, PlayerGroupActive());
    TextTagSetVelocity(TextTagLastCreated(), 3.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotIncome_Init () {
    gt_ZealotIncome = TriggerCreate("gt_ZealotIncome_Func");
    TriggerAddEventPlayerEffectUsed(gt_ZealotIncome, c_playerAny, "ZealotIncome");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Income - Kill Bonus
//--------------------------------------------------------------------------------------------------
bool gt_ZealotIncomeKillBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gv_side[EventUnitDamageSourcePlayer()] == "Zealot") && (UnitGetType(EventUnit()) != "Predator") && ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true) || (CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventUnitDamageSourcePlayer()) >= 32000))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventUnitDamageSourcePlayer(), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventUnitDamageSourcePlayer()));
    PlayerModifyPropertyInt(EventUnitDamageSourcePlayer(), c_playerPropMineralsCollected, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "ResourcesCollected[" + IntToString(0) + "]", EventUnitDamageSourcePlayer()));
    gv_feed[EventPlayer()] += CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventUnitDamageSourcePlayer());
    BoardItemSetText(gv_leaderboard, 4, gv_rowofPlayer[EventUnitDamageSourcePlayer()], IntToText(gv_feed[EventPlayer()]));
    gv_totalFeed += CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ZealotIncome", "Resources[" + IntToString(0) + "]", EventUnitDamageSourcePlayer());
    BoardItemSetText(gv_leaderboard, 4, gv_totalFeedRowLeaderboard, IntToText(gv_totalFeed));
    TextTagCreate((StringExternal("Param/Value/FE630917") + (FixedToText((1.0 * IntToFixed(gv_damage[EventUnitDamageSourcePlayer()])), c_fixedPrecisionAny) + StringExternal("Param/Value/3CE6258F"))), 24, UnitGetPosition(EventUnit()), 2.0, true, false, PlayerGroupActive());
    TextTagSetVelocity(TextTagLastCreated(), 3.0, 45.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotIncomeKillBonus_Init () {
    gt_ZealotIncomeKillBonus = TriggerCreate("gt_ZealotIncomeKillBonus_Func");
    TriggerAddEventUnitDamaged(gt_ZealotIncomeKillBonus, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armor Of Unit
//--------------------------------------------------------------------------------------------------
bool gt_ArmorOfUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_armorOfUnit;
    bool lv_changeArmor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitBehavior() == "Agility") || (EventUnitBehavior() == "AgilityP"))) {
        gv_agilityPoints[UnitGetOwner(EventUnit())] = EventUnitAttributePoints();
        lv_changeArmor = true;
    }

    if ((EventUnitBehavior() == "Armor")) {
        gv_armorPoints[UnitGetOwner(EventUnit())] = EventUnitAttributePoints();
        lv_changeArmor = true;
    }

    if ((EventUnitBehavior() == "NegativeArmorAttribute")) {
        gv_negativeArmorPoints[UnitGetOwner(EventUnit())] = EventUnitAttributePoints();
        lv_changeArmor = true;
    }

    if ((lv_changeArmor == true)) {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMassive) == true)) {
            lv_armorOfUnit = ((IntToFixed(gv_agilityPoints[UnitGetOwner(EventUnit())]) * 0.2) + (6.4 + IntToFixed(gv_armorPoints[UnitGetOwner(EventUnit())])));
            if ((lv_armorOfUnit > 100.0)) {
                lv_armorOfUnit = ((IntToFixed(gv_agilityPoints[UnitGetOwner(EventUnit())]) * 0.2) + ((6.4 - gv_negativeArmorPoints[UnitGetOwner(EventUnit())]) + IntToFixed(gv_armorPoints[UnitGetOwner(EventUnit())])));
                if (((lv_armorOfUnit <= 100.0) && (gv_negativeArmorPoints[UnitGetOwner(EventUnit())] != 0))) {
                    lv_armorOfUnit = 100.0;
                }

            }

        }
        else {
            lv_armorOfUnit = ((IntToFixed(gv_agilityPoints[UnitGetOwner(EventUnit())]) * 0.2) + IntToFixed(gv_armorPoints[UnitGetOwner(EventUnit())]));
        }
        CatalogFieldValueSet(c_gameCatalogUnit, (UnitGetType(EventUnit())), "LifeArmor", UnitGetOwner(EventUnit()), FixedToString(lv_armorOfUnit, 2));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DamageReduction", "DamageResponse.ModifyFraction", UnitGetOwner(EventUnit()), FixedToString((1.0 - ((lv_armorOfUnit * 0.06) / (1.0 + (lv_armorOfUnit * 0.06)))), 4));
        CatalogFieldValueSet(c_gameCatalogEffect, "DamageReduction", "Amount", EventPlayer(), FixedToString((100.0 * ((lv_armorOfUnit * 0.06) / (1.0 + (lv_armorOfUnit * 0.06)))), 2));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorOfUnit_Init () {
    gt_ArmorOfUnit = TriggerCreate("gt_ArmorOfUnit_Func");
    TriggerEnable(gt_ArmorOfUnit, false);
    TriggerAddEventUnitAttributeChange(gt_ArmorOfUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Of Unit
//--------------------------------------------------------------------------------------------------
bool gt_DamageOfUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitBehavior() == "Damage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Predator")) {
        if ((EventUnitAttributePoints() < 65535)) {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                gf_SetDamageofHero(EventPlayer(), EventUnitAttributePoints());
            }

        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                gf_SetDamageofHero(EventPlayer(), 65535);
            }

        }
    }
    else {
        if ((EventUnitAttributePoints() < 262135)) {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                gf_SetDamageofHero(EventPlayer(), EventUnitAttributePoints());
            }

        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
                gf_SetDamageofHero(EventPlayer(), 262135);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageOfUnit_Init () {
    gt_DamageOfUnit = TriggerCreate("gt_DamageOfUnit_Func");
    TriggerAddEventUnitAttributeChange(gt_DamageOfUnit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn on Private Commands
//--------------------------------------------------------------------------------------------------
bool gt_TurnonPrivateCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_kill, true);
    TriggerEnable(gt_settimescale, true);
    TriggerEnable(gt_give, true);
    TriggerEnable(gt_reveal, true);
    TriggerEnable(gt_show, true);
    TriggerEnable(gt_test, true);
    TriggerEnable(gt_setbuildername, true);
    TriggerEnable(gt_setvampname, true);
    TriggerEnable(gt_setbuilderscale, true);
    TriggerEnable(gt_setvampscale, true);
    TriggerEnable(gt_poweron, true);
    TriggerEnable(gt_poweroff, true);
    TriggerEnable(gt_CheckStage, true);
    TriggerEnable(gt_InitAIProbe, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnonPrivateCommands_Init () {
    gt_TurnonPrivateCommands = TriggerCreate("gt_TurnonPrivateCommands_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn off Private Commands
//--------------------------------------------------------------------------------------------------
bool gt_TurnoffPrivateCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_kill, false);
    TriggerEnable(gt_settimescale, false);
    TriggerEnable(gt_reveal, false);
    TriggerEnable(gt_give, false);
    TriggerEnable(gt_show, false);
    TriggerEnable(gt_test, false);
    TriggerEnable(gt_setbuildername, false);
    TriggerEnable(gt_setvampname, false);
    TriggerEnable(gt_setbuilderscale, false);
    TriggerEnable(gt_setvampscale, false);
    TriggerEnable(gt_poweron, false);
    TriggerEnable(gt_poweroff, false);
    TriggerEnable(gt_CheckStage, false);
    TriggerEnable(gt_InitAIProbe, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurnoffPrivateCommands_Init () {
    gt_TurnoffPrivateCommands = TriggerCreate("gt_TurnoffPrivateCommands_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Good Game
//--------------------------------------------------------------------------------------------------
bool gt_GoodGame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_playerAudioCmdGG[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerAudioCmdGG[EventPlayer()] = true;
    SoundPlayForPlayer(SoundLink("zMission_Lab03_DMarineB_042", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GoodGame_Init () {
    gt_GoodGame = TriggerCreate("gt_GoodGame_Func");
    TriggerAddEventChatMessage(gt_GoodGame, c_playerAny, "gg", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -profile color
//--------------------------------------------------------------------------------------------------
bool gt_profilecolor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_IsPlayerOnline(gv_ownerofSelectedUnit[EventPlayer()]) == true)) {
        gf_UpdateandShowProfileofPlayer(EventPlayer(), gv_ownerofSelectedUnit[EventPlayer()]);
        gv_profileofPlayer[EventPlayer()] = gv_ownerofSelectedUnit[EventPlayer()];
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/1CD9BE3A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_profilecolor_Init () {
    gt_profilecolor = TriggerCreate("gt_profilecolor_Func");
    TriggerAddEventChatMessage(gt_profilecolor, c_playerAny, "-profile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -stats color
//--------------------------------------------------------------------------------------------------
bool gt_statscolor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto5A017C5A_ae = 14;
    const int auto5A017C5A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto5A017C5A_ai >= 0 && lv_i <= auto5A017C5A_ae) || (auto5A017C5A_ai < 0 && lv_i >= auto5A017C5A_ae) ) ; lv_i += auto5A017C5A_ai ) {
        if ((lv_i != EventPlayer())) {
            BoardSetState(gv_statsLeaderboard[lv_i], PlayerGroupSingle(EventPlayer()), c_boardStateShowing, false);
        }

    }
    if ((gf_IsPlayerOnline(gv_ownerofSelectedUnit[EventPlayer()]) == true)) {
        BoardSetState(gv_statsLeaderboard[gv_ownerofSelectedUnit[EventPlayer()]], PlayerGroupSingle(EventPlayer()), c_boardStateShowing, true);
        BoardSetState(gv_statsLeaderboard[gv_ownerofSelectedUnit[EventPlayer()]], PlayerGroupSingle(EventPlayer()), c_boardStateMinimized, false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/ED8DB8EC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_statscolor_Init () {
    gt_statscolor = TriggerCreate("gt_statscolor_Func");
    TriggerAddEventChatMessage(gt_statscolor, c_playerAny, "-stats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -stats reset
//--------------------------------------------------------------------------------------------------
bool gt_statsreset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_startRecording == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BankLoad("ProbesvZealot2", EventPlayer());
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games, 0);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, 1000);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, 1000);
    BankValueSetFromInt(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, 1000);
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_rank, "D");
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_rank, "D");
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_rank, "D");
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, "0");
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, "0");
    BankValueSetFromString(gv_banks[EventPlayer()], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, "0");
    BankSave(gv_banks[EventPlayer()]);
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 2, 2, StringExternal("Param/Value/C1E2CAF3"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 3, 2, StringExternal("Param/Value/4994A370"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 4, 2, StringExternal("Param/Value/67A62E21"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 2, 3, StringExternal("Param/Value/1352C1BE"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 3, 3, StringExternal("Param/Value/B159F665"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 4, 3, StringExternal("Param/Value/9CD154DE"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 2, 4, StringExternal("Param/Value/DB28F50E"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 3, 4, StringExternal("Param/Value/34AA979B"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 4, 4, StringExternal("Param/Value/A29C351D"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 5, 2, StringExternal("Param/Value/759B2610"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 5, 3, StringExternal("Param/Value/FA08CAC9"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 5, 4, StringExternal("Param/Value/78A21A93"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 6, 2, StringExternal("Param/Value/811A494F"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 6, 3, StringExternal("Param/Value/7E93007F"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 6, 4, StringExternal("Param/Value/9CE32E7E"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 7, 2, StringExternal("Param/Value/802F5510"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 7, 3, StringExternal("Param/Value/DA398522"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 7, 4, StringExternal("Param/Value/A129E670"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 8, 2, StringExternal("Param/Value/CFFDA8CF"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 8, 3, StringExternal("Param/Value/5D2BB60A"));
    BoardItemSetText(gv_statsLeaderboard[EventPlayer()], 8, 4, StringExternal("Param/Value/06EDFFC1"));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/48F0D810"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_statsreset_Init () {
    gt_statsreset = TriggerCreate("gt_statsreset_Func");
    TriggerAddEventChatMessage(gt_statsreset, c_playerAny, "-stats reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: auto stats reset zankza
//--------------------------------------------------------------------------------------------------
bool gt_autostatsresetzankza_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB9131770_g;
    int autoB9131770_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB9131770_g = PlayerGroupActive();
    autoB9131770_var = -1;
    while (true) {
        autoB9131770_var = PlayerGroupNextPlayer(autoB9131770_g, autoB9131770_var);
        if (autoB9131770_var < 0) { break; }
        if ((gv_startRecording == true) && (PlayerHandle(autoB9131770_var) == "1-S2-1-2063908") && (PlayerHandle(autoB9131770_var) == "1-S2-1-4130515")) {
            BankLoad("ProbesvZealot2", autoB9131770_var);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_losses, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_losses, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_losses, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_wins, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_wins, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_wins, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_games, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_games, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_games, 0);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_points, 1000);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_points, 1000);
            BankValueSetFromInt(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_points, 1000);
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_rank, "D");
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_rank, "D");
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_rank, "D");
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_humanStats, gv_banksStats.lv_humanStats.lv_xP, "0");
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_vampireStats, gv_banksStats.lv_vampireStats.lv_xP, "0");
            BankValueSetFromString(gv_banks[autoB9131770_var], gv_banksSections.lv_totalStats, gv_banksStats.lv_totalStats.lv_xP, "0");
            BankSave(gv_banks[autoB9131770_var]);
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 2, 2, StringExternal("Param/Value/ECDBBC73"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 3, 2, StringExternal("Param/Value/799AAD44"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 4, 2, StringExternal("Param/Value/BF20FA44"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 2, 3, StringExternal("Param/Value/5E3CDD71"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 3, 3, StringExternal("Param/Value/66A33F79"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 4, 3, StringExternal("Param/Value/4843AD94"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 2, 4, StringExternal("Param/Value/A4B4CB09"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 3, 4, StringExternal("Param/Value/1ECABD59"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 4, 4, StringExternal("Param/Value/AB8843E6"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 5, 2, StringExternal("Param/Value/D81DCBE4"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 5, 3, StringExternal("Param/Value/4B6D7A39"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 5, 4, StringExternal("Param/Value/A1FC8890"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 6, 2, StringExternal("Param/Value/9B210EC8"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 6, 3, StringExternal("Param/Value/22672BE6"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 6, 4, StringExternal("Param/Value/5D324CA7"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 7, 2, StringExternal("Param/Value/3FC7D5DF"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 7, 3, StringExternal("Param/Value/E9E1E641"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 7, 4, StringExternal("Param/Value/B47F5C9B"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 8, 2, StringExternal("Param/Value/8EFCCB1F"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 8, 3, StringExternal("Param/Value/D5F9FC7C"));
            BoardItemSetText(gv_statsLeaderboard[autoB9131770_var], 8, 4, StringExternal("Param/Value/05FB7432"));
            UIDisplayMessage(PlayerGroupSingle(autoB9131770_var), c_messageAreaDebug, StringExternal("Param/Value/406BE5D9"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_autostatsresetzankza_Init () {
    gt_autostatsresetzankza = TriggerCreate("gt_autostatsresetzankza_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: -zoom
//--------------------------------------------------------------------------------------------------
bool gt_zoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_zoomValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zoomValue = StringToFixed(StringWord(EventChatMessage(false), 2));
    if (((lv_zoomValue > 100.0) || (lv_zoomValue == 0.0))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/9DAC31A9"));
        lv_zoomValue = 100.0;
    }

    CameraInfoSetValue(gv_cameras[EventPlayer()], c_cameraValueDistance, lv_zoomValue);
    CameraApplyInfo(EventPlayer(), gv_cameras[EventPlayer()], 0.0, -1, 10.0, false);
    if (((lv_zoomValue >= 0) && (lv_zoomValue <= 10))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 10.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 11) && (lv_zoomValue <= 20))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 20.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 21) && (lv_zoomValue <= 30))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 30.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 31) && (lv_zoomValue <= 40))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 40.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 41) && (lv_zoomValue <= 50))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 50.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 51) && (lv_zoomValue <= 60))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 60.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 61) && (lv_zoomValue <= 70))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 70.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 71) && (lv_zoomValue <= 80))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 80.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 81) && (lv_zoomValue <= 90))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 90.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    if (((lv_zoomValue >= 91) && (lv_zoomValue <= 100))) {
        BankValueSetFromFixed(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zoomSettings, 100.0);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zoom_Init () {
    gt_zoom = TriggerCreate("gt_zoom_Func");
    TriggerAddEventChatMessage(gt_zoom, c_playerAny, "-zoom", false);
    TriggerAddEventChatMessage(gt_zoom, c_playerAny, "-z", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -scale
//--------------------------------------------------------------------------------------------------
bool gt_scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "BuilderSkin14", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_probes[EventPlayer()], libNtve_gf_SetScale(1.3, 1.3, 1.3, 0.0));
    if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin) == true)) {
        BankValueSetFromFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_scaleofProbeSkin, true);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_scale_Init () {
    gt_scale = TriggerCreate("gt_scale_Func");
    TriggerAddEventChatMessage(gt_scale, c_playerAny, "-scale", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -rank
//--------------------------------------------------------------------------------------------------
bool gt_rank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_foundPlayer;

    // Automatic Variable Declarations
    playergroup auto46E3497B_g;
    int auto46E3497B_var;
    playergroup autoA74E5103_g;
    int autoA74E5103_var;
    playergroup auto832479AF_g;
    int auto832479AF_var;
    playergroup auto8EDE4A25_g;
    int auto8EDE4A25_var;
    playergroup autoFDB9DA71_g;
    int autoFDB9DA71_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerCustomRankDisplay[EventPlayer()] == true)) {
        gv_playerCustomRankDisplay[EventPlayer()] = false;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/306D55FB") + StringToText("")));
    }
    else {
        gv_playerCustomRankDisplay[EventPlayer()] = true;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/A18807E0") + StringToText("")));
    }
    lv_foundPlayer = false;
    auto46E3497B_g = gv_playerGroupZealots;
    auto46E3497B_var = -1;
    while (true) {
        auto46E3497B_var = PlayerGroupNextPlayer(auto46E3497B_g, auto46E3497B_var);
        if (auto46E3497B_var < 0) { break; }
        if (((auto46E3497B_var == EventPlayer()) && (lv_foundPlayer == false))) {
            TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
            gf_CreateLabelZealotRank(EventPlayer());
            lv_foundPlayer = true;
        }

    }
    if ((lv_foundPlayer == false)) {
        autoA74E5103_g = gv_playerGroupHunters;
        autoA74E5103_var = -1;
        while (true) {
            autoA74E5103_var = PlayerGroupNextPlayer(autoA74E5103_g, autoA74E5103_var);
            if (autoA74E5103_var < 0) { break; }
            if (((autoA74E5103_var == EventPlayer()) && (lv_foundPlayer == false))) {
                TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
                gf_CreateLabelHunterRank(EventPlayer());
                lv_foundPlayer = true;
            }

        }
    }

    if ((lv_foundPlayer == false)) {
        auto8EDE4A25_g = gv_playerGroupProbes;
        auto8EDE4A25_var = -1;
        while (true) {
            auto8EDE4A25_var = PlayerGroupNextPlayer(auto8EDE4A25_g, auto8EDE4A25_var);
            if (auto8EDE4A25_var < 0) { break; }
            if (((auto8EDE4A25_var == EventPlayer()) && (lv_foundPlayer == false))) {
                TextTagDestroy(gv_playersLabelRanks[EventPlayer()]);
                gf_CreateLabelProbeRank(EventPlayer());
                lv_foundPlayer = true;
            }

        }
    }
    else {
        auto832479AF_g = PlayerGroupActive();
        auto832479AF_var = -1;
        while (true) {
            auto832479AF_var = PlayerGroupNextPlayer(auto832479AF_g, auto832479AF_var);
            if (auto832479AF_var < 0) { break; }
            TextTagShow(gv_playersLabelRanks[auto832479AF_var], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    if ((lv_foundPlayer == true)) {
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Name", EventPlayer(), "Hide Ranks");
        CatalogFieldValueSet(c_gameCatalogButton, "ShowRanks", "Icon", EventPlayer(), "Icons\\hide ranks.dds");
        gv_labelRankStatus[EventPlayer()] = false;
        autoFDB9DA71_g = PlayerGroupActive();
        autoFDB9DA71_var = -1;
        while (true) {
            autoFDB9DA71_var = PlayerGroupNextPlayer(autoFDB9DA71_g, autoFDB9DA71_var);
            if (autoFDB9DA71_var < 0) { break; }
            TextTagShow(gv_playersLabelRanks[autoFDB9DA71_var], PlayerGroupSingle(EventPlayer()), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rank_Init () {
    gt_rank = TriggerCreate("gt_rank_Func");
    TriggerAddEventChatMessage(gt_rank, c_playerAny, "-rank", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -players
//--------------------------------------------------------------------------------------------------
bool gt_players_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/ACF2D29C") + IntToText(PlayerGroupCount(PlayerGroupActive()))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/612E1910") + IntToText(PlayerGroupCount(gv_playerGroupProbes))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/1251B169") + IntToText(PlayerGroupCount(gv_playerGroupZealots))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/0FD4A740") + IntToText(PlayerGroupCount(gv_premiumZealots))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/C00E3234") + IntToText(gv_maxHuntersAllowed)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_players_Init () {
    gt_players = TriggerCreate("gt_players_Func");
    TriggerAddEventChatMessage(gt_players, c_playerAny, "-players", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -help
//--------------------------------------------------------------------------------------------------
bool gt_help_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/B11213AE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_help_Init () {
    gt_help = TriggerCreate("gt_help_Func");
    TriggerAddEventChatMessage(gt_help, c_playerAny, "-help", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -take Hunter
//--------------------------------------------------------------------------------------------------
bool gt_takeHunter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals1;
    int lv_gas1;

    // Automatic Variable Declarations
    unitgroup autoCCA6130F_g;
    int autoCCA6130F_u;
    unit autoCCA6130F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitCount("Probe", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }

        if (!((UnitCount("HighTemplar", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }

        if (!((UnitCount("Predator", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoCCA6130F_g = UnitGroup("Predator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCCA6130F_u = UnitGroupCount(autoCCA6130F_g, c_unitCountAll);
    for (;; autoCCA6130F_u -= 1) {
        autoCCA6130F_var = UnitGroupUnitFromEnd(autoCCA6130F_g, autoCCA6130F_u);
        if (autoCCA6130F_var == null) { break; }
        if ((UnitGetType(autoCCA6130F_var) == "Predator")) {
            lv_minerals1 = PlayerGetPropertyInt(UnitGetOwner(autoCCA6130F_var), c_playerPropMinerals);
            PlayerModifyPropertyInt(UnitGetOwner(autoCCA6130F_var), c_playerPropMinerals, c_playerPropOperSetTo, 0);
            lv_gas1 = PlayerGetPropertyInt(UnitGetOwner(autoCCA6130F_var), c_playerPropVespene);
            PlayerModifyPropertyInt(UnitGetOwner(autoCCA6130F_var), c_playerPropVespene, c_playerPropOperSetTo, 0);
            if ((lv_minerals1 > 0)) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCCA6130F_var)), c_messageAreaDebug, (StringExternal("Param/Value/E6B4527F") + (StringExternal("Param/Value/9BD41C50") + (IntToText(lv_minerals1) + (StringExternal("Param/Value/699BBB7C") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))))))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/AAF42F40") + (StringExternal("Param/Value/320C7FB9") + (IntToText(lv_minerals1) + (StringExternal("Param/Value/90DED36F") + TextWithColor(PlayerName(UnitGetOwner(autoCCA6130F_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(autoCCA6130F_var), false))))))));
            }

            if ((lv_gas1 > 0)) {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCCA6130F_var)), c_messageAreaDebug, (StringExternal("Param/Value/80F34BB1") + (StringExternal("Param/Value/3D8020C5") + (IntToText(lv_gas1) + (StringExternal("Param/Value/8BC10F3C") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))))))));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/30881F5D") + (StringExternal("Param/Value/9581D8C3") + (IntToText(lv_gas1) + (StringExternal("Param/Value/30B9D75B") + TextWithColor(PlayerName(UnitGetOwner(autoCCA6130F_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(autoCCA6130F_var), false))))))));
            }

            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, lv_minerals1);
            lv_minerals1 = 0;
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, lv_gas1);
            lv_gas1 = 0;
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_takeHunter_Init () {
    gt_takeHunter = TriggerCreate("gt_takeHunter_Func");
    TriggerAddEventUnitAbility(gt_takeHunter, null, AbilityCommand("TakeResources", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -sell Hunter
//--------------------------------------------------------------------------------------------------
bool gt_sellHunter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitgas;
    int lv_unitminerals;
    fixed lv_unitLifeAfterBuff;
    int lv_hPBonusfromallItems;

    // Automatic Variable Declarations
    playergroup autoBAA90B77_g;
    int autoBAA90B77_var;
    unitgroup auto01E14AF4_g;
    int auto01E14AF4_u;
    unit auto01E14AF4_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitCount("Probe", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }

        if (!((UnitCount("HighTemplar", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }

        if (!((UnitCount("Predator", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoBAA90B77_g = gv_playerGroupHunters;
    autoBAA90B77_var = -1;
    while (true) {
        autoBAA90B77_var = PlayerGroupNextPlayer(autoBAA90B77_g, autoBAA90B77_var);
        if (autoBAA90B77_var < 0) { break; }
        auto01E14AF4_g = UnitInventoryGroup(gv_zealotsTemp[autoBAA90B77_var]);
        auto01E14AF4_u = UnitGroupCount(auto01E14AF4_g, c_unitCountAll);
        for (;; auto01E14AF4_u -= 1) {
            auto01E14AF4_var = UnitGroupUnitFromEnd(auto01E14AF4_g, auto01E14AF4_u);
            if (auto01E14AF4_var == null) { break; }
            if ((UnitGetType(auto01E14AF4_var) != "Predator") && (UnitGetType(auto01E14AF4_var) != "PrisonZealot")) {
                lv_unitgas = UnitTypeGetCost(UnitGetType(auto01E14AF4_var), c_unitCostVespene);
                lv_unitminerals = UnitTypeGetCost(UnitGetType(auto01E14AF4_var), c_unitCostMinerals);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, lv_unitminerals);
                PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, lv_unitgas);
                UnitRemove(auto01E14AF4_var);
                if ((lv_unitminerals > 0)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/EFDCA773") + (IntToText(lv_unitminerals) + StringExternal("Param/Value/EA7C4437"))));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto01E14AF4_var)), c_messageAreaDebug, (StringExternal("Param/Value/013DB890") + (IntToText(lv_unitminerals) + StringExternal("Param/Value/CF3B9973"))));
                }

                if ((lv_unitgas > 0)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/396BB8DA") + (IntToText(lv_unitgas) + StringExternal("Param/Value/E5469885"))));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto01E14AF4_var)), c_messageAreaDebug, (StringExternal("Param/Value/95DEF86F") + (IntToText(lv_unitgas) + StringExternal("Param/Value/C06DE425"))));
                }

                if ((UnitGetPropertyFixed(auto01E14AF4_var, c_unitPropLifeArmor, c_unitPropCurrent) != 0.0)) {
                    if ((gv_gameTimeMinutes > 20)) {
                        UnitSetPropertyFixed(gv_zealotsTemp[autoBAA90B77_var], c_unitPropLifeMax, 32000.0);
                        UnitSetPropertyFixed(gv_zealotsTemp[autoBAA90B77_var], c_unitPropLife, 32000.0);
                    }
                    else {
                        UnitSetPropertyFixed(gv_zealotsTemp[autoBAA90B77_var], c_unitPropLifeMax, 350.0);
                        UnitSetPropertyFixed(gv_zealotsTemp[autoBAA90B77_var], c_unitPropLife, 350.0);
                    }
                }

            }

        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_sellHunter_Init () {
    gt_sellHunter = TriggerCreate("gt_sellHunter_Func");
    TriggerAddEventUnitAbility(gt_sellHunter, null, AbilityCommand("SellHunterItems", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -unscale
//--------------------------------------------------------------------------------------------------
bool gt_unscale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(gv_probes[EventPlayer()], libNtve_gf_SetScale(1.0, 1.0, 1.0, 0.0));
    if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveScaleofProbeSkin) == true)) {
        BankValueSetFromFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_scaleofProbeSkin, false);
        BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unscale_Init () {
    gt_unscale = TriggerCreate("gt_unscale_Func");
    TriggerAddEventChatMessage(gt_unscale, c_playerAny, "-unscale", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -regame
//--------------------------------------------------------------------------------------------------
bool gt_regame_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_soloMode == true)) {
        gv_setSpeedCmdIssued = true;
        gv_setSpeedCmdPlayer = PlayerGroupSingle(EventPlayer());
        TriggerExecute(gt_RegameInit, true, false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C13793EF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_regame_Init () {
    gt_regame = TriggerCreate("gt_regame_Func");
    TriggerAddEventChatMessage(gt_regame, c_playerAny, "-regame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -name
//--------------------------------------------------------------------------------------------------
bool gt_name_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(gv_probes[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "BuilderSkin16", c_techCountCompleteOnly) >= 1))) {
        CatalogFieldValueSet(c_gameCatalogUnit, "Probe", "Name", EventPlayer(), StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofProbeSkin) == true)) {
            BankValueSetFromString(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofProbeSkin, StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
            BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
        }

        gv_nameisSetProbe[EventPlayer()] = true;
    }
    else {
        if (((UnitIsAlive(gv_zealots[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "VampireSkin15", c_techCountCompleteOnly) >= 1))) {
            CatalogFieldValueSet(c_gameCatalogUnit, "PrisonZealot", "Name", EventPlayer(), StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
            CatalogFieldValueSet(c_gameCatalogUnit, "Predator", "Name", EventPlayer(), StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveNameofZealotSkin) == true)) {
                BankValueSetFromString(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_nameofZealotSkin, StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false))));
                BankSave(gv_gameplayOptionsBanks[EventPlayer()]);
            }

            gv_nameisSetZealot[EventPlayer()] = true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_name_Init () {
    gt_name = TriggerCreate("gt_name_Func");
    TriggerAddEventChatMessage(gt_name, c_playerAny, "-name", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -c
//--------------------------------------------------------------------------------------------------
bool gt_c_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(gv_probes[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "BuilderSkin15", c_techCountCompleteOnly) >= 1))) {
        gf_setcolorofunit(EventChatMessage(false), gv_probes[EventPlayer()]);
    }
    else {
        if (((UnitIsAlive(gv_zealots[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "VampireSkin14", c_techCountCompleteOnly) >= 1))) {
            gf_setcolorofunit(EventChatMessage(false), gv_zealots[EventPlayer()]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_c_Init () {
    gt_c = TriggerCreate("gt_c_Func");
    TriggerAddEventChatMessage(gt_c, c_playerAny, "-c", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -c reset
//--------------------------------------------------------------------------------------------------
bool gt_creset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(gv_probes[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "BuilderSkin15", c_techCountCompleteOnly) >= 1))) {
        libNtve_gf_SendActorMessageToUnit(gv_probes[EventPlayer()], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
    }
    else {
        if (((UnitIsAlive(gv_zealots[EventPlayer()]) == true) && (TechTreeUpgradeCount(EventPlayer(), "VampireSkin14", c_techCountCompleteOnly) >= 1))) {
            libNtve_gf_SendActorMessageToUnit(gv_zealots[EventPlayer()], libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 0.0));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_creset_Init () {
    gt_creset = TriggerCreate("gt_creset_Func");
    TriggerAddEventChatMessage(gt_creset, c_playerAny, "-c reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -handles
//--------------------------------------------------------------------------------------------------
bool gt_handles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto28FDACFD_ae = 14;
    const int auto28FDACFD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (auto28FDACFD_ai >= 0 && lv_i <= auto28FDACFD_ae) || (auto28FDACFD_ai < 0 && lv_i >= auto28FDACFD_ae) ) ; lv_i += auto28FDACFD_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/FAF15601") + IntToText(lv_i) + StringExternal("Param/Value/7FB3E40F") + StringToText(PlayerHandle(lv_i)) + StringExternal("Param/Value/8C5FA7E4")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_handles_Init () {
    gt_handles = TriggerCreate("gt_handles_Func");
    TriggerAddEventChatMessage(gt_handles, c_playerAny, "-handles", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -handles 2
//--------------------------------------------------------------------------------------------------
bool gt_handles2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCE81A479_ae = 14;
    const int autoCE81A479_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCE81A479_ai >= 0 && lv_i <= autoCE81A479_ae) || (autoCE81A479_ai < 0 && lv_i >= autoCE81A479_ae) ) ; lv_i += autoCE81A479_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (TextWithColor(PlayerName(lv_i), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_i, false))) + StringExternal("Param/Value/92A2DC67") + IntToText(lv_i) + StringExternal("Param/Value/C7A2EB4A") + StringToText(GameUserHandle(EventGameUser())) + StringExternal("Param/Value/CBA9AA60")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_handles2_Init () {
    gt_handles2 = TriggerCreate("gt_handles2_Func");
    TriggerAddEventChatMessage(gt_handles2, c_playerAny, "-gameuser", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -penguin
//--------------------------------------------------------------------------------------------------
bool gt_penguin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_theTargetPlayers;
    unit lv_targetUnit;
    int lv_livingTargetPlayers;

    // Automatic Variable Declarations
    unitgroup auto76E733EF_g;
    int auto76E733EF_u;
    unit auto76E733EF_var;
    playergroup auto22C84294_g;
    int auto22C84294_var;
    playergroup auto63A0D88F_g;
    int auto63A0D88F_var;
    playergroup autoE541B1A6_g;
    int autoE541B1A6_var;
    unitgroup autoEDF01E8A_g;
    int autoEDF01E8A_u;
    unit autoEDF01E8A_var;
    unitgroup auto9AF621C7_g;
    int auto9AF621C7_u;
    unit auto9AF621C7_var;
    playergroup auto1659C7F6_g;
    int auto1659C7F6_var;

    // Variable Initialization
    lv_theTargetPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto76E733EF_g = UnitGroupSelected(EventPlayer());
    auto76E733EF_u = UnitGroupCount(auto76E733EF_g, c_unitCountAll);
    for (;; auto76E733EF_u -= 1) {
        auto76E733EF_var = UnitGroupUnitFromEnd(auto76E733EF_g, auto76E733EF_u);
        if (auto76E733EF_var == null) { break; }
        if (((gf_PlayerIsModeratorLevel2(UnitGetOwner(auto76E733EF_var)) == false) || (gf_PlayerIsDeveloper(UnitGetOwner(auto76E733EF_var)) == false))) {
            PlayerGroupAdd(lv_theTargetPlayers, UnitGetOwner(auto76E733EF_var));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto76E733EF_var)), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/42868C2E")));
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(auto76E733EF_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(auto76E733EF_var), false))) + StringExternal("Param/Value/9A8A2E93")));
        }
    }
    if ((PlayerGroupCount(lv_theTargetPlayers) > 0)) {
        gv_penguinsCameOnMeteors = 0;
        UIDisplayMessage(lv_theTargetPlayers, c_messageAreaDebug, StringExternal("Param/Value/18CEA570"));
        Wait(3.0, c_timeGame);
        UIDisplayMessage(lv_theTargetPlayers, c_messageAreaDebug, StringExternal("Param/Value/64966FB0"));
        Wait(3.0, c_timeGame);
        auto22C84294_g = lv_theTargetPlayers;
        auto22C84294_var = -1;
        while (true) {
            auto22C84294_var = PlayerGroupNextPlayer(auto22C84294_g, auto22C84294_var);
            if (auto22C84294_var < 0) { break; }
            libNtve_gf_SetAllianceOneWay(0, auto22C84294_var, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            TechTreeAbilityAllow(auto22C84294_var, AbilityCommand("move", 0), false);
            TechTreeAbilityAllow(auto22C84294_var, AbilityCommand("move", 1), false);
            TechTreeAbilityAllow(auto22C84294_var, AbilityCommand("attack", 0), false);
            TechTreeAbilityAllow(auto22C84294_var, AbilityCommand("stop", 0), false);
            TechTreeAbilityAllow(auto22C84294_var, AbilityCommand("move", 3), false);
            lv_targetUnit = UnitGroupClosestToPoint(UnitGroupFilterPlayer(UnitGroupAlliance(auto22C84294_var, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), auto22C84294_var, 0), CameraGetTarget(auto22C84294_var));
            RegionSetCenter(RegionFromId(172), UnitGetPosition(lv_targetUnit));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling2", 0, 0, RegionRandomPoint(RegionFromId(172)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling3", 0, 0, RegionRandomPoint(RegionFromId(172)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
        }
        Wait(3.0, c_timeReal);
        lv_livingTargetPlayers = 0;
        auto63A0D88F_g = lv_theTargetPlayers;
        auto63A0D88F_var = -1;
        while (true) {
            auto63A0D88F_var = PlayerGroupNextPlayer(auto63A0D88F_g, auto63A0D88F_var);
            if (auto63A0D88F_var < 0) { break; }
            if ((gf_IsPlayerOnline(auto63A0D88F_var) == true)) {
                lv_livingTargetPlayers += 1;
            }
            else {
                PlayerGroupRemove(lv_theTargetPlayers, auto63A0D88F_var);
            }
        }
        while ((lv_livingTargetPlayers > 0)) {
            autoE541B1A6_g = lv_theTargetPlayers;
            autoE541B1A6_var = -1;
            while (true) {
                autoE541B1A6_var = PlayerGroupNextPlayer(autoE541B1A6_g, autoE541B1A6_var);
                if (autoE541B1A6_var < 0) { break; }
                autoEDF01E8A_g = UnitGroupFilter(UnitGetType(gv_probes[autoE541B1A6_var]), autoE541B1A6_var, UnitGroup(null, autoE541B1A6_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoEDF01E8A_u = UnitGroupCount(autoEDF01E8A_g, c_unitCountAll);
                for (;; autoEDF01E8A_u -= 1) {
                    autoEDF01E8A_var = UnitGroupUnitFromEnd(autoEDF01E8A_g, autoEDF01E8A_u);
                    if (autoEDF01E8A_var == null) { break; }
                    RegionSetCenter(RegionFromId(172), UnitGetPosition(autoEDF01E8A_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling2", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), autoEDF01E8A_var), c_orderQueueReplace);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling3", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), autoEDF01E8A_var), c_orderQueueReplace);
                }
                auto9AF621C7_g = UnitGroupFilter(UnitGetType(gv_zealots[autoE541B1A6_var]), autoE541B1A6_var, UnitGroup(null, autoE541B1A6_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9AF621C7_u = UnitGroupCount(auto9AF621C7_g, c_unitCountAll);
                for (;; auto9AF621C7_u -= 1) {
                    auto9AF621C7_var = UnitGroupUnitFromEnd(auto9AF621C7_g, auto9AF621C7_u);
                    if (auto9AF621C7_var == null) { break; }
                    RegionSetCenter(RegionFromId(172), UnitGetPosition(auto9AF621C7_var));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling2", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), auto9AF621C7_var), c_orderQueueReplace);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling3", c_unitCreateIgnorePlacement, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), auto9AF621C7_var), c_orderQueueReplace);
                }
            }
            Wait(3.0, c_timeReal);
            lv_livingTargetPlayers = 0;
            auto1659C7F6_g = lv_theTargetPlayers;
            auto1659C7F6_var = -1;
            while (true) {
                auto1659C7F6_var = PlayerGroupNextPlayer(auto1659C7F6_g, auto1659C7F6_var);
                if (auto1659C7F6_var < 0) { break; }
                if ((gf_IsPlayerOnline(auto1659C7F6_var) == true)) {
                    lv_livingTargetPlayers += 1;
                }
                else {
                    PlayerGroupRemove(lv_theTargetPlayers, auto1659C7F6_var);
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_penguin_Init () {
    gt_penguin = TriggerCreate("gt_penguin_Func");
    TriggerAddEventChatMessage(gt_penguin, c_playerAny, "-penguin", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -meteor
//--------------------------------------------------------------------------------------------------
bool gt_meteor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    playergroup lv_allPlayersNowAlive;
    int lv_allPlayersNowAliveCount;
    unit lv_targetUnit;
    int lv_calldownSpeed;

    // Automatic Variable Declarations
    const int auto3830543F_ae = 14;
    const int auto3830543F_ai = 1;
    playergroup auto8B4A2024_g;
    int auto8B4A2024_var;
    const int autoC9117936_ae = 14;
    const int autoC9117936_ai = 1;
    playergroup autoBA6DAC58_g;
    int autoBA6DAC58_var;
    unitgroup autoF9B1EE46_g;
    int autoF9B1EE46_u;
    unit autoF9B1EE46_var;
    const int autoC6A70ED5_ae = 14;
    const int autoC6A70ED5_ai = 1;

    // Variable Initialization
    lv_allPlayersNowAlive = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_penguinsCameOnMeteors = 1;
    lv_i = 1;
    for ( ; ( (auto3830543F_ai >= 0 && lv_i <= auto3830543F_ae) || (auto3830543F_ai < 0 && lv_i >= auto3830543F_ae) ) ; lv_i += auto3830543F_ai ) {
        if ((gf_IsPlayerOnline(lv_i) == true)) {
            PlayerGroupAdd(lv_allPlayersNowAlive, lv_i);
            lv_allPlayersNowAliveCount += 1;
        }

    }
    if ((lv_allPlayersNowAliveCount == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CE31F715"));
    }
    else {
        UIDisplayMessage(lv_allPlayersNowAlive, c_messageAreaDebug, StringExternal("Param/Value/378B6DE8"));
        Wait(2.5, c_timeGame);
        auto8B4A2024_g = lv_allPlayersNowAlive;
        auto8B4A2024_var = -1;
        while (true) {
            auto8B4A2024_var = PlayerGroupNextPlayer(auto8B4A2024_g, auto8B4A2024_var);
            if (auto8B4A2024_var < 0) { break; }
            Wait(1.0, c_timeGame);
            TechTreeAbilityAllow(auto8B4A2024_var, AbilityCommand("attack", 0), false);
            libNtve_gf_SetAlliance(auto8B4A2024_var, 0, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            lv_targetUnit = UnitGroupClosestToPoint(UnitGroupFilterPlayer(UnitGroupAlliance(auto8B4A2024_var, c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), auto8B4A2024_var, 0), CameraGetTarget(auto8B4A2024_var));
            PlayerCreateEffectUnit(0, "CalldownMULECreateSet", lv_targetUnit);
            PlayerCreateEffectUnit(0, "CalldownMULECreatePersistent", lv_targetUnit);
            RegionSetCenter(RegionFromId(172), UnitGetPosition(lv_targetUnit));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling2", 0, 0, RegionRandomPoint(RegionFromId(172)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(lv_targetUnit));
            PlayerCreateEffectUnit(0, "CalldownMULECreateSet", lv_targetUnit);
            PlayerCreateEffectUnit(0, "CalldownMULECreatePersistent", lv_targetUnit);
            RegionSetCenter(RegionFromId(172), UnitGetPosition(lv_targetUnit));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling3", 0, 0, RegionRandomPoint(RegionFromId(172)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
            libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(lv_targetUnit));
        }
        UIDisplayMessage(lv_allPlayersNowAlive, c_messageAreaDebug, StringExternal("Param/Value/466CC7D7"));
        Wait(7.0, c_timeGame);
        lv_i = 1;
        for ( ; ( (autoC9117936_ai >= 0 && lv_i <= autoC9117936_ae) || (autoC9117936_ai < 0 && lv_i >= autoC9117936_ae) ) ; lv_i += autoC9117936_ai ) {
            if ((gf_IsPlayerOnline(lv_i) == true)) {
                PlayerGroupAdd(lv_allPlayersNowAlive, lv_i);
                lv_allPlayersNowAliveCount += 1;
            }

        }
        libNtve_gf_SetPlayerGroupAlliance(lv_allPlayersNowAlive, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        while ((lv_allPlayersNowAliveCount > 0)) {
            autoBA6DAC58_g = lv_allPlayersNowAlive;
            autoBA6DAC58_var = -1;
            while (true) {
                autoBA6DAC58_var = PlayerGroupNextPlayer(autoBA6DAC58_g, autoBA6DAC58_var);
                if (autoBA6DAC58_var < 0) { break; }
                autoF9B1EE46_g = UnitGroup(null, autoBA6DAC58_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF9B1EE46_u = UnitGroupCount(autoF9B1EE46_g, c_unitCountAll);
                for (;; autoF9B1EE46_u -= 1) {
                    autoF9B1EE46_var = UnitGroupUnitFromEnd(autoF9B1EE46_g, autoF9B1EE46_u);
                    if (autoF9B1EE46_var == null) { break; }
                    lv_targetUnit = autoF9B1EE46_var;
                    PlayerCreateEffectUnit(0, "CalldownMULECreateSet", lv_targetUnit);
                    PlayerCreateEffectUnit(0, "CalldownMULECreatePersistent", lv_targetUnit);
                    RegionSetCenter(RegionFromId(172), UnitGetPosition(lv_targetUnit));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling2", 0, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(lv_targetUnit));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling3", 0, 0, RegionRandomPoint(RegionFromId(172)));
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, UnitGetOwner(lv_targetUnit));
                }
            }
            Wait(7.0, c_timeGame);
            lv_i = 1;
            for ( ; ( (autoC6A70ED5_ai >= 0 && lv_i <= autoC6A70ED5_ae) || (autoC6A70ED5_ai < 0 && lv_i >= autoC6A70ED5_ae) ) ; lv_i += autoC6A70ED5_ai ) {
                if ((gf_IsPlayerOnline(lv_i) == true)) {
                    PlayerGroupAdd(lv_allPlayersNowAlive, lv_i);
                    lv_allPlayersNowAliveCount += 1;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_meteor_Init () {
    gt_meteor = TriggerCreate("gt_meteor_Func");
    TriggerAddEventChatMessage(gt_meteor, c_playerAny, "-meteor", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -cloak
//--------------------------------------------------------------------------------------------------
bool gt_cloak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCA14C71B_g;
    int autoCA14C71B_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCA14C71B_g = PlayerGroupActive();
    autoCA14C71B_var = -1;
    while (true) {
        autoCA14C71B_var = PlayerGroupNextPlayer(autoCA14C71B_g, autoCA14C71B_var);
        if (autoCA14C71B_var < 0) { break; }
        if ((EventPlayer() != autoCA14C71B_var)) {
            PlayerSetAlliance(EventPlayer(), c_allianceIdVision, autoCA14C71B_var, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cloak_Init () {
    gt_cloak = TriggerCreate("gt_cloak_Func");
    TriggerAddEventChatMessage(gt_cloak, c_playerAny, "-cloak", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -mute (experimental)
//--------------------------------------------------------------------------------------------------
bool gt_muteexperimental_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto90E01428_g;
    int auto90E01428_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeMinimapPanel, false);
    auto90E01428_g = PlayerGroupActive();
    auto90E01428_var = -1;
    while (true) {
        auto90E01428_var = PlayerGroupNextPlayer(auto90E01428_g, auto90E01428_var);
        if (auto90E01428_var < 0) { break; }
        if ((EventPlayer() != auto90E01428_var)) {
            PlayerSetAlliance(auto90E01428_var, c_allianceIdVision, EventPlayer(), false);
            PlayerSetAlliance(EventPlayer(), c_allianceIdVision, auto90E01428_var, false);
        }

    }
    VisExploreArea(EventPlayer(), RegionPlayableMap(), false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_muteexperimental_Init () {
    gt_muteexperimental = TriggerCreate("gt_muteexperimental_Func");
    TriggerAddEventChatMessage(gt_muteexperimental, c_playerAny, "-mute", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -poweroverwhelming
//--------------------------------------------------------------------------------------------------
bool gt_poweroverwhelming_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;

    // Automatic Variable Declarations
    unitgroup auto3AC79F3D_g;
    int auto3AC79F3D_u;
    unit auto3AC79F3D_var;

    // Variable Initialization
    lv_scale = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3AC79F3D_g = UnitGroupSelected(EventPlayer());
    auto3AC79F3D_u = UnitGroupCount(auto3AC79F3D_g, c_unitCountAll);
    for (;; auto3AC79F3D_u -= 1) {
        auto3AC79F3D_var = UnitGroupUnitFromEnd(auto3AC79F3D_g, auto3AC79F3D_u);
        if (auto3AC79F3D_var == null) { break; }
        if ((libNtve_gf_UnitIsInvulnerable(auto3AC79F3D_var) == false)) {
            libNtve_gf_MakeUnitInvulnerable(auto3AC79F3D_var, true);
        }
        else {
            libNtve_gf_MakeUnitInvulnerable(auto3AC79F3D_var, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_poweroverwhelming_Init () {
    gt_poweroverwhelming = TriggerCreate("gt_poweroverwhelming_Func");
    TriggerAddEventChatMessage(gt_poweroverwhelming, c_playerAny, "-poweroverwhelming", true);
    TriggerAddEventChatMessage(gt_poweroverwhelming, c_playerAny, "-powero", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -makezealot
//--------------------------------------------------------------------------------------------------
bool gt_makezealot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;
    int lv_colorNumber;
    int lv_playerNumber;
    string lv_string;
    int lv_testInt;
    int lv_i;

    // Automatic Variable Declarations
    const int auto1CB939FC_ae = 14;
    const int auto1CB939FC_ai = 1;
    unitgroup auto090DB0AC_g;
    int auto090DB0AC_u;
    unit auto090DB0AC_var;

    // Variable Initialization
    lv_scale = "";
    lv_colorNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        gv_setSideCmdIssued = true;
        gv_setSideCmdPlayer = PlayerGroupSingle(EventPlayer());
        auto090DB0AC_g = UnitGroupSelected(EventPlayer());
        auto090DB0AC_u = UnitGroupCount(auto090DB0AC_g, c_unitCountAll);
        for (;; auto090DB0AC_u -= 1) {
            auto090DB0AC_var = UnitGroupUnitFromEnd(auto090DB0AC_g, auto090DB0AC_u);
            if (auto090DB0AC_var == null) { break; }
            gv_setSideMakeZealot = UnitGetOwner(auto090DB0AC_var);
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/A2C85501") + TextWithColor(PlayerName(gv_setSideMakeZealot), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_setSideMakeZealot, false)))));
        UIDisplayMessage(PlayerGroupSingle(gv_setSideMakeZealot), c_messageAreaSubtitle, (StringExternal("Param/Value/B6B02D60") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/B7020810")));
    }
    else {
        lv_string = StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)));
        lv_testInt = StringToInt(lv_string);
        if (((lv_testInt >= 1) && (lv_testInt <= 14))) {
            lv_playerNumber = lv_testInt;
            if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                gv_setSideCmdIssued = true;
                gv_setSideCmdPlayer = PlayerGroupSingle(EventPlayer());
                gv_setSideMakeZealot = lv_playerNumber;
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/A8B8A7C7") + TextWithColor(PlayerName(gv_setSideMakeZealot), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_setSideMakeZealot, false)))));
                UIDisplayMessage(PlayerGroupSingle(gv_setSideMakeZealot), c_messageAreaSubtitle, (StringExternal("Param/Value/8D409007") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8BFAA92F")));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/7C13F272") + StringToText(lv_string)));
            }
        }
        else {
            lv_colorNumber = gf_GetStringColorNumber(lv_string);
            if (((lv_colorNumber >= 1) && (lv_colorNumber <= 15))) {
                lv_i = 1;
                for ( ; ( (auto1CB939FC_ai >= 0 && lv_i <= auto1CB939FC_ae) || (auto1CB939FC_ai < 0 && lv_i >= auto1CB939FC_ae) ) ; lv_i += auto1CB939FC_ai ) {
                    if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                        lv_playerNumber = lv_i;
                        lv_i = 15;
                    }

                }
                if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                    if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                        gv_setSideCmdIssued = true;
                        gv_setSideCmdPlayer = PlayerGroupSingle(EventPlayer());
                        gv_setSideMakeZealot = lv_playerNumber;
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/F1A3074B") + TextWithColor(PlayerName(gv_setSideMakeZealot), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_setSideMakeZealot, false)))));
                        UIDisplayMessage(PlayerGroupSingle(gv_setSideMakeZealot), c_messageAreaSubtitle, (StringExternal("Param/Value/C0E0BDB2") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/FB760617")));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/D9A79C84") + StringToText(lv_string)));
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/190B7221") + StringToText(lv_string)));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/01813D59") + StringExternal("Param/Value/BEC6C5C7")));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_makezealot_Init () {
    gt_makezealot = TriggerCreate("gt_makezealot_Func");
    TriggerAddEventChatMessage(gt_makezealot, c_playerAny, "-makez", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -revive
//--------------------------------------------------------------------------------------------------
bool gt_revive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Probe", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_revive_Init () {
    gt_revive = TriggerCreate("gt_revive_Func");
    TriggerAddEventChatMessage(gt_revive, c_playerAny, "-revive", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -premium
//--------------------------------------------------------------------------------------------------
bool gt_premium_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CheckPremiumProbe();
    gf_CheckPremiumZealot();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_premium_Init () {
    gt_premium = TriggerCreate("gt_premium_Func");
    TriggerAddEventChatMessage(gt_premium, c_playerAny, "-premium", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -zealot
//--------------------------------------------------------------------------------------------------
bool gt_zealot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    string auto8DABFEC7_val;

    // Variable Initialization
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringWord(EventChatMessage(false), 2);
    auto8DABFEC7_val = lv_string;
    if (auto8DABFEC7_val == "shop") {
        libNtve_gf_CreateUnitsAtPoint2(1, "Factory", 0, 0, CameraGetTarget(EventPlayer()));
    }
    else if (auto8DABFEC7_val == "spawn") {
        libNtve_gf_CreateUnitsAtPoint2(1, "PrisonZealot", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else if (auto8DABFEC7_val == "feed") {
        libNtve_gf_CreateUnitsAtPoint2(1, "LargePalletMinerals", 0, 0, CameraGetTarget(EventPlayer()));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/24B3F67A") + StringExternal("Param/Value/4CA7D210")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zealot_Init () {
    gt_zealot = TriggerCreate("gt_zealot_Func");
    TriggerAddEventChatMessage(gt_zealot, c_playerAny, "-zealot", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -feed
//--------------------------------------------------------------------------------------------------
bool gt_feed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string2;
    int lv_int2;
    string lv_string3;
    int lv_int3;

    // Automatic Variable Declarations
    string auto5695E1C5_val;

    // Variable Initialization
    lv_string2 = "";
    lv_string3 = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string3 = StringWord(EventChatMessage(false), 3);
    lv_string2 = StringWord(EventChatMessage(false), 2);
    lv_int3 = StringToInt(lv_string3);
    lv_int2 = StringToInt(lv_string2);
    if ((lv_int2 > 0)) {
        lv_string2 = "here";
        lv_int3 = lv_int2;
    }
    else {
        lv_string2 = "shop";
        if ((lv_int3 > 0)) {
        }
        else {
            lv_int3 = 1;
        }
    }
    if ((lv_int3 > 4)) {
        lv_int3 = 2;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/C72E431C") + StringExternal("Param/Value/794AB5A7")));
    }

    auto5695E1C5_val = lv_string2;
    if (auto5695E1C5_val == "shop") {
        libNtve_gf_CreateUnitsAtPoint2(lv_int3, "LargePalletMinerals", 0, 0, RegionRandomPoint(RegionFromId(6)));
    }
    else if (auto5695E1C5_val == "here") {
        libNtve_gf_CreateUnitsAtPoint2(lv_int3, "LargePalletMinerals", 0, 0, CameraGetTarget(EventPlayer()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_feed_Init () {
    gt_feed = TriggerCreate("gt_feed_Func");
    TriggerAddEventChatMessage(gt_feed, c_playerAny, "-feed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -spirit
//--------------------------------------------------------------------------------------------------
bool gt_spirit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    string auto2AC636C1_val;

    // Variable Initialization
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringWord(EventChatMessage(false), 2);
    auto2AC636C1_val = lv_string;
    if (auto2AC636C1_val == "spawn") {
        libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else if (auto2AC636C1_val == "upgrade") {
        libNtve_gf_CreateUnitsAtPoint2(1, "HighTemplar", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/6A3952B8") + StringExternal("Param/Value/8D2FAC95")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spirit_Init () {
    gt_spirit = TriggerCreate("gt_spirit_Func");
    TriggerAddEventChatMessage(gt_spirit, c_playerAny, "-spirit", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -hunter
//--------------------------------------------------------------------------------------------------
bool gt_hunter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    string autoDB48E0AF_val;

    // Variable Initialization
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringWord(EventChatMessage(false), 2);
    autoDB48E0AF_val = lv_string;
    if (autoDB48E0AF_val == "spawn") {
        libNtve_gf_CreateUnitsAtPoint2(1, "Predator", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else if (autoDB48E0AF_val == "upgrade") {
        libNtve_gf_CreateUnitsAtPoint2(1, "Predator", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/45A93F07") + StringExternal("Param/Value/C0DD0190")));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hunter_Init () {
    gt_hunter = TriggerCreate("gt_hunter_Func");
    TriggerAddEventChatMessage(gt_hunter, c_playerAny, "-hunter", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -kick
//--------------------------------------------------------------------------------------------------
bool gt_kick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colorNumber;
    int lv_playerNumber;
    string lv_string;
    int lv_testInt;
    int lv_i;

    // Automatic Variable Declarations
    const int auto2DA02E4D_ae = 14;
    const int auto2DA02E4D_ai = 1;

    // Variable Initialization
    lv_colorNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));
    lv_testInt = StringToInt(lv_string);
    if (((lv_testInt >= 1) && (lv_testInt <= 14))) {
        lv_playerNumber = lv_testInt;
        if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/80A56978") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
            Wait(2.0, c_timeReal);
            GameOver(lv_playerNumber, c_gameOverDefeat, false, false);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/55C464E2") + StringToText(lv_string)));
        }
    }
    else {
        lv_colorNumber = gf_GetStringColorNumber(lv_string);
        if (((lv_colorNumber >= 1) && (lv_colorNumber <= 15))) {
            lv_i = 1;
            for ( ; ( (auto2DA02E4D_ai >= 0 && lv_i <= auto2DA02E4D_ae) || (auto2DA02E4D_ai < 0 && lv_i >= auto2DA02E4D_ae) ) ; lv_i += auto2DA02E4D_ai ) {
                if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                    lv_playerNumber = lv_i;
                    lv_i = 15;
                }

            }
            if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                    if (((gf_PlayerIsDeveloper(lv_playerNumber) == false) || (gf_PlayerIsDeveloper(EventPlayer()) == true))) {
                        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/3E393E6A") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
                        Wait(2.0, c_timeReal);
                        GameOver(lv_playerNumber, c_gameOverDefeat, true, true);
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C97AF819")));
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/801AA88A")));
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/E6342A99") + StringToText(lv_string)));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/053AB8FD") + StringToText(lv_string)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/B8A3841C") + StringExternal("Param/Value/5A0B8883")));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kick_Init () {
    gt_kick = TriggerCreate("gt_kick_Func");
    TriggerAddEventChatMessage(gt_kick, c_playerAny, "-kick ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -kick selected
//--------------------------------------------------------------------------------------------------
bool gt_kickselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNumber;

    // Automatic Variable Declarations
    unitgroup autoB61D941A_g;
    int autoB61D941A_u;
    unit autoB61D941A_var;

    // Variable Initialization
    lv_playerNumber = -1;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB61D941A_g = UnitGroupSelected(EventPlayer());
    autoB61D941A_u = UnitGroupCount(autoB61D941A_g, c_unitCountAll);
    for (;; autoB61D941A_u -= 1) {
        autoB61D941A_var = UnitGroupUnitFromEnd(autoB61D941A_g, autoB61D941A_u);
        if (autoB61D941A_var == null) { break; }
        if ((lv_playerNumber < 0)) {
            lv_playerNumber = UnitGetOwner(autoB61D941A_var);
            if (((gf_PlayerIsDeveloper(lv_playerNumber) == false) || (gf_PlayerIsDeveloper(EventPlayer()) == true))) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/12D6159B") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
                Wait(2.0, c_timeReal);
                GameOver(lv_playerNumber, c_gameOverDefeat, true, true);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/81074E3A")));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/B17D2C80")));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kickselected_Init () {
    gt_kickselected = TriggerCreate("gt_kickselected_Func");
    TriggerAddEventChatMessage(gt_kickselected, c_playerAny, "-kick", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -salvage
//--------------------------------------------------------------------------------------------------
bool gt_salvage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colorNumber;
    int lv_playerNumber;
    string lv_string;
    int lv_testInt;
    int lv_i;

    // Automatic Variable Declarations
    const int auto9A497F4C_ae = 14;
    const int auto9A497F4C_ai = 1;
    unitgroup auto2DC0E982_g;
    int auto2DC0E982_u;
    unit auto2DC0E982_var;
    unitgroup auto31047B9D_g;
    int auto31047B9D_u;
    unit auto31047B9D_var;

    // Variable Initialization
    lv_colorNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));
    lv_testInt = StringToInt(lv_string);
    if (((lv_testInt >= 1) && (lv_testInt <= 14))) {
        lv_playerNumber = lv_testInt;
        if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/AF1378CE") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
            auto31047B9D_g = UnitGroup(null, lv_playerNumber, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto31047B9D_u = UnitGroupCount(auto31047B9D_g, c_unitCountAll);
            for (;; auto31047B9D_u -= 1) {
                auto31047B9D_var = UnitGroupUnitFromEnd(auto31047B9D_g, auto31047B9D_u);
                if (auto31047B9D_var == null) { break; }
                if ((UnitTypeTestFlag(UnitGetType(auto31047B9D_var), c_unitFlagWorker) == false)) {
                    UnitIssueOrder(auto31047B9D_var, Order(AbilityCommand("Destroy", 0)), c_orderQueueReplace);
                    UnitIssueOrder(auto31047B9D_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
                    UnitIssueOrder(auto31047B9D_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
                    UnitIssueOrder(auto31047B9D_var, Order(AbilityCommand("SelfDestruct", 0)), c_orderQueueReplace);
                }

                if ((UnitGetType(auto31047B9D_var) == "Probe")) {
                    RegionSetCenter(RegionFromId(96), gv_centerPoint);
                    CameraSetValue(UnitGetOwner(auto31047B9D_var), c_cameraValueYaw, 90.0, 0.5, -1, 10.0);
                    CameraPan(UnitGetOwner(auto31047B9D_var), gv_centerPoint, 1.0, -1, 10.0, false);
                    UnitSetPosition(auto31047B9D_var, RegionRandomPoint(RegionFromId(96)), true);
                    UnitBehaviorAdd(auto31047B9D_var, "CloakProbe", UnitBehaviorEffectUnit(auto31047B9D_var, "CloakProbe", c_effectUnitCaster, 0), 1);
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/A77C3B84") + StringToText(lv_string)));
        }
    }
    else {
        lv_colorNumber = gf_GetStringColorNumber(lv_string);
        if (((lv_colorNumber >= 1) && (lv_colorNumber <= 15))) {
            lv_i = 1;
            for ( ; ( (auto9A497F4C_ai >= 0 && lv_i <= auto9A497F4C_ae) || (auto9A497F4C_ai < 0 && lv_i >= auto9A497F4C_ae) ) ; lv_i += auto9A497F4C_ai ) {
                if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                    lv_playerNumber = lv_i;
                    lv_i = 15;
                }

            }
            if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                    if (((gf_PlayerIsDeveloper(lv_playerNumber) == false) || (gf_PlayerIsDeveloper(EventPlayer()) == true))) {
                        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/3A07E8A5") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
                        auto2DC0E982_g = UnitGroup(null, lv_playerNumber, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
                        auto2DC0E982_u = UnitGroupCount(auto2DC0E982_g, c_unitCountAll);
                        for (;; auto2DC0E982_u -= 1) {
                            auto2DC0E982_var = UnitGroupUnitFromEnd(auto2DC0E982_g, auto2DC0E982_u);
                            if (auto2DC0E982_var == null) { break; }
                            if ((UnitTypeTestFlag(UnitGetType(auto2DC0E982_var), c_unitFlagWorker) == false)) {
                                UnitIssueOrder(auto2DC0E982_var, Order(AbilityCommand("Destroy", 0)), c_orderQueueReplace);
                                UnitIssueOrder(auto2DC0E982_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
                                UnitIssueOrder(auto2DC0E982_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
                                UnitIssueOrder(auto2DC0E982_var, Order(AbilityCommand("SelfDestruct", 0)), c_orderQueueReplace);
                            }

                            if ((UnitGetType(auto2DC0E982_var) == "Probe")) {
                                RegionSetCenter(RegionFromId(96), gv_centerPoint);
                                CameraSetValue(UnitGetOwner(auto2DC0E982_var), c_cameraValueYaw, 90.0, 0.5, -1, 10.0);
                                CameraPan(UnitGetOwner(auto2DC0E982_var), gv_centerPoint, 1.0, -1, 10.0, false);
                                UnitSetPosition(auto2DC0E982_var, RegionRandomPoint(RegionFromId(96)), true);
                                UnitBehaviorAdd(auto2DC0E982_var, "CloakProbe", UnitBehaviorEffectUnit(auto2DC0E982_var, "CloakProbe", c_effectUnitCaster, 0), 1);
                            }

                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/A318E154")));
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/FC4974CE")));
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/D072835B") + StringToText(lv_string)));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/D35E6FAB") + StringToText(lv_string)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/BA230222") + StringExternal("Param/Value/A845BE2A")));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_salvage_Init () {
    gt_salvage = TriggerCreate("gt_salvage_Func");
    TriggerAddEventChatMessage(gt_salvage, c_playerAny, "-salv ", false);
    TriggerAddEventChatMessage(gt_salvage, c_playerAny, "-sell ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -salvage selected
//--------------------------------------------------------------------------------------------------
bool gt_salvageselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNumber;

    // Automatic Variable Declarations
    unitgroup auto8DF48AEB_g;
    int auto8DF48AEB_u;
    unit auto8DF48AEB_var;
    unitgroup auto2442537C_g;
    int auto2442537C_u;
    unit auto2442537C_var;

    // Variable Initialization
    lv_playerNumber = -1;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8DF48AEB_g = UnitGroupSelected(EventPlayer());
    auto8DF48AEB_u = UnitGroupCount(auto8DF48AEB_g, c_unitCountAll);
    for (;; auto8DF48AEB_u -= 1) {
        auto8DF48AEB_var = UnitGroupUnitFromEnd(auto8DF48AEB_g, auto8DF48AEB_u);
        if (auto8DF48AEB_var == null) { break; }
        if ((lv_playerNumber < 0)) {
            lv_playerNumber = UnitGetOwner(auto8DF48AEB_var);
            if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (TextWithColor(PlayerName(lv_playerNumber), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerNumber, false))) + StringExternal("Param/Value/6AA4BD05") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
                auto2442537C_g = UnitGroup(null, lv_playerNumber, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
                auto2442537C_u = UnitGroupCount(auto2442537C_g, c_unitCountAll);
                for (;; auto2442537C_u -= 1) {
                    auto2442537C_var = UnitGroupUnitFromEnd(auto2442537C_g, auto2442537C_u);
                    if (auto2442537C_var == null) { break; }
                    if ((UnitTypeTestFlag(UnitGetType(auto2442537C_var), c_unitFlagWorker) == false)) {
                        UnitIssueOrder(auto2442537C_var, Order(AbilityCommand("Destroy", 0)), c_orderQueueReplace);
                        UnitIssueOrder(auto2442537C_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
                        UnitIssueOrder(auto2442537C_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
                        UnitIssueOrder(auto2442537C_var, Order(AbilityCommand("SelfDestruct", 0)), c_orderQueueReplace);
                    }

                    if ((UnitGetType(auto2442537C_var) == "Probe")) {
                        RegionSetCenter(RegionFromId(96), gv_centerPoint);
                        CameraSetValue(UnitGetOwner(auto2442537C_var), c_cameraValueYaw, 90.0, 0.5, -1, 10.0);
                        CameraPan(UnitGetOwner(auto2442537C_var), gv_centerPoint, 1.0, -1, 10.0, false);
                        UnitSetPosition(auto2442537C_var, RegionRandomPoint(RegionFromId(96)), true);
                        UnitBehaviorAdd(auto2442537C_var, "CloakProbe", UnitBehaviorEffectUnit(auto2442537C_var, "CloakProbe", c_effectUnitCaster, 0), 1);
                    }

                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/AE737A66") + StringExternal("Param/Value/01B67F46")));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_salvageselected_Init () {
    gt_salvageselected = TriggerCreate("gt_salvageselected_Func");
    TriggerAddEventChatMessage(gt_salvageselected, c_playerAny, "-salv", true);
    TriggerAddEventChatMessage(gt_salvageselected, c_playerAny, "-sell", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -map
//--------------------------------------------------------------------------------------------------
bool gt_map_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mapNumber;
    int lv_playerNumber;
    string lv_string;
    int lv_testInt;
    int lv_i;

    // Automatic Variable Declarations
    string auto90007ED5_val;

    // Variable Initialization
    lv_mapNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringSub(EventChatMessage(false), 6, StringLength(EventChatMessage(false)));
    lv_testInt = StringToInt(lv_string);
    if (((lv_testInt >= 1) && (lv_testInt <= 13))) {
        gv_setMapCmd = lv_testInt;
        gv_setMapCmdIssued = true;
        gv_setMapCmdPlayer = PlayerGroupSingle(EventPlayer());
    }
    else {
        lv_string = StringCase(lv_string, false);
        gv_setMapCmdIssued = true;
        gv_setMapCmdPlayer = PlayerGroupSingle(EventPlayer());
        auto90007ED5_val = StringSub(lv_string, 1, MinI(5, StringLength(lv_string)));
        if (auto90007ED5_val == "campi") {
            gv_setMapCmd = 1;
        }
        else if (auto90007ED5_val == "ct") {
            gv_setMapCmd = 1;
        }
        else if (auto90007ED5_val == "templ") {
            gv_setMapCmd = 2;
        }
        else if (auto90007ED5_val == "tr") {
            gv_setMapCmd = 2;
        }
        else if (auto90007ED5_val == "close") {
            gv_setMapCmd = 3;
        }
        else if (auto90007ED5_val == "cq") {
            gv_setMapCmd = 3;
        }
        else if (auto90007ED5_val == "up") {
            gv_setMapCmd = 5;
        }
        else if (auto90007ED5_val == "down") {
            gv_setMapCmd = 4;
        }
        else if (auto90007ED5_val == "right") {
            gv_setMapCmd = 7;
        }
        else if (auto90007ED5_val == "left") {
            gv_setMapCmd = 6;
        }
        else if (auto90007ED5_val == "br") {
            gv_setMapCmd = 8;
        }
        else if (auto90007ED5_val == "ctc") {
            gv_setMapCmd = 9;
        }
        else if (auto90007ED5_val == "top") {
            gv_setMapCmd = 9;
        }
        else if (auto90007ED5_val == "large") {
            gv_setMapCmd = 9;
        }
        else if (auto90007ED5_val == "twist") {
            gv_setMapCmd = 10;
        }
        else if (auto90007ED5_val == "chaos") {
            gv_setMapCmd = 10;
        }
        else if (auto90007ED5_val == "huge") {
            gv_setMapCmd = 10;
        }
        else if (auto90007ED5_val == "bl") {
            gv_setMapCmd = 11;
        }
        else if (auto90007ED5_val == "c+t") {
            gv_setMapCmd = 12;
        }
        else if (auto90007ED5_val == "ct+tr") {
            gv_setMapCmd = 12;
        }
        else if (auto90007ED5_val == "t+c") {
            gv_setMapCmd = 13;
        }
        else if (auto90007ED5_val == "tr+cq") {
            gv_setMapCmd = 13;
        }
        else {
            gv_setMapCmd = 0;
            gv_setMapCmdIssued = false;
            gv_setMapCmdPlayer = PlayerGroupEmpty();
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/257F1B3D"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_map_Init () {
    gt_map = TriggerCreate("gt_map_Func");
    TriggerAddEventChatMessage(gt_map, c_playerAny, "-map", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -speed
//--------------------------------------------------------------------------------------------------
bool gt_speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_setSpeedCmdIssued = true;
    gv_setSpeedCmdPlayer = PlayerGroupSingle(EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1D131A96"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_speed_Init () {
    gt_speed = TriggerCreate("gt_speed_Func");
    TriggerAddEventChatMessage(gt_speed, c_playerAny, "-speed", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set hunter
//--------------------------------------------------------------------------------------------------
bool gt_sethunter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto9C654DDD_ae = 15;
    const int auto9C654DDD_ai = 1;
    const int auto68BC6AC1_ae = 15;
    const int auto68BC6AC1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_maxHuntersAllowed = StringToInt(StringWord(EventChatMessage(false), 3));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/1733C758") + IntToText(StringToInt(StringWord(EventChatMessage(false), 3)))));
    if ((PlayerGroupCount(gv_playerGroupHunters) >= gv_maxHuntersAllowed)) {
        DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupAll(), false);
        lv_i = 0;
        for ( ; ( (auto68BC6AC1_ai >= 0 && lv_i <= auto68BC6AC1_ae) || (auto68BC6AC1_ai < 0 && lv_i >= auto68BC6AC1_ae) ) ; lv_i += auto68BC6AC1_ai ) {
            TechTreeSpecificRequirementEnable(lv_i, "HunterAllowed", false);
        }
    }
    else {
        DialogControlSetEnabled(gv_chooseHelpSideZealot, PlayerGroupAll(), true);
        lv_i = 0;
        for ( ; ( (auto9C654DDD_ai >= 0 && lv_i <= auto9C654DDD_ae) || (auto9C654DDD_ai < 0 && lv_i >= auto9C654DDD_ae) ) ; lv_i += auto9C654DDD_ai ) {
            TechTreeSpecificRequirementEnable(lv_i, "HunterAllowed", true);
            TechTreeUpgradeAddLevel(lv_i, "HuntersAllowed", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_sethunter_Init () {
    gt_sethunter = TriggerCreate("gt_sethunter_Func");
    TriggerAddEventChatMessage(gt_sethunter, c_playerAny, "-set hunter", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -say
//--------------------------------------------------------------------------------------------------
bool gt_say_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_sayingPrefix;
    string lv_section;
    string lv_command;
    string lv_content;
    string lv_reason;
    int lv_choice;
    int lv_playerNumber;
    int lv_playerColor;
    playergroup lv_tempPlayerGroup;
    int lv_i;

    // Automatic Variable Declarations
    string auto9400F792_val;
    int auto3A8D98F5_val;
    int auto2205DE7F_val;
    const int auto3A84F34F_ae = 14;
    const int auto3A84F34F_ai = 1;

    // Variable Initialization
    lv_section = "";
    lv_command = "";
    lv_content = "";
    lv_reason = "";
    lv_tempPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sayingPrefix = (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C1F463E8"));
    if ((gf_PlayerIsDeveloper(EventPlayer()) == true)) {
        lv_sayingPrefix = StringExternal("Param/Value/A06A5454");
    }
    else {
        if ((gf_PlayerIsModerator(EventPlayer()) == true)) {
            lv_sayingPrefix = StringExternal("Param/Value/5CD8D983");
        }

    }
    lv_command = StringCase(StringWord(EventChatMessage(false), 1), false);
    lv_section = StringCase(StringWord(EventChatMessage(false), 2), false);
    lv_content = StringCase(StringWord(EventChatMessage(false), 3), false);
    lv_choice = StringToInt(lv_content);
    if ((lv_choice > 0)) {
    }
    else {
        lv_choice = RandomInt(1, 15);
    }
    auto9400F792_val = lv_section;
    if (auto9400F792_val == "hi") {
        auto3A8D98F5_val = lv_choice;
        if (auto3A8D98F5_val == 1) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/10582443") + StringExternal("Param/Value/CE8146AC")));
        }
        else if (auto3A8D98F5_val == 2) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/EAA7154F") + StringExternal("Param/Value/5E2F6150")));
        }
        else if (auto3A8D98F5_val == 3) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/ED0568AE") + StringExternal("Param/Value/387DB36B")));
        }
        else if (auto3A8D98F5_val == 4) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/6752D5C8") + StringExternal("Param/Value/FA77D05C")));
        }
        else if (auto3A8D98F5_val == 5) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/AF1AD89A") + StringExternal("Param/Value/28EA630E")));
        }
        else if (auto3A8D98F5_val == 6) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/9E574BF4") + StringExternal("Param/Value/074D662F")));
        }
        else if (auto3A8D98F5_val == 7) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/84E1BD2B") + StringExternal("Param/Value/B0E14754")));
        }
        else if (auto3A8D98F5_val == 8) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/9A6D47C8") + StringExternal("Param/Value/72581889")));
        }
        else if (auto3A8D98F5_val == 9) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/BFD29B0E") + StringExternal("Param/Value/6907A988")));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/68ED57F2"));
        }
    }
    else if (auto9400F792_val == "z") {
        auto2205DE7F_val = lv_choice;
        if (auto2205DE7F_val == 1) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/85EEF7E8") + StringExternal("Param/Value/9BD70375")));
        }
        else if (auto2205DE7F_val == 2) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/1C781775") + StringExternal("Param/Value/9631463D")));
        }
        else if (auto2205DE7F_val == 3) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/CB413ED9") + StringExternal("Param/Value/7C28B034")));
        }
        else if (auto2205DE7F_val == 4) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/064BBD9A") + StringExternal("Param/Value/742D20D4")));
        }
        else if (auto2205DE7F_val == 5) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/EFD9533A") + StringExternal("Param/Value/CC95DB7C")));
        }
        else if (auto2205DE7F_val == 6) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/9FA6C9DC") + StringExternal("Param/Value/9CAB1C38")));
        }
        else if (auto2205DE7F_val == 7) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/25013DB6") + StringExternal("Param/Value/630F7F3B")));
        }
        else if (auto2205DE7F_val == 8) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/3EE596B0") + StringExternal("Param/Value/4FD24333")));
        }
        else if (auto2205DE7F_val == 9) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/DAE57ABB") + StringExternal("Param/Value/7622C8A1")));
        }
        else if (auto2205DE7F_val == 10) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/8430BDB6") + StringExternal("Param/Value/28926D58")));
        }
        else if (auto2205DE7F_val == 11) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/E0B3A996") + StringExternal("Param/Value/9250E75E")));
        }
        else if (auto2205DE7F_val == 12) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/B156ECAA") + StringExternal("Param/Value/6688AA8B")));
        }
        else if (auto2205DE7F_val == 13) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/E79ED20A") + StringExternal("Param/Value/2868F5B9")));
        }
        else if (auto2205DE7F_val == 14) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/8820D383") + StringExternal("Param/Value/05358D5A")));
        }
        else if (auto2205DE7F_val == 15) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/DAE44855") + StringExternal("Param/Value/769C6E19")));
        }
        else if (auto2205DE7F_val == 16) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/C1D84DF2") + StringExternal("Param/Value/36934E18")));
        }
        else if (auto2205DE7F_val == 17) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/E2867680") + StringExternal("Param/Value/DF4DF047")));
        }
        else if (auto2205DE7F_val == 18) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/C802997A") + StringExternal("Param/Value/BE928A95")));
        }
        else if (auto2205DE7F_val == 19) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/3486EBB3") + StringExternal("Param/Value/41760F96")));
        }
        else if (auto2205DE7F_val == 20) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/C15159B4") + StringExternal("Param/Value/C34C3D17")));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/21A5967F"));
        }
    }
    else if (auto9400F792_val == "warn") {
        if (((gf_PlayerIsModerator(EventPlayer()) == true) || (gf_PlayerIsDeveloper(EventPlayer()) == true))) {
            lv_reason = StringCase(StringWord(EventChatMessage(false), 4), false);
            if ((StringLength(lv_reason) > 0)) {
            }
            else {
                lv_reason = "Annoying Behaviour";
            }
            lv_playerColor = gf_GetStringColorNumber(lv_content);
            if (((lv_playerColor >= 1) && (lv_playerColor <= 15))) {
                lv_i = 1;
                for ( ; ( (auto3A84F34F_ai >= 0 && lv_i <= auto3A84F34F_ae) || (auto3A84F34F_ai < 0 && lv_i >= auto3A84F34F_ae) ) ; lv_i += auto3A84F34F_ai ) {
                    if ((gv_colorNumberofPlayer[lv_playerColor] == lv_i)) {
                        lv_playerNumber = lv_i;
                        lv_i = 15;
                    }

                }
                if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                    UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/47FC7A63") + StringToText(lv_reason) + StringExternal("Param/Value/B1DCD1F7")));
                    lv_tempPlayerGroup = PlayerGroupActive();
                    PlayerGroupRemove(lv_tempPlayerGroup, lv_playerNumber);
                    UIDisplayMessage(lv_tempPlayerGroup, c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/4D9E0128") + StringExternal("Param/Value/22DA9167")));
                    PlayerGroupClear(lv_tempPlayerGroup);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/8B82AF04") + StringExternal("Param/Value/8F8282BB")));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/EFBB35AB") + StringExternal("Param/Value/3237940D")));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/7EF8A39D") + StringExternal("Param/Value/97EE185E")));
        }
    }
    else if (auto9400F792_val == "text") {
        UIClearMessages(PlayerGroupActive(), c_messageAreaChat);
        if (((gf_PlayerIsModerator(EventPlayer()) == true) || (gf_PlayerIsDeveloper(EventPlayer()) == true))) {
            lv_content = StringCase(StringSub(EventChatMessage(false), 10, StringLength(EventChatMessage(false))), false);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringToText(lv_content) + StringExternal("Param/Value/66DC37F6")));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/823BFCEF") + StringExternal("Param/Value/319BABFD")));
        }
    }
    else if (auto9400F792_val == "terrazine") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/75F62F64") + StringExternal("Param/Value/D8C6FDB0")));
    }
    else if (auto9400F792_val == "regen") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/5FD8DF00") + StringExternal("Param/Value/371B5B38")));
    }
    else if (auto9400F792_val == "discord") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/635431A5") + StringExternal("Param/Value/969A6154")));
    }
    else if (auto9400F792_val == "terra") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/143625FB") + StringExternal("Param/Value/43A73AD8")));
    }
    else if (auto9400F792_val == "tbuff") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/D5A3C1B7") + StringExternal("Param/Value/5061C14F")));
    }
    else if (auto9400F792_val == "path") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/AE72AA90") + StringExternal("Param/Value/82CED3F7")));
    }
    else if (auto9400F792_val == "small") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/43F59D59") + StringExternal("Param/Value/FFAAE4D5")));
    }
    else if (auto9400F792_val == "mega") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/6C76D0E1") + StringExternal("Param/Value/8CED3C84")));
    }
    else if (auto9400F792_val == "gold") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/C0102914") + StringExternal("Param/Value/091CCFBE")));
    }
    else if (auto9400F792_val == "build") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/2E1DDCD1") + StringExternal("Param/Value/8E515CEE")));
    }
    else if (auto9400F792_val == "ninja") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/705C2305") + StringExternal("Param/Value/3CF56B65")));
    }
    else if (auto9400F792_val == "mod") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/64FC5FC3") + StringExternal("Param/Value/2A755BB5")));
    }
    else if (auto9400F792_val == "apply") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/3A61A340") + StringExternal("Param/Value/23B58D55")));
    }
    else if (auto9400F792_val == "damage") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/B1A7EB0D") + StringExternal("Param/Value/1E312646")));
    }
    else if (auto9400F792_val == "better") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/C238EA52") + StringExternal("Param/Value/F1C4F5A9")));
    }
    else if (auto9400F792_val == "skin") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/F8A45F6D") + StringExternal("Param/Value/D864EAFA")));
    }
    else if (auto9400F792_val == "beast") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/9B61F198") + StringExternal("Param/Value/FA514580")));
    }
    else if (auto9400F792_val == "cafe") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/A1BC41AA") + StringExternal("Param/Value/1F4F03D1")));
    }
    else if (auto9400F792_val == "base") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/E9DC0EB7") + StringExternal("Param/Value/C7AEDEDD")));
    }
    else if (auto9400F792_val == "train") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/EAFBE480") + StringExternal("Param/Value/6F5FA3EE")));
    }
    else if (auto9400F792_val == "spirit") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/5416D403") + StringExternal("Param/Value/E2165715")));
    }
    else if (auto9400F792_val == "spirit 1") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/5D971527") + StringExternal("Param/Value/B987028D")));
    }
    else if (auto9400F792_val == "spirit 2") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/343D2940") + StringExternal("Param/Value/2B41FD10")));
    }
    else if (auto9400F792_val == "hunt 1") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/468CFCF3") + StringExternal("Param/Value/537C5FF9")));
    }
    else if (auto9400F792_val == "hunt 2") {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/7F77AD12") + StringExternal("Param/Value/A754AA91")));
    }
    else if (auto9400F792_val == "coast") {
        if ((gf_PlayerIsTheWiseOne(EventPlayer()) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/BB2A84E7") + StringExternal("Param/Value/F8A52CF5")));
        }
        else {
            if (((gf_PlayerIsModerator(EventPlayer()) == false) && (gf_PlayerIsDeveloper(EventPlayer()) == false))) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/7FE0B734") + StringExternal("Param/Value/7E79543E")));
            }
            else {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_sayingPrefix + StringExternal("Param/Value/A449B31B") + StringExternal("Param/Value/003293E0")));
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/06C2C88A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_say_Init () {
    gt_say = TriggerCreate("gt_say_Func");
    TriggerAddEventChatMessage(gt_say, c_playerAny, "-say", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -hat
//--------------------------------------------------------------------------------------------------
bool gt_hat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto1640337F_val;
    unitgroup auto76944333_g;
    int auto76944333_u;
    unit auto76944333_var;
    unitgroup auto5A9AC660_g;
    int auto5A9AC660_u;
    unit auto5A9AC660_var;
    unitgroup auto7E1D40F8_g;
    int auto7E1D40F8_u;
    unit auto7E1D40F8_var;
    unitgroup autoDD8E5485_g;
    int autoDD8E5485_u;
    unit autoDD8E5485_var;
    unitgroup auto6DA7BE11_g;
    int auto6DA7BE11_u;
    unit auto6DA7BE11_var;
    unitgroup auto62A142B1_g;
    int auto62A142B1_u;
    unit auto62A142B1_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1640337F_val = StringCase(StringWord(EventChatMessage(false), 2), false);
    if (auto1640337F_val == "merlin") {
        auto76944333_g = UnitGroupSelected(EventPlayer());
        auto76944333_u = UnitGroupCount(auto76944333_g, c_unitCountAll);
        for (;; auto76944333_u -= 1) {
            auto76944333_var = UnitGroupUnitFromEnd(auto76944333_g, auto76944333_u);
            if (auto76944333_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto76944333_var, "MerlinHat", "Ref_Head Mount");
        }
    }
    else if (auto1640337F_val == "remove") {
        auto5A9AC660_g = UnitGroupSelected(EventPlayer());
        auto5A9AC660_u = UnitGroupCount(auto5A9AC660_g, c_unitCountAll);
        for (;; auto5A9AC660_u -= 1) {
            auto5A9AC660_var = UnitGroupUnitFromEnd(auto5A9AC660_g, auto5A9AC660_u);
            if (auto5A9AC660_var == null) { break; }
            libNtve_gf_KillModel(libNtve_gf_LookAtTargetFromUnitAttachPoint(auto5A9AC660_var, "Ref_Head"));
        }
    }
    else if (auto1640337F_val == "1") {
        auto7E1D40F8_g = UnitGroupSelected(EventPlayer());
        auto7E1D40F8_u = UnitGroupCount(auto7E1D40F8_g, c_unitCountAll);
        for (;; auto7E1D40F8_u -= 1) {
            auto7E1D40F8_var = UnitGroupUnitFromEnd(auto7E1D40F8_g, auto7E1D40F8_u);
            if (auto7E1D40F8_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto7E1D40F8_var, "AnniversaryHatProtoss", "Ref_Head Mount");
        }
    }
    else if (auto1640337F_val == "2") {
        autoDD8E5485_g = UnitGroupSelected(EventPlayer());
        autoDD8E5485_u = UnitGroupCount(autoDD8E5485_g, c_unitCountAll);
        for (;; autoDD8E5485_u -= 1) {
            autoDD8E5485_var = UnitGroupUnitFromEnd(autoDD8E5485_g, autoDD8E5485_u);
            if (autoDD8E5485_var == null) { break; }
            libNtve_gf_AttachModelToUnit(autoDD8E5485_var, "AnniversaryHatTerran", "Ref_Head");
        }
    }
    else if (auto1640337F_val == "3") {
        auto6DA7BE11_g = UnitGroupSelected(EventPlayer());
        auto6DA7BE11_u = UnitGroupCount(auto6DA7BE11_g, c_unitCountAll);
        for (;; auto6DA7BE11_u -= 1) {
            auto6DA7BE11_var = UnitGroupUnitFromEnd(auto6DA7BE11_g, auto6DA7BE11_u);
            if (auto6DA7BE11_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto6DA7BE11_var, "AnniversaryHatZerg", "Ref_Head");
        }
    }
    else {
        auto62A142B1_g = UnitGroupSelected(EventPlayer());
        auto62A142B1_u = UnitGroupCount(auto62A142B1_g, c_unitCountAll);
        for (;; auto62A142B1_u -= 1) {
            auto62A142B1_var = UnitGroupUnitFromEnd(auto62A142B1_g, auto62A142B1_u);
            if (auto62A142B1_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto62A142B1_var, "AnniversaryHatProtoss", "Ref_Head");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hat_Init () {
    gt_hat = TriggerCreate("gt_hat_Func");
    TriggerAddEventChatMessage(gt_hat, c_playerAny, "-hat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -attach
//--------------------------------------------------------------------------------------------------
bool gt_attach_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_attach_Init () {
    gt_attach = TriggerCreate("gt_attach_Func");
    TriggerAddEventChatMessage(gt_attach, c_playerAny, "-attach", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set scale
//--------------------------------------------------------------------------------------------------
bool gt_setscale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scale;

    // Automatic Variable Declarations
    unitgroup auto604D900B_g;
    int auto604D900B_u;
    unit auto604D900B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scale = StringToFixed(StringWord(EventChatMessage(false), 3));
    if (((lv_scale >= 0.1) && (lv_scale <= 10.0))) {
        auto604D900B_g = UnitGroupSelected(EventPlayer());
        auto604D900B_u = UnitGroupCount(auto604D900B_g, c_unitCountAll);
        for (;; auto604D900B_u -= 1) {
            auto604D900B_var = UnitGroupUnitFromEnd(auto604D900B_g, auto604D900B_u);
            if (auto604D900B_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto604D900B_var, libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, 1.5));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setscale_Init () {
    gt_setscale = TriggerCreate("gt_setscale_Func");
    TriggerAddEventChatMessage(gt_setscale, c_playerAny, "-set scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -mine
//--------------------------------------------------------------------------------------------------
bool gt_mine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto52430434_g;
    int auto52430434_u;
    unit auto52430434_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto52430434_g = UnitGroupSelected(EventPlayer());
    auto52430434_u = UnitGroupCount(auto52430434_g, c_unitCountAll);
    for (;; auto52430434_u -= 1) {
        auto52430434_var = UnitGroupUnitFromEnd(auto52430434_g, auto52430434_u);
        if (auto52430434_var == null) { break; }
        UnitSetOwner(auto52430434_var, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mine_Init () {
    gt_mine = TriggerCreate("gt_mine_Func");
    TriggerAddEventChatMessage(gt_mine, c_playerAny, "-mine", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -yours
//--------------------------------------------------------------------------------------------------
bool gt_yours_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_colorNumber;
    int lv_playerNumber;
    string lv_string;
    int lv_testInt;
    int lv_i;

    // Automatic Variable Declarations
    const int auto8B806BF9_ae = 14;
    const int auto8B806BF9_ai = 1;
    unitgroup auto24E4D74C_g;
    int auto24E4D74C_u;
    unit auto24E4D74C_var;
    unitgroup auto2F6127F3_g;
    int auto2F6127F3_u;
    unit auto2F6127F3_var;

    // Variable Initialization
    lv_colorNumber = -1;
    lv_playerNumber = -1;
    lv_string = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_string = StringSub(EventChatMessage(false), 8, StringLength(EventChatMessage(false)));
    lv_testInt = StringToInt(lv_string);
    if (((lv_testInt >= 1) && (lv_testInt <= 14))) {
        lv_playerNumber = lv_testInt;
        if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
            lv_i = 0;
            auto2F6127F3_g = UnitGroupSelected(EventPlayer());
            auto2F6127F3_u = UnitGroupCount(auto2F6127F3_g, c_unitCountAll);
            for (;; auto2F6127F3_u -= 1) {
                auto2F6127F3_var = UnitGroupUnitFromEnd(auto2F6127F3_g, auto2F6127F3_u);
                if (auto2F6127F3_var == null) { break; }
                UnitSetOwner(auto2F6127F3_var, lv_playerNumber, true);
                lv_i += 1;
            }
            UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/4BAE15FC") + IntToText(lv_i) + StringExternal("Param/Value/FE95D059")));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/73ADEFDE") + StringToText(lv_string)));
        }
    }
    else {
        lv_colorNumber = gf_GetStringColorNumber(lv_string);
        if (((lv_colorNumber >= 1) && (lv_colorNumber <= 15))) {
            lv_i = 1;
            for ( ; ( (auto8B806BF9_ai >= 0 && lv_i <= auto8B806BF9_ae) || (auto8B806BF9_ai < 0 && lv_i >= auto8B806BF9_ae) ) ; lv_i += auto8B806BF9_ai ) {
                if ((gv_colorNumberofPlayer[lv_colorNumber] == lv_i)) {
                    lv_playerNumber = lv_i;
                    lv_i = 15;
                }

            }
            if (((lv_playerNumber >= 1) && (lv_playerNumber <= 14))) {
                if ((gf_IsPlayerOnline(lv_playerNumber) == true)) {
                    lv_i = 0;
                    auto24E4D74C_g = UnitGroupSelected(EventPlayer());
                    auto24E4D74C_u = UnitGroupCount(auto24E4D74C_g, c_unitCountAll);
                    for (;; auto24E4D74C_u -= 1) {
                        auto24E4D74C_var = UnitGroupUnitFromEnd(auto24E4D74C_g, auto24E4D74C_u);
                        if (auto24E4D74C_var == null) { break; }
                        UnitSetOwner(auto24E4D74C_var, lv_playerNumber, true);
                        lv_i += 1;
                    }
                    UIDisplayMessage(PlayerGroupSingle(lv_playerNumber), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8B342E4B") + IntToText(lv_i) + StringExternal("Param/Value/56F729BA")));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/541A8021") + StringToText(lv_string)));
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/9CA9712D") + StringToText(lv_string)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (StringExternal("Param/Value/74E0DE6C") + StringExternal("Param/Value/7D19C07E")));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_yours_Init () {
    gt_yours = TriggerCreate("gt_yours_Func");
    TriggerAddEventChatMessage(gt_yours, c_playerAny, "-yours", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -hostile
//--------------------------------------------------------------------------------------------------
bool gt_hostile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoC5F19386_g;
    int autoC5F19386_u;
    unit autoC5F19386_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    autoC5F19386_g = UnitGroupSelected(EventPlayer());
    autoC5F19386_u = UnitGroupCount(autoC5F19386_g, c_unitCountAll);
    for (;; autoC5F19386_u -= 1) {
        autoC5F19386_var = UnitGroupUnitFromEnd(autoC5F19386_g, autoC5F19386_u);
        if (autoC5F19386_var == null) { break; }
        UnitSetOwner(autoC5F19386_var, 15, true);
        lv_i += 1;
    }
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/D709E20B") + IntToText(lv_i) + StringExternal("Param/Value/2AE0FE10")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hostile_Init () {
    gt_hostile = TriggerCreate("gt_hostile_Func");
    TriggerAddEventChatMessage(gt_hostile, c_playerAny, "-hostile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -spawn
//--------------------------------------------------------------------------------------------------
bool gt_spawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_requestUnit;

    // Automatic Variable Declarations
    string auto581D9EBF_val;
    const int auto689CC37E_n = 10;
    int auto689CC37E_i;

    // Variable Initialization
    lv_requestUnit = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_requestUnit = StringWord(EventChatMessage(false), 2);
    auto581D9EBF_val = lv_requestUnit;
    if (auto581D9EBF_val == "lava") {
        for (auto689CC37E_i = 1; auto689CC37E_i <= auto689CC37E_n; auto689CC37E_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LavaCritterStatueDefenderUnit", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
            gf_SwapModel(EventPlayer(), UnitLastCreated(), "RedstoneLavaCritter");
        }
    }
    else if (auto581D9EBF_val == "tank") {
        libNtve_gf_CreateUnitsAtPoint2(10, "SiegeTank", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else if (auto581D9EBF_val == "dragoon") {
        libNtve_gf_CreateUnitsAtPoint2(10, "Dragoon", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else if (auto581D9EBF_val == "penguin") {
        libNtve_gf_CreateUnitsAtPoint2(6, "Zergling2", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
        libNtve_gf_CreateUnitsAtPoint2(6, "Zergling3", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    else {
        libNtve_gf_CreateUnitsAtPoint2(10, "SiegeTank", 0, EventPlayer(), CameraGetTarget(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawn_Init () {
    gt_spawn = TriggerCreate("gt_spawn_Func");
    TriggerAddEventChatMessage(gt_spawn, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -freeze
//--------------------------------------------------------------------------------------------------
bool gt_freeze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoDAFF2B6E_g;
    int autoDAFF2B6E_u;
    unit autoDAFF2B6E_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDAFF2B6E_g = UnitGroupSelected(EventPlayer());
    autoDAFF2B6E_u = UnitGroupCount(autoDAFF2B6E_g, c_unitCountAll);
    for (;; autoDAFF2B6E_u -= 1) {
        autoDAFF2B6E_var = UnitGroupUnitFromEnd(autoDAFF2B6E_g, autoDAFF2B6E_u);
        if (autoDAFF2B6E_var == null) { break; }
        TechTreeAbilityAllow(UnitGetOwner(autoDAFF2B6E_var), AbilityCommand("move", 0), false);
        TechTreeAbilityAllow(UnitGetOwner(autoDAFF2B6E_var), AbilityCommand("move", 1), false);
        TechTreeAbilityAllow(UnitGetOwner(autoDAFF2B6E_var), AbilityCommand("attack", 0), false);
        TechTreeAbilityAllow(UnitGetOwner(autoDAFF2B6E_var), AbilityCommand("stop", 0), false);
        TechTreeAbilityAllow(UnitGetOwner(autoDAFF2B6E_var), AbilityCommand("move", 3), false);
        UnitIssueOrder(autoDAFF2B6E_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_freeze_Init () {
    gt_freeze = TriggerCreate("gt_freeze_Func");
    TriggerAddEventChatMessage(gt_freeze, c_playerAny, "-freeze", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -unfreeze
//--------------------------------------------------------------------------------------------------
bool gt_unfreeze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto37223993_g;
    int auto37223993_u;
    unit auto37223993_var;

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto37223993_g = UnitGroupSelected(EventPlayer());
    auto37223993_u = UnitGroupCount(auto37223993_g, c_unitCountAll);
    for (;; auto37223993_u -= 1) {
        auto37223993_var = UnitGroupUnitFromEnd(auto37223993_g, auto37223993_u);
        if (auto37223993_var == null) { break; }
        TechTreeAbilityAllow(UnitGetOwner(auto37223993_var), AbilityCommand("move", 0), true);
        TechTreeAbilityAllow(UnitGetOwner(auto37223993_var), AbilityCommand("move", 1), true);
        TechTreeAbilityAllow(UnitGetOwner(auto37223993_var), AbilityCommand("attack", 0), true);
        TechTreeAbilityAllow(UnitGetOwner(auto37223993_var), AbilityCommand("stop", 0), true);
        TechTreeAbilityAllow(UnitGetOwner(auto37223993_var), AbilityCommand("move", 3), true);
        UnitIssueOrder(auto37223993_var, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unfreeze_Init () {
    gt_unfreeze = TriggerCreate("gt_unfreeze_Func");
    TriggerAddEventChatMessage(gt_unfreeze, c_playerAny, "-unfreeze", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -kill
//--------------------------------------------------------------------------------------------------
bool gt_kill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_killedLavaStatue;
    unitgroup lv_allunitsforTriggeringPlayer;

    // Automatic Variable Declarations
    unitgroup auto82C0A6DF_g;
    int auto82C0A6DF_u;
    unit auto82C0A6DF_var;
    unitgroup autoCDD695A6_g;
    int autoCDD695A6_u;
    unit autoCDD695A6_var;
    unitgroup autoB9D09BCA_g;
    int autoB9D09BCA_u;
    unit autoB9D09BCA_var;
    const int auto0F5E029F_n = 32;
    int auto0F5E029F_i;

    // Variable Initialization
    lv_allunitsforTriggeringPlayer = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto82C0A6DF_g = UnitGroupSelected(EventPlayer());
    auto82C0A6DF_u = UnitGroupCount(auto82C0A6DF_g, c_unitCountAll);
    for (;; auto82C0A6DF_u -= 1) {
        auto82C0A6DF_var = UnitGroupUnitFromEnd(auto82C0A6DF_g, auto82C0A6DF_u);
        if (auto82C0A6DF_var == null) { break; }
        if ((UnitGetType(auto82C0A6DF_var) == "MengskStatueAlone")) {
            lv_killedLavaStatue = true;
        }

    }
    autoCDD695A6_g = UnitGroupSelected(EventPlayer());
    autoCDD695A6_u = UnitGroupCount(autoCDD695A6_g, c_unitCountAll);
    for (;; autoCDD695A6_u -= 1) {
        autoCDD695A6_var = UnitGroupUnitFromEnd(autoCDD695A6_g, autoCDD695A6_u);
        if (autoCDD695A6_var == null) { break; }
        if ((UnitGetType(autoCDD695A6_var) == "Probe")) {
            if ((gf_PlayerIsDeveloper(UnitGetOwner(autoCDD695A6_var)) == false)) {
                UnitCreateEffectUnit(autoCDD695A6_var, "ProbeDies", UnitGroupRandomUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
                UnitKill(autoCDD695A6_var);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(autoCDD695A6_var)), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/CF351EEE")));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, (TextWithColor(PlayerName(UnitGetOwner(autoCDD695A6_var)), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(autoCDD695A6_var), false))) + StringExternal("Param/Value/88798889")));
            }
        }
        else {
            UnitKill(autoCDD695A6_var);
        }
    }
    if ((lv_killedLavaStatue == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/927E1211") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))));
        gv_lavaStatueKiller = EventPlayer();
        if ((((gv_lavaStatueKiller >= 1) && (gv_lavaStatueKiller <= 14)) && (PlayerStatus(gv_lavaStatueKiller) == c_playerStatusActive) && (PlayerType(gv_lavaStatueKiller) == c_playerTypeUser))) {
            libNtve_gf_SetAlliance(0, gv_lavaStatueKiller, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            libNtve_gf_SetAlliance(gv_lavaStatueKiller, 0, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            Wait(1.5, c_timeGame);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/AF09DAEE"));
            gv_lavaCrittersTarget = UnitGroup(null, gv_lavaStatueKiller, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
            autoB9D09BCA_g = gv_lavaCrittersTarget;
            autoB9D09BCA_u = UnitGroupCount(autoB9D09BCA_g, c_unitCountAll);
            for (;; autoB9D09BCA_u -= 1) {
                autoB9D09BCA_var = UnitGroupUnitFromEnd(autoB9D09BCA_g, autoB9D09BCA_u);
                if (autoB9D09BCA_var == null) { break; }
                if ((UnitGetType(autoB9D09BCA_var) == "Probe")) {
                    gv_lavaStatueKillersUnit = autoB9D09BCA_var;
                }
                else {
                    if ((UnitGetType(autoB9D09BCA_var) == "HighTemplar")) {
                        gv_lavaStatueKillersUnit = autoB9D09BCA_var;
                    }
                    else {
                        if ((UnitGetType(autoB9D09BCA_var) == "PrisonZealot")) {
                            gv_lavaStatueKillersUnit = autoB9D09BCA_var;
                        }
                        else {
                            if ((UnitGetType(autoB9D09BCA_var) == "Predator")) {
                                gv_lavaStatueKillersUnit = autoB9D09BCA_var;
                            }

                        }
                    }
                }
            }
            for (auto0F5E029F_i = 1; auto0F5E029F_i <= auto0F5E029F_n; auto0F5E029F_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "LavaCritterStatueDefenderUnit", 0, 0, RegionRandomPoint(RegionPlayableMap()));
                gf_SwapModel(0, UnitLastCreated(), "RedstoneLavaCritter");
                UnitGroupAdd(gv_lavaCritters, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnitGroup(AbilityCommand("attack", 0), gv_lavaCrittersTarget), c_orderQueueReplace);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_lavaStatueKillersUnit), c_orderQueueAddToEnd);
                Wait(0.25, c_timeGame);
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/7A005B0C"));
            TechTreeAbilityAllow(gv_lavaStatueKiller, AbilityCommand("attack", 0), false);
            TimerStart(gv_lavaCritterRemovalTimer, 1.0, false, c_timeReal);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/346EA188"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kill_Init () {
    gt_kill = TriggerCreate("gt_kill_Func");
    TriggerEnable(gt_kill, false);
    TriggerAddEventChatMessage(gt_kill, c_playerAny, "-kill", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -give
//--------------------------------------------------------------------------------------------------
bool gt_give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_requestAction;
    int lv_requestAmount;
    string lv_stringAmount;
    int lv_amountUnit;

    // Automatic Variable Declarations
    string auto470B9E75_val;
    string auto71AFCC39_val;
    unitgroup auto73E5E6BE_g;
    int auto73E5E6BE_u;
    unit auto73E5E6BE_var;
    unitgroup auto24FE9A00_g;
    int auto24FE9A00_u;
    unit auto24FE9A00_var;
    unitgroup auto2B70FDAF_g;
    int auto2B70FDAF_u;
    unit auto2B70FDAF_var;
    unitgroup autoCCD6B9E4_g;
    int autoCCD6B9E4_u;
    unit autoCCD6B9E4_var;
    playergroup autoF36F970F_g;
    int autoF36F970F_var;
    playergroup auto9F7E54DD_g;
    int auto9F7E54DD_var;
    playergroup auto7A79A695_g;
    int auto7A79A695_var;
    playergroup auto716D6EE6_g;
    int auto716D6EE6_var;

    // Variable Initialization
    lv_requestAction = "";
    lv_stringAmount = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true))) {
        lv_requestAction = StringWord(EventChatMessage(false), 2);
        lv_stringAmount = StringWord(EventChatMessage(false), 3);
        auto470B9E75_val = StringSub(lv_stringAmount, StringLength(lv_stringAmount), StringLength(lv_stringAmount));
        if (auto470B9E75_val == "k") {
            lv_amountUnit = 1000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
        }
        else if (auto470B9E75_val == "m") {
            lv_amountUnit = 1000000;
            lv_stringAmount = StringSub(lv_stringAmount, 1, (StringLength(lv_stringAmount) - 1));
        }
        else {
            lv_amountUnit = 1;
        }
        lv_requestAmount = (StringToInt(lv_stringAmount) * lv_amountUnit);
        if ((lv_requestAmount > 0)) {
            auto71AFCC39_val = lv_requestAction;
            if (auto71AFCC39_val == "mins") {
                auto73E5E6BE_g = UnitGroupSelected(EventPlayer());
                auto73E5E6BE_u = UnitGroupCount(auto73E5E6BE_g, c_unitCountAll);
                for (;; auto73E5E6BE_u -= 1) {
                    auto73E5E6BE_var = UnitGroupUnitFromEnd(auto73E5E6BE_g, auto73E5E6BE_u);
                    if (auto73E5E6BE_var == null) { break; }
                    PlayerModifyPropertyInt(UnitGetOwner(auto73E5E6BE_var), c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                }
            }
            else if (auto71AFCC39_val == "vesp") {
                auto24FE9A00_g = UnitGroupSelected(EventPlayer());
                auto24FE9A00_u = UnitGroupCount(auto24FE9A00_g, c_unitCountAll);
                for (;; auto24FE9A00_u -= 1) {
                    auto24FE9A00_var = UnitGroupUnitFromEnd(auto24FE9A00_g, auto24FE9A00_u);
                    if (auto24FE9A00_var == null) { break; }
                    PlayerModifyPropertyInt(UnitGetOwner(auto24FE9A00_var), c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                }
            }
            else if (auto71AFCC39_val == "terra") {
                auto2B70FDAF_g = UnitGroupSelected(EventPlayer());
                auto2B70FDAF_u = UnitGroupCount(auto2B70FDAF_g, c_unitCountAll);
                for (;; auto2B70FDAF_u -= 1) {
                    auto2B70FDAF_var = UnitGroupUnitFromEnd(auto2B70FDAF_g, auto2B70FDAF_u);
                    if (auto2B70FDAF_var == null) { break; }
                    PlayerModifyPropertyInt(UnitGetOwner(auto2B70FDAF_var), c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                }
            }
            else if (auto71AFCC39_val == "both") {
                autoCCD6B9E4_g = UnitGroupSelected(EventPlayer());
                autoCCD6B9E4_u = UnitGroupCount(autoCCD6B9E4_g, c_unitCountAll);
                for (;; autoCCD6B9E4_u -= 1) {
                    autoCCD6B9E4_var = UnitGroupUnitFromEnd(autoCCD6B9E4_g, autoCCD6B9E4_u);
                    if (autoCCD6B9E4_var == null) { break; }
                    PlayerModifyPropertyInt(UnitGetOwner(autoCCD6B9E4_var), c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                    PlayerModifyPropertyInt(UnitGetOwner(autoCCD6B9E4_var), c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                    PlayerModifyPropertyInt(UnitGetOwner(autoCCD6B9E4_var), c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                }
            }
            else if (auto71AFCC39_val == "vamps") {
                autoF36F970F_g = PlayerGroupActive();
                autoF36F970F_var = -1;
                while (true) {
                    autoF36F970F_var = PlayerGroupNextPlayer(autoF36F970F_g, autoF36F970F_var);
                    if (autoF36F970F_var < 0) { break; }
                    if ((UnitIsAlive(gv_zealots[autoF36F970F_var]) == true)) {
                        PlayerModifyPropertyInt(autoF36F970F_var, c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(autoF36F970F_var, c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(autoF36F970F_var, c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                    }

                }
            }
            else if (auto71AFCC39_val == "zealot") {
                auto9F7E54DD_g = PlayerGroupActive();
                auto9F7E54DD_var = -1;
                while (true) {
                    auto9F7E54DD_var = PlayerGroupNextPlayer(auto9F7E54DD_g, auto9F7E54DD_var);
                    if (auto9F7E54DD_var < 0) { break; }
                    if ((UnitIsAlive(gv_zealots[auto9F7E54DD_var]) == true)) {
                        PlayerModifyPropertyInt(auto9F7E54DD_var, c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto9F7E54DD_var, c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto9F7E54DD_var, c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                    }

                }
            }
            else if (auto71AFCC39_val == "humans") {
                auto7A79A695_g = PlayerGroupActive();
                auto7A79A695_var = -1;
                while (true) {
                    auto7A79A695_var = PlayerGroupNextPlayer(auto7A79A695_g, auto7A79A695_var);
                    if (auto7A79A695_var < 0) { break; }
                    if ((UnitIsAlive(gv_probes[auto7A79A695_var]) == true)) {
                        PlayerModifyPropertyInt(auto7A79A695_var, c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto7A79A695_var, c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto7A79A695_var, c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                    }

                }
            }
            else if (auto71AFCC39_val == "probes") {
                auto716D6EE6_g = PlayerGroupActive();
                auto716D6EE6_var = -1;
                while (true) {
                    auto716D6EE6_var = PlayerGroupNextPlayer(auto716D6EE6_g, auto716D6EE6_var);
                    if (auto716D6EE6_var < 0) { break; }
                    if ((UnitIsAlive(gv_probes[auto716D6EE6_var]) == true)) {
                        PlayerModifyPropertyInt(auto716D6EE6_var, c_playerPropMinerals, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto716D6EE6_var, c_playerPropVespene, c_playerPropOperAdd, lv_requestAmount);
                        PlayerModifyPropertyInt(auto716D6EE6_var, c_playerPropTerrazine, c_playerPropOperAdd, lv_requestAmount);
                    }

                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/4CC3F7C4") + StringExternal("Param/Value/9D7A72EB")));
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/299BBC41") + StringExternal("Param/Value/0DA452A5")));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/1809D3DA") + StringExternal("Param/Value/70FA4582")));
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/0BE7A204") + StringExternal("Param/Value/4E21D60C")));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_give_Init () {
    gt_give = TriggerCreate("gt_give_Func");
    TriggerEnable(gt_give, false);
    TriggerAddEventChatMessage(gt_give, c_playerAny, "-give ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -reveal
//--------------------------------------------------------------------------------------------------
bool gt_reveal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_untitledVariable001;
    fixed lv_time;

    // Automatic Variable Declarations
    playergroup auto4D09C00B_g;
    int auto4D09C00B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_time = StringToFixed(StringWord(EventChatMessage(false), 2));
    VisRevealArea(EventPlayer(), RegionPlayableMap(), lv_time, false);
    auto4D09C00B_g = PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer());
    auto4D09C00B_var = -1;
    while (true) {
        auto4D09C00B_var = PlayerGroupNextPlayer(auto4D09C00B_g, auto4D09C00B_var);
        if (auto4D09C00B_var < 0) { break; }
        PlayerSetAlliance(auto4D09C00B_var, c_allianceIdVision, EventPlayer(), true);
        PlayerSetAlliance(auto4D09C00B_var, c_allianceIdChat, EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_reveal_Init () {
    gt_reveal = TriggerCreate("gt_reveal_Func");
    TriggerEnable(gt_reveal, false);
    TriggerAddEventChatMessage(gt_reveal, c_playerAny, "-reveal", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -debug
//--------------------------------------------------------------------------------------------------
bool gt_debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    TriggerDebugSetTypeFile(1, "TriggerDebug.txt");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6382D5ED"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debug_Init () {
    gt_debug = TriggerCreate("gt_debug_Func");
    TriggerEnable(gt_debug, false);
    TriggerAddEventChatMessage(gt_debug, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -debug close
//--------------------------------------------------------------------------------------------------
bool gt_debugclose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/37F06170"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_debugclose_Init () {
    gt_debugclose = TriggerCreate("gt_debugclose_Func");
    TriggerEnable(gt_debugclose, false);
    TriggerAddEventChatMessage(gt_debugclose, c_playerAny, "-debug close", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -show
//--------------------------------------------------------------------------------------------------
bool gt_show_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ShowHideUnits(PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_show_Init () {
    gt_show = TriggerCreate("gt_show_Func");
    TriggerEnable(gt_show, false);
    TriggerAddEventChatMessage(gt_show, c_playerAny, "-show", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -test
//--------------------------------------------------------------------------------------------------
bool gt_test_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_time = StringSub(EventChatMessage(false), 7, StringLength(EventChatMessage(false)));
    gf_ShowHideUnits(PlayerGroupSingle(EventPlayer()), false);
    Wait(StringToFixed(lv_time), c_timeGame);
    VisRevealArea(EventPlayer(), RegionPlayableMap(), 0.001, false);
    Wait(StringToFixed(lv_time), c_timeGame);
    gf_ShowHideUnits(PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_test_Init () {
    gt_test = TriggerCreate("gt_test_Func");
    TriggerEnable(gt_test, false);
    TriggerAddEventChatMessage(gt_test, c_playerAny, "-test", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set time scale
//--------------------------------------------------------------------------------------------------
bool gt_settimescale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_localReal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_localReal = StringToFixed(StringWord(EventChatMessage(false), 4));
    GameSetGlobalTimeScale(lv_localReal);
    gv_timescalevalue = lv_localReal;
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/2864CE6F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_settimescale_Init () {
    gt_settimescale = TriggerCreate("gt_settimescale_Func");
    TriggerEnable(gt_settimescale, false);
    TriggerAddEventChatMessage(gt_settimescale, c_playerAny, "-set time scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set builder name
//--------------------------------------------------------------------------------------------------
bool gt_setbuildername_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "Builder", "Name", EventPlayer(), StringSub(EventChatMessage(false), 19, StringLength(EventChatMessage(false))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setbuildername_Init () {
    gt_setbuildername = TriggerCreate("gt_setbuildername_Func");
    TriggerEnable(gt_setbuildername, false);
    TriggerAddEventChatMessage(gt_setbuildername, c_playerAny, "-set builder name", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set vamp name
//--------------------------------------------------------------------------------------------------
bool gt_setvampname_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "Name", EventPlayer(), StringSub(EventChatMessage(false), 16, StringLength(EventChatMessage(false))));
    CatalogFieldValueSet(c_gameCatalogUnit, "KerriganChar", "Name", EventPlayer(), StringSub(EventChatMessage(false), 16, StringLength(EventChatMessage(false))));
    CatalogFieldValueSet(c_gameCatalogUnit, "Pygalisk", "Name", EventPlayer(), StringSub(EventChatMessage(false), 16, StringLength(EventChatMessage(false))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setvampname_Init () {
    gt_setvampname = TriggerCreate("gt_setvampname_Func");
    TriggerEnable(gt_setvampname, false);
    TriggerAddEventChatMessage(gt_setvampname, c_playerAny, "-set vamp name", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set builder scale
//--------------------------------------------------------------------------------------------------
bool gt_setbuilderscale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scale = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scale = StringSub(EventChatMessage(false), 20, StringLength(EventChatMessage(false)));
    libNtve_gf_SendActorMessageToUnit(gv_probes[EventPlayer()], libNtve_gf_SetScale(StringToFixed(lv_scale), StringToFixed(lv_scale), StringToFixed(lv_scale), 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setbuilderscale_Init () {
    gt_setbuilderscale = TriggerCreate("gt_setbuilderscale_Func");
    TriggerEnable(gt_setbuilderscale, false);
    TriggerAddEventChatMessage(gt_setbuilderscale, c_playerAny, "-set builder scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -set vamp scale
//--------------------------------------------------------------------------------------------------
bool gt_setvampscale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scale = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevel2(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scale = StringSub(EventChatMessage(false), 17, StringLength(EventChatMessage(false)));
    libNtve_gf_SendActorMessageToUnit(gv_zealots[EventPlayer()], libNtve_gf_SetScale(StringToFixed(lv_scale), StringToFixed(lv_scale), StringToFixed(lv_scale), 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setvampscale_Init () {
    gt_setvampscale = TriggerCreate("gt_setvampscale_Func");
    TriggerEnable(gt_setvampscale, false);
    TriggerAddEventChatMessage(gt_setvampscale, c_playerAny, "-set vamp scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -power on
//--------------------------------------------------------------------------------------------------
bool gt_poweron_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scale = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(gv_probes[EventPlayer()], true);
    libNtve_gf_MakeUnitInvulnerable(gv_zealots[EventPlayer()], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_poweron_Init () {
    gt_poweron = TriggerCreate("gt_poweron_Func");
    TriggerEnable(gt_poweron, false);
    TriggerAddEventChatMessage(gt_poweron, c_playerAny, "-power on", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -power off
//--------------------------------------------------------------------------------------------------
bool gt_poweroff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scale = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModeratorLevelX(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(gv_probes[EventPlayer()], false);
    libNtve_gf_MakeUnitInvulnerable(gv_zealots[EventPlayer()], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_poweroff_Init () {
    gt_poweroff = TriggerCreate("gt_poweroff_Func");
    TriggerEnable(gt_poweroff, false);
    TriggerAddEventChatMessage(gt_poweroff, c_playerAny, "-power off", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -swap
//--------------------------------------------------------------------------------------------------
bool gt_swap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_countofUnits;
    int lv_countofUnitsSwapped;
    string lv_skinRequest;
    string lv_skinCommand;
    unitgroup lv_skinSwapUnitGroup;

    // Automatic Variable Declarations
    unitgroup auto7371C587_g;
    int auto7371C587_u;
    unit auto7371C587_var;

    // Variable Initialization
    lv_skinRequest = "";
    lv_skinCommand = "";
    lv_skinSwapUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_skinCommand = StringWord(EventChatMessage(false), 1);
    lv_skinRequest = (StringCase(StringWord(EventChatMessage(false), 2), false) + StringCase(StringWord(EventChatMessage(false), 3), false));
    if ((StringLength(lv_skinRequest) <= 0)) {
        if ((gv_side[EventPlayer()] == "Probe")) {
            lv_skinRequest = BankValueGetAsString(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeSkinName);
        }
        else {
            lv_skinRequest = BankValueGetAsString(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_zealotSkinName);
        }
    }

    if ((lv_skinCommand == "-swap")) {
        if (((gv_side[EventPlayer()] == "Probe") && (gv_hunterStatus[EventPlayer()] == false))) {
            UnitGroupAdd(lv_skinSwapUnitGroup, gv_probes[EventPlayer()]);
            UnitGroupAdd(lv_skinSwapUnitGroup, gv_probeSpirit[EventPlayer()]);
        }
        else {
            UnitGroupAdd(lv_skinSwapUnitGroup, gv_zealots[EventPlayer()]);
        }
    }
    else {
        lv_countofUnits = 0;
        lv_countofUnitsSwapped = 0;
        auto7371C587_g = UnitGroupSelected(EventPlayer());
        auto7371C587_u = UnitGroupCount(auto7371C587_g, c_unitCountAll);
        for (;; auto7371C587_u -= 1) {
            auto7371C587_var = UnitGroupUnitFromEnd(auto7371C587_g, auto7371C587_u);
            if (auto7371C587_var == null) { break; }
            lv_countofUnits += 1;
            if ((UnitGetOwner(auto7371C587_var) == EventPlayer())) {
                if ((UnitGetType(auto7371C587_var) != "FinalTurret") && (UnitGetType(auto7371C587_var) != "Stalker") && (UnitGetType(auto7371C587_var) != "RaynorCommando") && (UnitGetType(auto7371C587_var) != "Tosh") && (UnitGetType(auto7371C587_var) != "TychusChaingun") && (UnitGetType(auto7371C587_var) != "DarkShrine") && (UnitGetType(auto7371C587_var) != "Turret13") && (UnitGetType(auto7371C587_var) != "FleetBeacon") && (UnitGetType(auto7371C587_var) != "Forge") && (UnitGetType(auto7371C587_var) != "FreightCar") && (UnitGetType(auto7371C587_var) != "GeneratorLevel09")) {
                    if (((gv_gameTimeMinutes < 7) && ((UnitGetType(auto7371C587_var) == "Turret1") || (UnitGetType(auto7371C587_var) == "Turret2") || (UnitGetType(auto7371C587_var) == "Turret3") || (UnitGetType(auto7371C587_var) == "Turret4") || (UnitGetType(auto7371C587_var) == "Turret5") || (UnitGetType(auto7371C587_var) == "Turret6")))) {
                    }
                    else {
                        if (((gv_gameTimeMinutes < 15) && ((UnitGetType(auto7371C587_var) == "GeneratorLevel00") || (UnitGetType(auto7371C587_var) == "GeneratorLevel01") || (UnitGetType(auto7371C587_var) == "GeneratorLevel02") || (UnitGetType(auto7371C587_var) == "GeneratorLevel03") || (UnitGetType(auto7371C587_var) == "GeneratorLevel04") || (UnitGetType(auto7371C587_var) == "GeneratorLevel05") || (UnitGetType(auto7371C587_var) == "GeneratorLevel06") || (UnitGetType(auto7371C587_var) == "GeneratorLevel07") || (UnitGetType(auto7371C587_var) == "GeneratorLevel08") || (UnitGetType(auto7371C587_var) == "Turret7") || (UnitGetType(auto7371C587_var) == "Turret8")))) {
                        }
                        else {
                            if (((gv_gameTimeMinutes < 25) && ((UnitGetType(auto7371C587_var) == "Turret9") || (UnitGetType(auto7371C587_var) == "Turret10")))) {
                            }
                            else {
                                if (((gv_gameTimeMinutes < 35) && ((UnitGetType(auto7371C587_var) == "Turret11") || (UnitGetType(auto7371C587_var) == "Turret12")))) {
                                }
                                else {
                                    UnitGroupAdd(lv_skinSwapUnitGroup, auto7371C587_var);
                                    lv_countofUnitsSwapped += 1;
                                }
                            }
                        }
                    }
                }

            }
            else {
                if (((gv_side[UnitGetOwner(auto7371C587_var)] == "Probe") && (gv_hunterStatus[UnitGetOwner(auto7371C587_var)] == false))) {
                    UnitGroupAdd(lv_skinSwapUnitGroup, gv_probes[UnitGetOwner(auto7371C587_var)]);
                    UnitGroupAdd(lv_skinSwapUnitGroup, gv_probeSpirit[UnitGetOwner(auto7371C587_var)]);
                    lv_countofUnitsSwapped += 1;
                    MinimapPing(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(auto7371C587_var)), UnitGetPosition(gv_probes[UnitGetOwner(auto7371C587_var)]), 2.0, Color(100.00, 100.00, 0.00));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto7371C587_var)), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/37ECDD32")));
                }
                else {
                    UnitGroupAdd(lv_skinSwapUnitGroup, gv_zealots[UnitGetOwner(auto7371C587_var)]);
                    lv_countofUnitsSwapped += 1;
                    MinimapPing(PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(auto7371C587_var)), UnitGetPosition(gv_zealots[UnitGetOwner(auto7371C587_var)]), 2.0, Color(100.00, 100.00, 0.00));
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(auto7371C587_var)), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0D96F28F")));
                }
            }
        }
    }
    if ((lv_skinCommand == "-swap")) {
        gf_SkinSwapModelForUnits(lv_skinRequest, EventPlayer(), lv_skinSwapUnitGroup);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (StringExternal("Param/Value/933F5FA0") + IntToText(lv_countofUnitsSwapped) + StringExternal("Param/Value/85AD769F") + IntToText(lv_countofUnits) + StringExternal("Param/Value/A18543CD")));
        gf_SkinSwapModelForUnits(lv_skinRequest, EventPlayer(), lv_skinSwapUnitGroup);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_swap_Init () {
    gt_swap = TriggerCreate("gt_swap_Func");
    TriggerAddEventChatMessage(gt_swap, c_playerAny, "-swap", false);
    TriggerAddEventChatMessage(gt_swap, c_playerAny, "-su", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swap Building Skins Terran
//--------------------------------------------------------------------------------------------------
bool gt_SwapBuildingSkinsTerran_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoADA279DD_g;
    int autoADA279DD_u;
    unit autoADA279DD_var;
    unitgroup auto91B80F11_g;
    int auto91B80F11_u;
    unit auto91B80F11_var;
    unitgroup auto0E27777B_g;
    int auto0E27777B_u;
    unit auto0E27777B_var;
    unitgroup autoEDA030F3_g;
    int autoEDA030F3_u;
    unit autoEDA030F3_var;
    unitgroup auto1EDE6688_g;
    int auto1EDE6688_u;
    unit auto1EDE6688_var;
    unitgroup auto4DFC8E35_g;
    int auto4DFC8E35_u;
    unit auto4DFC8E35_var;
    unitgroup auto4763A56E_g;
    int auto4763A56E_u;
    unit auto4763A56E_var;
    unitgroup auto33BDBA97_g;
    int auto33BDBA97_u;
    unit auto33BDBA97_var;
    unitgroup autoC71D560D_g;
    int autoC71D560D_u;
    unit autoC71D560D_var;
    unitgroup auto668701B3_g;
    int auto668701B3_u;
    unit auto668701B3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DarkProtoss", 0);
    autoADA279DD_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoADA279DD_u = UnitGroupCount(autoADA279DD_g, c_unitCountAll);
    for (;; autoADA279DD_u -= 1) {
        autoADA279DD_var = UnitGroupUnitFromEnd(autoADA279DD_g, autoADA279DD_u);
        if (autoADA279DD_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoADA279DD_var, "PlanetaryFortress");
    }
    auto91B80F11_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto91B80F11_u = UnitGroupCount(auto91B80F11_g, c_unitCountAll);
    for (;; auto91B80F11_u -= 1) {
        auto91B80F11_var = UnitGroupUnitFromEnd(auto91B80F11_g, auto91B80F11_u);
        if (auto91B80F11_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto91B80F11_var, "NukeSiloNova");
    }
    auto0E27777B_g = UnitGroup("FleetBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0E27777B_u = UnitGroupCount(auto0E27777B_g, c_unitCountAll);
    for (;; auto0E27777B_u -= 1) {
        auto0E27777B_var = UnitGroupUnitFromEnd(auto0E27777B_g, auto0E27777B_u);
        if (auto0E27777B_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto0E27777B_var, "Barracks");
    }
    autoEDA030F3_g = UnitGroup("Market", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEDA030F3_u = UnitGroupCount(autoEDA030F3_g, c_unitCountAll);
    for (;; autoEDA030F3_u -= 1) {
        autoEDA030F3_var = UnitGroupUnitFromEnd(autoEDA030F3_g, autoEDA030F3_u);
        if (autoEDA030F3_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoEDA030F3_var, "Starport");
    }
    auto1EDE6688_g = UnitGroup("GlobalMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1EDE6688_u = UnitGroupCount(auto1EDE6688_g, c_unitCountAll);
    for (;; auto1EDE6688_u -= 1) {
        auto1EDE6688_var = UnitGroupUnitFromEnd(auto1EDE6688_g, auto1EDE6688_u);
        if (auto1EDE6688_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto1EDE6688_var, "Starport");
    }
    auto4DFC8E35_g = UnitGroup("UndergroundMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4DFC8E35_u = UnitGroupCount(auto4DFC8E35_g, c_unitCountAll);
    for (;; auto4DFC8E35_u -= 1) {
        auto4DFC8E35_var = UnitGroupUnitFromEnd(auto4DFC8E35_g, auto4DFC8E35_u);
        if (auto4DFC8E35_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto4DFC8E35_var, "Starport");
    }
    auto4763A56E_g = UnitGroup("RoboticsBay", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4763A56E_u = UnitGroupCount(auto4763A56E_g, c_unitCountAll);
    for (;; auto4763A56E_u -= 1) {
        auto4763A56E_var = UnitGroupUnitFromEnd(auto4763A56E_g, auto4763A56E_u);
        if (auto4763A56E_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto4763A56E_var, "GhostAcademy");
    }
    auto33BDBA97_g = UnitGroup("DarkShrine", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto33BDBA97_u = UnitGroupCount(auto33BDBA97_g, c_unitCountAll);
    for (;; auto33BDBA97_u -= 1) {
        auto33BDBA97_var = UnitGroupUnitFromEnd(auto33BDBA97_g, auto33BDBA97_u);
        if (auto33BDBA97_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto33BDBA97_var, "SensorTower");
    }
    autoC71D560D_g = UnitGroup("Forge", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC71D560D_u = UnitGroupCount(autoC71D560D_g, c_unitCountAll);
    for (;; autoC71D560D_u -= 1) {
        autoC71D560D_var = UnitGroupUnitFromEnd(autoC71D560D_g, autoC71D560D_u);
        if (autoC71D560D_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoC71D560D_var, "Armory");
    }
    auto668701B3_g = UnitGroup("Gateway", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto668701B3_u = UnitGroupCount(auto668701B3_g, c_unitCountAll);
    for (;; auto668701B3_u -= 1) {
        auto668701B3_var = UnitGroupUnitFromEnd(auto668701B3_g, auto668701B3_u);
        if (auto668701B3_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto668701B3_var, "FusionCore");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapBuildingSkinsTerran_Init () {
    gt_SwapBuildingSkinsTerran = TriggerCreate("gt_SwapBuildingSkinsTerran_Func");
    TriggerAddEventUnitAbility(gt_SwapBuildingSkinsTerran, null, AbilityCommand("SwaptoModel3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swap Building Skins Protoss
//--------------------------------------------------------------------------------------------------
bool gt_SwapBuildingSkinsProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0B749F7D_g;
    int auto0B749F7D_u;
    unit auto0B749F7D_var;
    unitgroup autoEB1C714B_g;
    int autoEB1C714B_u;
    unit autoEB1C714B_var;
    unitgroup auto6EB49329_g;
    int auto6EB49329_u;
    unit auto6EB49329_var;
    unitgroup auto46AEDA68_g;
    int auto46AEDA68_u;
    unit auto46AEDA68_var;
    unitgroup autoBDBB4482_g;
    int autoBDBB4482_u;
    unit autoBDBB4482_var;
    unitgroup auto042665B6_g;
    int auto042665B6_u;
    unit auto042665B6_var;
    unitgroup auto9993FB81_g;
    int auto9993FB81_u;
    unit auto9993FB81_var;
    unitgroup auto4A4185F4_g;
    int auto4A4185F4_u;
    unit auto4A4185F4_var;
    unitgroup autoFEB36D20_g;
    int autoFEB36D20_u;
    unit autoFEB36D20_var;
    unitgroup auto2EB261AA_g;
    int auto2EB261AA_u;
    unit auto2EB261AA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DarkProtoss", 0);
    auto0B749F7D_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B749F7D_u = UnitGroupCount(auto0B749F7D_g, c_unitCountAll);
    for (;; auto0B749F7D_u -= 1) {
        auto0B749F7D_var = UnitGroupUnitFromEnd(auto0B749F7D_g, auto0B749F7D_u);
        if (auto0B749F7D_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto0B749F7D_var, "Nexus");
    }
    autoEB1C714B_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB1C714B_u = UnitGroupCount(autoEB1C714B_g, c_unitCountAll);
    for (;; autoEB1C714B_u -= 1) {
        autoEB1C714B_var = UnitGroupUnitFromEnd(autoEB1C714B_g, autoEB1C714B_u);
        if (autoEB1C714B_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoEB1C714B_var, "AutomatedRefinery");
    }
    auto6EB49329_g = UnitGroup("FleetBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6EB49329_u = UnitGroupCount(auto6EB49329_g, c_unitCountAll);
    for (;; auto6EB49329_u -= 1) {
        auto6EB49329_var = UnitGroupUnitFromEnd(auto6EB49329_g, auto6EB49329_u);
        if (auto6EB49329_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto6EB49329_var, "FleetBeacon");
    }
    auto46AEDA68_g = UnitGroup("Market", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto46AEDA68_u = UnitGroupCount(auto46AEDA68_g, c_unitCountAll);
    for (;; auto46AEDA68_u -= 1) {
        auto46AEDA68_var = UnitGroupUnitFromEnd(auto46AEDA68_g, auto46AEDA68_u);
        if (auto46AEDA68_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto46AEDA68_var, "RoboticsFacility");
    }
    autoBDBB4482_g = UnitGroup("GlobalMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBDBB4482_u = UnitGroupCount(autoBDBB4482_g, c_unitCountAll);
    for (;; autoBDBB4482_u -= 1) {
        autoBDBB4482_var = UnitGroupUnitFromEnd(autoBDBB4482_g, autoBDBB4482_u);
        if (autoBDBB4482_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoBDBB4482_var, "RoboticsFacility32");
    }
    auto042665B6_g = UnitGroup("UndergroundMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto042665B6_u = UnitGroupCount(auto042665B6_g, c_unitCountAll);
    for (;; auto042665B6_u -= 1) {
        auto042665B6_var = UnitGroupUnitFromEnd(auto042665B6_g, auto042665B6_u);
        if (auto042665B6_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto042665B6_var, "RoboticsFacility4");
    }
    auto9993FB81_g = UnitGroup("RoboticsBay", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9993FB81_u = UnitGroupCount(auto9993FB81_g, c_unitCountAll);
    for (;; auto9993FB81_u -= 1) {
        auto9993FB81_var = UnitGroupUnitFromEnd(auto9993FB81_g, auto9993FB81_u);
        if (auto9993FB81_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto9993FB81_var, "RoboticsBay");
    }
    auto4A4185F4_g = UnitGroup("DarkShrine", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4A4185F4_u = UnitGroupCount(auto4A4185F4_g, c_unitCountAll);
    for (;; auto4A4185F4_u -= 1) {
        auto4A4185F4_var = UnitGroupUnitFromEnd(auto4A4185F4_g, auto4A4185F4_u);
        if (auto4A4185F4_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto4A4185F4_var, "DarkShrine");
    }
    autoFEB36D20_g = UnitGroup("Forge", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFEB36D20_u = UnitGroupCount(autoFEB36D20_g, c_unitCountAll);
    for (;; autoFEB36D20_u -= 1) {
        autoFEB36D20_var = UnitGroupUnitFromEnd(autoFEB36D20_g, autoFEB36D20_u);
        if (autoFEB36D20_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoFEB36D20_var, "Forge");
    }
    auto2EB261AA_g = UnitGroup("Gateway", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2EB261AA_u = UnitGroupCount(auto2EB261AA_g, c_unitCountAll);
    for (;; auto2EB261AA_u -= 1) {
        auto2EB261AA_var = UnitGroupUnitFromEnd(auto2EB261AA_g, auto2EB261AA_u);
        if (auto2EB261AA_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto2EB261AA_var, "Gateway");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapBuildingSkinsProtoss_Init () {
    gt_SwapBuildingSkinsProtoss = TriggerCreate("gt_SwapBuildingSkinsProtoss_Func");
    TriggerAddEventUnitAbility(gt_SwapBuildingSkinsProtoss, null, AbilityCommand("SwaptoModel3", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swap Building Skins Dark Protoss
//--------------------------------------------------------------------------------------------------
bool gt_SwapBuildingSkinsDarkProtoss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD616BB1E_g;
    int autoD616BB1E_u;
    unit autoD616BB1E_var;
    unitgroup autoB12B7348_g;
    int autoB12B7348_u;
    unit autoB12B7348_var;
    unitgroup auto661B309E_g;
    int auto661B309E_u;
    unit auto661B309E_var;
    unitgroup auto104A35A2_g;
    int auto104A35A2_u;
    unit auto104A35A2_var;
    unitgroup auto09FFC5EA_g;
    int auto09FFC5EA_u;
    unit auto09FFC5EA_var;
    unitgroup autoC3E1AA6E_g;
    int autoC3E1AA6E_u;
    unit autoC3E1AA6E_var;
    unitgroup auto5123C368_g;
    int auto5123C368_u;
    unit auto5123C368_var;
    unitgroup auto0EBEEC19_g;
    int auto0EBEEC19_u;
    unit auto0EBEEC19_var;
    unitgroup auto11E2304B_g;
    int auto11E2304B_u;
    unit auto11E2304B_var;
    unitgroup auto1E7DE889_g;
    int auto1E7DE889_u;
    unit auto1E7DE889_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD616BB1E_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD616BB1E_u = UnitGroupCount(autoD616BB1E_g, c_unitCountAll);
    for (;; autoD616BB1E_u -= 1) {
        autoD616BB1E_var = UnitGroupUnitFromEnd(autoD616BB1E_g, autoD616BB1E_u);
        if (autoD616BB1E_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoD616BB1E_var, "Nexus");
    }
    autoB12B7348_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB12B7348_u = UnitGroupCount(autoB12B7348_g, c_unitCountAll);
    for (;; autoB12B7348_u -= 1) {
        autoB12B7348_var = UnitGroupUnitFromEnd(autoB12B7348_g, autoB12B7348_u);
        if (autoB12B7348_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoB12B7348_var, "AutomatedRefinery");
    }
    auto661B309E_g = UnitGroup("FleetBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto661B309E_u = UnitGroupCount(auto661B309E_g, c_unitCountAll);
    for (;; auto661B309E_u -= 1) {
        auto661B309E_var = UnitGroupUnitFromEnd(auto661B309E_g, auto661B309E_u);
        if (auto661B309E_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto661B309E_var, "FleetBeacon");
    }
    auto104A35A2_g = UnitGroup("Market", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto104A35A2_u = UnitGroupCount(auto104A35A2_g, c_unitCountAll);
    for (;; auto104A35A2_u -= 1) {
        auto104A35A2_var = UnitGroupUnitFromEnd(auto104A35A2_g, auto104A35A2_u);
        if (auto104A35A2_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto104A35A2_var, "RoboticsFacility");
    }
    auto09FFC5EA_g = UnitGroup("GlobalMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto09FFC5EA_u = UnitGroupCount(auto09FFC5EA_g, c_unitCountAll);
    for (;; auto09FFC5EA_u -= 1) {
        auto09FFC5EA_var = UnitGroupUnitFromEnd(auto09FFC5EA_g, auto09FFC5EA_u);
        if (auto09FFC5EA_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto09FFC5EA_var, "RoboticsFacility32");
    }
    autoC3E1AA6E_g = UnitGroup("UndergroundMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC3E1AA6E_u = UnitGroupCount(autoC3E1AA6E_g, c_unitCountAll);
    for (;; autoC3E1AA6E_u -= 1) {
        autoC3E1AA6E_var = UnitGroupUnitFromEnd(autoC3E1AA6E_g, autoC3E1AA6E_u);
        if (autoC3E1AA6E_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoC3E1AA6E_var, "RoboticsFacility4");
    }
    auto5123C368_g = UnitGroup("RoboticsBay", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5123C368_u = UnitGroupCount(auto5123C368_g, c_unitCountAll);
    for (;; auto5123C368_u -= 1) {
        auto5123C368_var = UnitGroupUnitFromEnd(auto5123C368_g, auto5123C368_u);
        if (auto5123C368_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto5123C368_var, "RoboticsBay");
    }
    auto0EBEEC19_g = UnitGroup("DarkShrine", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0EBEEC19_u = UnitGroupCount(auto0EBEEC19_g, c_unitCountAll);
    for (;; auto0EBEEC19_u -= 1) {
        auto0EBEEC19_var = UnitGroupUnitFromEnd(auto0EBEEC19_g, auto0EBEEC19_u);
        if (auto0EBEEC19_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto0EBEEC19_var, "DarkShrine");
    }
    auto11E2304B_g = UnitGroup("Forge", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto11E2304B_u = UnitGroupCount(auto11E2304B_g, c_unitCountAll);
    for (;; auto11E2304B_u -= 1) {
        auto11E2304B_var = UnitGroupUnitFromEnd(auto11E2304B_g, auto11E2304B_u);
        if (auto11E2304B_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto11E2304B_var, "Forge");
    }
    auto1E7DE889_g = UnitGroup("Gateway", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1E7DE889_u = UnitGroupCount(auto1E7DE889_g, c_unitCountAll);
    for (;; auto1E7DE889_u -= 1) {
        auto1E7DE889_var = UnitGroupUnitFromEnd(auto1E7DE889_g, auto1E7DE889_u);
        if (auto1E7DE889_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto1E7DE889_var, "Gateway");
    }
    Wait(0.1, c_timeGame);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DarkProtoss", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapBuildingSkinsDarkProtoss_Init () {
    gt_SwapBuildingSkinsDarkProtoss = TriggerCreate("gt_SwapBuildingSkinsDarkProtoss_Func");
    TriggerAddEventUnitAbility(gt_SwapBuildingSkinsDarkProtoss, null, AbilityCommand("SwaptoModel3", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swap Building Skins Zerg
//--------------------------------------------------------------------------------------------------
bool gt_SwapBuildingSkinsZerg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE430A6A4_g;
    int autoE430A6A4_u;
    unit autoE430A6A4_var;
    unitgroup autoE199A508_g;
    int autoE199A508_u;
    unit autoE199A508_var;
    unitgroup auto3F8CDBCC_g;
    int auto3F8CDBCC_u;
    unit auto3F8CDBCC_var;
    unitgroup autoF9E68AB6_g;
    int autoF9E68AB6_u;
    unit autoF9E68AB6_var;
    unitgroup auto4582BD38_g;
    int auto4582BD38_u;
    unit auto4582BD38_var;
    unitgroup auto16A1A7A4_g;
    int auto16A1A7A4_u;
    unit auto16A1A7A4_var;
    unitgroup auto80B3BA39_g;
    int auto80B3BA39_u;
    unit auto80B3BA39_var;
    unitgroup autoE680AFD5_g;
    int autoE680AFD5_u;
    unit autoE680AFD5_var;
    unitgroup auto1BBD008E_g;
    int auto1BBD008E_u;
    unit auto1BBD008E_var;
    unitgroup auto81A7F3F7_g;
    int auto81A7F3F7_u;
    unit auto81A7F3F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DarkProtoss", 0);
    autoE430A6A4_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHover) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE430A6A4_u = UnitGroupCount(autoE430A6A4_g, c_unitCountAll);
    for (;; autoE430A6A4_u -= 1) {
        autoE430A6A4_var = UnitGroupUnitFromEnd(autoE430A6A4_g, autoE430A6A4_u);
        if (autoE430A6A4_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoE430A6A4_var, "Overmind");
    }
    autoE199A508_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE199A508_u = UnitGroupCount(autoE199A508_g, c_unitCountAll);
    for (;; autoE199A508_u -= 1) {
        autoE199A508_var = UnitGroupUnitFromEnd(autoE199A508_g, autoE199A508_u);
        if (autoE199A508_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoE199A508_var, "Extractor");
    }
    auto3F8CDBCC_g = UnitGroup("FleetBeacon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto3F8CDBCC_u = UnitGroupCount(auto3F8CDBCC_g, c_unitCountAll);
    for (;; auto3F8CDBCC_u -= 1) {
        auto3F8CDBCC_var = UnitGroupUnitFromEnd(auto3F8CDBCC_g, auto3F8CDBCC_u);
        if (auto3F8CDBCC_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto3F8CDBCC_var, "SpawningPool");
    }
    autoF9E68AB6_g = UnitGroup("Market", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF9E68AB6_u = UnitGroupCount(autoF9E68AB6_g, c_unitCountAll);
    for (;; autoF9E68AB6_u -= 1) {
        autoF9E68AB6_var = UnitGroupUnitFromEnd(autoF9E68AB6_g, autoF9E68AB6_u);
        if (autoF9E68AB6_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoF9E68AB6_var, "EvolutionChamber");
    }
    auto4582BD38_g = UnitGroup("GlobalMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4582BD38_u = UnitGroupCount(auto4582BD38_g, c_unitCountAll);
    for (;; auto4582BD38_u -= 1) {
        auto4582BD38_var = UnitGroupUnitFromEnd(auto4582BD38_g, auto4582BD38_u);
        if (auto4582BD38_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto4582BD38_var, "EvolutionChamber");
    }
    auto16A1A7A4_g = UnitGroup("UndergroundMarket", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto16A1A7A4_u = UnitGroupCount(auto16A1A7A4_g, c_unitCountAll);
    for (;; auto16A1A7A4_u -= 1) {
        auto16A1A7A4_var = UnitGroupUnitFromEnd(auto16A1A7A4_g, auto16A1A7A4_u);
        if (auto16A1A7A4_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto16A1A7A4_var, "EvolutionChamber");
    }
    auto80B3BA39_g = UnitGroup("RoboticsBay", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80B3BA39_u = UnitGroupCount(auto80B3BA39_g, c_unitCountAll);
    for (;; auto80B3BA39_u -= 1) {
        auto80B3BA39_var = UnitGroupUnitFromEnd(auto80B3BA39_g, auto80B3BA39_u);
        if (auto80B3BA39_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto80B3BA39_var, "HydraliskDen");
    }
    autoE680AFD5_g = UnitGroup("DarkShrine", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE680AFD5_u = UnitGroupCount(autoE680AFD5_g, c_unitCountAll);
    for (;; autoE680AFD5_u -= 1) {
        autoE680AFD5_var = UnitGroupUnitFromEnd(autoE680AFD5_g, autoE680AFD5_u);
        if (autoE680AFD5_var == null) { break; }
        gf_SwapModel(EventPlayer(), autoE680AFD5_var, "Spire");
    }
    auto1BBD008E_g = UnitGroup("Forge", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1BBD008E_u = UnitGroupCount(auto1BBD008E_g, c_unitCountAll);
    for (;; auto1BBD008E_u -= 1) {
        auto1BBD008E_var = UnitGroupUnitFromEnd(auto1BBD008E_g, auto1BBD008E_u);
        if (auto1BBD008E_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto1BBD008E_var, "LurkerDen");
    }
    auto81A7F3F7_g = UnitGroup("Gateway", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81A7F3F7_u = UnitGroupCount(auto81A7F3F7_g, c_unitCountAll);
    for (;; auto81A7F3F7_u -= 1) {
        auto81A7F3F7_var = UnitGroupUnitFromEnd(auto81A7F3F7_g, auto81A7F3F7_u);
        if (auto81A7F3F7_var == null) { break; }
        gf_SwapModel(EventPlayer(), auto81A7F3F7_var, "RoachWarren");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwapBuildingSkinsZerg_Init () {
    gt_SwapBuildingSkinsZerg = TriggerCreate("gt_SwapBuildingSkinsZerg_Func");
    TriggerAddEventUnitAbility(gt_SwapBuildingSkinsZerg, null, AbilityCommand("SwaptoModel3", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 1 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto1Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Probe");
    gf_SwapModelSaveToBank(EventPlayer(), 1, "Probe", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto1Model_Init () {
    gt_BuilderSwapto1Model = TriggerCreate("gt_BuilderSwapto1Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto1Model, null, AbilityCommand("ProbeSwaptoModel", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 2 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto2Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "SCV");
    libNtve_gf_UnitSetVariation(EventUnit(), "SCVFusionWelder", 0, "");
    gf_SwapModelSaveToBank(EventPlayer(), 2, "SCV", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto2Model_Init () {
    gt_BuilderSwapto2Model = TriggerCreate("gt_BuilderSwapto2Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto2Model, null, AbilityCommand("ProbeSwaptoModel", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 3 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto3Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "MinerMale");
    gf_SwapModelSaveToBank(EventPlayer(), 3, "Miner", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto3Model_Init () {
    gt_BuilderSwapto3Model = TriggerCreate("gt_BuilderSwapto3Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto3Model, null, AbilityCommand("ProbeSwaptoModel", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 4 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto4Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "UtilityBot");
    gf_SwapModelSaveToBank(EventPlayer(), 4, "Automation 2000", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto4Model_Init () {
    gt_BuilderSwapto4Model = TriggerCreate("gt_BuilderSwapto4Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto4Model, null, AbilityCommand("ProbeSwaptoModel", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 5 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto5Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "DarkProbe");
    gf_SwapModelSaveToBank(EventPlayer(), 5, "Dark Probe", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto5Model_Init () {
    gt_BuilderSwapto5Model = TriggerCreate("gt_BuilderSwapto5Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto5Model, null, AbilityCommand("ProbeSwaptoModel", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 6 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto6Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Dutch");
    gf_SwapModelSaveToBank(EventPlayer(), 6, "Mechanic", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto6Model_Init () {
    gt_BuilderSwapto6Model = TriggerCreate("gt_BuilderSwapto6Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto6Model, null, AbilityCommand("ProbeSwaptoModel", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 7 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto7Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Bones");
    gf_SwapModelSaveToBank(EventPlayer(), 7, "Scientist", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto7Model_Init () {
    gt_BuilderSwapto7Model = TriggerCreate("gt_BuilderSwapto7Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto7Model, null, AbilityCommand("ProbeSwaptoModel", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 8 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto8Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "MULE");
    gf_SwapModelSaveToBank(EventPlayer(), 8, "MULE", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto8Model_Init () {
    gt_BuilderSwapto8Model = TriggerCreate("gt_BuilderSwapto8Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto8Model, null, AbilityCommand("ProbeSwaptoModel", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 9 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto9Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Medic");
    gf_SwapModelSaveToBank(EventPlayer(), 9, "Medic", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto9Model_Init () {
    gt_BuilderSwapto9Model = TriggerCreate("gt_BuilderSwapto9Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto9Model, null, AbilityCommand("ProbeSwaptoModel", 8), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 10 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto10Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Sentry");
    gf_SwapModelSaveToBank(EventPlayer(), 10, "Sentry", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto10Model_Init () {
    gt_BuilderSwapto10Model = TriggerCreate("gt_BuilderSwapto10Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto10Model, null, AbilityCommand("ProbeSwaptoModel", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 11 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto11Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "PrisonerSpectre");
    gf_SwapModelSaveToBank(EventPlayer(), 11, "Prisoner", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto11Model_Init () {
    gt_BuilderSwapto11Model = TriggerCreate("gt_BuilderSwapto11Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto11Model, null, AbilityCommand("ProbeSwaptoModel", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 12 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto12Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "DevilDog");
    gf_SwapModelSaveToBank(EventPlayer(), 12, "Devil Dog", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto12Model_Init () {
    gt_BuilderSwapto12Model = TriggerCreate("gt_BuilderSwapto12Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto12Model, null, AbilityCommand("ProbeSwaptoModel", 11), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 13 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto13Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 13))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Baneling");
    gf_SwapModelSaveToBank(EventPlayer(), 13, "Baneling", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto13Model_Init () {
    gt_BuilderSwapto13Model = TriggerCreate("gt_BuilderSwapto13Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto13Model, null, AbilityCommand("ProbeSwaptoModel", 12), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 14 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto14Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Hellion");
    gf_SwapModelSaveToBank(EventPlayer(), 14, "Hellion", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto14Model_Init () {
    gt_BuilderSwapto14Model = TriggerCreate("gt_BuilderSwapto14Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto14Model, null, AbilityCommand("ProbeSwaptoModel", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 15 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto15Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeCube");
    gf_SwapModelSaveToBank(EventPlayer(), 15, "Shape Cube", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto15Model_Init () {
    gt_BuilderSwapto15Model = TriggerCreate("gt_BuilderSwapto15Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto15Model, null, AbilityCommand("ProbeSwaptoModel", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 17
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 17))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ChangelingZerglingWings");
    gf_SwapModelSaveToBank(EventPlayer(), 17, "Changeling Zergling Wings", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto17_Init () {
    gt_BuilderSwapto17 = TriggerCreate("gt_BuilderSwapto17_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto17, null, AbilityCommand("ProbeSwaptoModel", 20), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 18
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 18))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Larva");
    gf_SwapModelSaveToBank(EventPlayer(), 18, "Larva", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto18_Init () {
    gt_BuilderSwapto18 = TriggerCreate("gt_BuilderSwapto18_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto18, null, AbilityCommand("ProbeSwaptoModel", 21), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 19
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto19_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 19))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeLemon");
    gf_SwapModelSaveToBank(EventPlayer(), 19, "Shape Lemon", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto19_Init () {
    gt_BuilderSwapto19 = TriggerCreate("gt_BuilderSwapto19_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto19, null, AbilityCommand("ProbeSwaptoModel", 22), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 20 Model
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto20Model_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "SpaceDiablo");
    gf_SwapModelSaveToBank(EventPlayer(), 20, "Space Diablo", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto20Model_Init () {
    gt_BuilderSwapto20Model = TriggerCreate("gt_BuilderSwapto20Model_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto20Model, null, AbilityCommand("ProbeSwaptoModel", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 21
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto21_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 21))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Vulture");
    gf_SwapModelSaveToBank(EventPlayer(), 21, "Vulture", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto21_Init () {
    gt_BuilderSwapto21 = TriggerCreate("gt_BuilderSwapto21_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto21, null, AbilityCommand("ProbeSwaptoModel", 23), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 22
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 22))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_Signal("RemoveGlow"));
    gf_SwapModel(EventPlayer(), EventUnit(), "SpiderMineVulture");
    gf_SwapModelSaveToBank(EventPlayer(), 22, "Spider Mine Vulture", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto22_Init () {
    gt_BuilderSwapto22 = TriggerCreate("gt_BuilderSwapto22_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto22, null, AbilityCommand("ProbeSwaptoModel", 24), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 23
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto23_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 23))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Diamondback");
    gf_SwapModelSaveToBank(EventPlayer(), 23, "Diamondback", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto23_Init () {
    gt_BuilderSwapto23 = TriggerCreate("gt_BuilderSwapto23_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto23, null, AbilityCommand("ProbeSwaptoModel", 25), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 24
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto24_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 24))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "CargoTruckUnitFlatbed");
    gf_SwapModelSaveToBank(EventPlayer(), 24, "Cargo Truck Unit (Flatbed)", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto24_Init () {
    gt_BuilderSwapto24 = TriggerCreate("gt_BuilderSwapto24_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto24, null, AbilityCommand("ProbeSwaptoModel", 26), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 25
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "DumpTruck");
    gf_SwapModelSaveToBank(EventPlayer(), 25, "Dump Truck (Construction)", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto25_Init () {
    gt_BuilderSwapto25 = TriggerCreate("gt_BuilderSwapto25_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto25, null, AbilityCommand("ProbeSwaptoModel", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 26
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto26_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 26))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "CruiserBike");
    gf_SwapModelSaveToBank(EventPlayer(), 26, "Cruiser Bike", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto26_Init () {
    gt_BuilderSwapto26 = TriggerCreate("gt_BuilderSwapto26_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto26, null, AbilityCommand("ProbeSwaptoModel", 28), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 27
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto27_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 27))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "AdjutantCapsule");
    gf_SwapModelSaveToBank(EventPlayer(), 27, "Adjutant Capsule", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto27_Init () {
    gt_BuilderSwapto27 = TriggerCreate("gt_BuilderSwapto27_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto27, null, AbilityCommand("ProbeSwaptoModel", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 28
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto28_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 28))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Changeling");
    gf_SwapModelSaveToBank(EventPlayer(), 28, "Changeling", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto28_Init () {
    gt_BuilderSwapto28 = TriggerCreate("gt_BuilderSwapto28_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto28, null, AbilityCommand("ProbeSwaptoModel", 29), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 29
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto29_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 29))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "SiegeTank");
    gf_SwapModelSaveToBank(EventPlayer(), 29, "Siege Tank", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto29_Init () {
    gt_BuilderSwapto29 = TriggerCreate("gt_BuilderSwapto29_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto29, null, AbilityCommand("SwaptoModel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 30
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto30_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 30))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "PickupEnergyFull");
    gf_SwapModelSaveToBank(EventPlayer(), 30, "Pickup Energy Full", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto30_Init () {
    gt_BuilderSwapto30 = TriggerCreate("gt_BuilderSwapto30_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto30, null, AbilityCommand("ProbeSwaptoModel", 17), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 31
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto31_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 31))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "PickupHealthFull");
    gf_SwapModelSaveToBank(EventPlayer(), 31, "Pickup Health Full", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto31_Init () {
    gt_BuilderSwapto31 = TriggerCreate("gt_BuilderSwapto31_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto31, null, AbilityCommand("ProbeSwaptoModel", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 32
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto32_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 32))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "CarrionBird");
    gf_SwapModelSaveToBank(EventPlayer(), 32, "Carrion Bird", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto32_Init () {
    gt_BuilderSwapto32 = TriggerCreate("gt_BuilderSwapto32_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto32, null, AbilityCommand("SwaptoModel2", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 33
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto33_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 33))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Dog");
    gf_SwapModelSaveToBank(EventPlayer(), 33, "Dog", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto33_Init () {
    gt_BuilderSwapto33 = TriggerCreate("gt_BuilderSwapto33_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto33, null, AbilityCommand("SwaptoModel2", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 34
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto34_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 34))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "KarakMale");
    gf_SwapModelSaveToBank(EventPlayer(), 34, "Karak Male", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto34_Init () {
    gt_BuilderSwapto34 = TriggerCreate("gt_BuilderSwapto34_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto34, null, AbilityCommand("SwaptoModel2", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 35
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto35_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 35))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Sheep");
    gf_SwapModelSaveToBank(EventPlayer(), 35, "Sheep", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto35_Init () {
    gt_BuilderSwapto35 = TriggerCreate("gt_BuilderSwapto35_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto35, null, AbilityCommand("SwaptoModel2", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 36
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto36_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 36))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Cow");
    gf_SwapModelSaveToBank(EventPlayer(), 36, "Cow", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto36_Init () {
    gt_BuilderSwapto36 = TriggerCreate("gt_BuilderSwapto36_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto36, null, AbilityCommand("SwaptoModel2", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 37
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto37_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 37))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeSoccerball");
    gf_SwapModelSaveToBank(EventPlayer(), 37, "Shape Soccerball", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto37_Init () {
    gt_BuilderSwapto37 = TriggerCreate("gt_BuilderSwapto37_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto37, null, AbilityCommand("SwaptoModel2", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 38
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto38_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 38))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeBasketball");
    gf_SwapModelSaveToBank(EventPlayer(), 38, "Shape Basketball", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto38_Init () {
    gt_BuilderSwapto38 = TriggerCreate("gt_BuilderSwapto38_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto38, null, AbilityCommand("SwaptoModel2", 8), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 39
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto39_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 39))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeFootballColored");
    gf_SwapModelSaveToBank(EventPlayer(), 39, "Shape Football Colored", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto39_Init () {
    gt_BuilderSwapto39 = TriggerCreate("gt_BuilderSwapto39_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto39, null, AbilityCommand("SwaptoModel2", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 40
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto40_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeBanana");
    gf_SwapModelSaveToBank(EventPlayer(), 40, "Shape Banana", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto40_Init () {
    gt_BuilderSwapto40 = TriggerCreate("gt_BuilderSwapto40_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto40, null, AbilityCommand("SwaptoModel2", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 41
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto41_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 41))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeApple");
    gf_SwapModelSaveToBank(EventPlayer(), 41, "Shape Apple", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto41_Init () {
    gt_BuilderSwapto41 = TriggerCreate("gt_BuilderSwapto41_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto41, null, AbilityCommand("SwaptoModel2", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 42
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto42_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 42))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapePineapple");
    gf_SwapModelSaveToBank(EventPlayer(), 42, "Shape Pineapple", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto42_Init () {
    gt_BuilderSwapto42 = TriggerCreate("gt_BuilderSwapto42_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto42, null, AbilityCommand("SwaptoModel2", 11), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 43
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto43_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 43))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "ShapeWatermelon");
    gf_SwapModelSaveToBank(EventPlayer(), 43, "Shape Watermelon", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto43_Init () {
    gt_BuilderSwapto43 = TriggerCreate("gt_BuilderSwapto43_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto43, null, AbilityCommand("SwaptoModel2", 12), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap to 46
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapto46_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 46))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SwapModel(EventPlayer(), EventUnit(), "Shark1");
    gf_SwapModelSaveToBank(EventPlayer(), 46, "Landshark", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapto46_Init () {
    gt_BuilderSwapto46 = TriggerCreate("gt_BuilderSwapto46_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapto46, null, AbilityCommand("SwaptoModel3", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Swap Rank S-1
//--------------------------------------------------------------------------------------------------
bool gt_SpiritSwapRankS1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Karass");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritSwapRankS1_Init () {
    gt_SpiritSwapRankS1 = TriggerCreate("gt_SpiritSwapRankS1_Func");
    TriggerAddEventUnitAbility(gt_SpiritSwapRankS1, null, AbilityCommand("SwaptoModel2", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Swap Rank S-15
//--------------------------------------------------------------------------------------------------
bool gt_SpiritSwapRankS15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Disruptor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritSwapRankS15_Init () {
    gt_SpiritSwapRankS15 = TriggerCreate("gt_SpiritSwapRankS15_Func");
    TriggerAddEventUnitAbility(gt_SpiritSwapRankS15, null, AbilityCommand("SwaptoModel2", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Swap Rank S-25
//--------------------------------------------------------------------------------------------------
bool gt_SpiritSwapRankS25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "MegalithCutter");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritSwapRankS25_Init () {
    gt_SpiritSwapRankS25 = TriggerCreate("gt_SpiritSwapRankS25_Func");
    TriggerAddEventUnitAbility(gt_SpiritSwapRankS25, null, AbilityCommand("SwaptoModel2", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Swap Rank S-50
//--------------------------------------------------------------------------------------------------
bool gt_SpiritSwapRankS50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "HybridNemesis");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritSwapRankS50_Init () {
    gt_SpiritSwapRankS50 = TriggerCreate("gt_SpiritSwapRankS50_Func");
    TriggerAddEventUnitAbility(gt_SpiritSwapRankS50, null, AbilityCommand("SwaptoModel2", 17), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirit Swap Rank S-100
//--------------------------------------------------------------------------------------------------
bool gt_SpiritSwapRankS100_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "KerriganEpilogue03");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiritSwapRankS100_Init () {
    gt_SpiritSwapRankS100 = TriggerCreate("gt_SpiritSwapRankS100_Func");
    TriggerAddEventUnitAbility(gt_SpiritSwapRankS100, null, AbilityCommand("SwaptoModel2", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-1
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Warbot");
    gf_SwapModelSaveToBank(EventPlayer(), 50, "Warbot", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS1_Init () {
    gt_BuilderSwapRankS1 = TriggerCreate("gt_BuilderSwapRankS1_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS1, null, AbilityCommand("SwaptoModel3", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-5
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 51))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "TitanMechAssault");
    gf_SwapModelSaveToBank(EventPlayer(), 51, "Titan Mech Assult", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS5_Init () {
    gt_BuilderSwapRankS5 = TriggerCreate("gt_BuilderSwapRankS5_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS5, null, AbilityCommand("SwaptoModel3", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-10
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 52))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Odin");
    gf_SwapModelSaveToBank(EventPlayer(), 52, "Odin", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS10_Init () {
    gt_BuilderSwapRankS10 = TriggerCreate("gt_BuilderSwapRankS10_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS10, null, AbilityCommand("SwaptoModel3", 17), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-20
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 53))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "MilitarizedColonistTransport");
    gf_SwapModelSaveToBank(EventPlayer(), 53, "Militarized Colonist Transport", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS20_Init () {
    gt_BuilderSwapRankS20 = TriggerCreate("gt_BuilderSwapRankS20_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS20, null, AbilityCommand("SwaptoModel3", 19), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-25
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 54))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.25, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "SlaynElementalSmall");
    gf_SwapModelSaveToBank(EventPlayer(), 54, "Slayn Elemental", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS25_Init () {
    gt_BuilderSwapRankS25 = TriggerCreate("gt_BuilderSwapRankS25_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS25, null, AbilityCommand("SwaptoModel3", 20), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-30
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS30_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 55))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "ImmortalShakuras");
    gf_SwapModelSaveToBank(EventPlayer(), 55, "Immortal Shakuras", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS30_Init () {
    gt_BuilderSwapRankS30 = TriggerCreate("gt_BuilderSwapRankS30_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS30, null, AbilityCommand("SwaptoModel3", 23), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-40
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS40_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 56))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Kraith");
    gf_SwapModelSaveToBank(EventPlayer(), 56, "Kraith", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS40_Init () {
    gt_BuilderSwapRankS40 = TriggerCreate("gt_BuilderSwapRankS40_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS40, null, AbilityCommand("SwaptoModel3", 24), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-50
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 57))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Dragoon");
    gf_SwapModelSaveToBank(EventPlayer(), 57, "Dragoon", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS50_Init () {
    gt_BuilderSwapRankS50 = TriggerCreate("gt_BuilderSwapRankS50_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS50, null, AbilityCommand("SwaptoModel3", 21), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-60
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS60_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 58))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "FenixSOA");
    gf_SwapModelSaveToBank(EventPlayer(), 58, "FenixSOA", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS60_Init () {
    gt_BuilderSwapRankS60 = TriggerCreate("gt_BuilderSwapRankS60_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS60, null, AbilityCommand("SwaptoModel3", 25), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-70
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS70_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 59))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.25, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "RubberDuck");
    gf_SwapModelSaveToBank(EventPlayer(), 59, "Rubber Duck", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS70_Init () {
    gt_BuilderSwapRankS70 = TriggerCreate("gt_BuilderSwapRankS70_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS70, null, AbilityCommand("SwaptoModel3", 26), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-75
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS75_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 60))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "ZerglingCarbot");
    gf_SwapModelSaveToBank(EventPlayer(), 60, "Carbot Zergling", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS75_Init () {
    gt_BuilderSwapRankS75 = TriggerCreate("gt_BuilderSwapRankS75_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS75, null, AbilityCommand("SwaptoModel3", 22), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-80
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS80_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 61))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "InfestedStukov");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_Signal("RemoveGlow"));
    gf_SwapModelSaveToBank(EventPlayer(), 61, "Infested Stukov", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS80_Init () {
    gt_BuilderSwapRankS80 = TriggerCreate("gt_BuilderSwapRankS80_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS80, null, AbilityCommand("SwaptoModel3", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-90
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS90_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 62))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "K5Kerrigan");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_Signal("RemoveGlow"));
    gf_SwapModelSaveToBank(EventPlayer(), 62, "K5Kerrigan", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS90_Init () {
    gt_BuilderSwapRankS90 = TriggerCreate("gt_BuilderSwapRankS90_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS90, null, AbilityCommand("SwaptoModel3", 28), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builder Swap Rank S-100
//--------------------------------------------------------------------------------------------------
bool gt_BuilderSwapRankS100_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_probeModel[EventPlayer()] != 63))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "ValerianLab");
    gf_SwapModelSaveToBank(EventPlayer(), 63, "Valerian Lab", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuilderSwapRankS100_Init () {
    gt_BuilderSwapRankS100 = TriggerCreate("gt_BuilderSwapRankS100_Func");
    TriggerAddEventUnitAbility(gt_BuilderSwapRankS100, null, AbilityCommand("SwaptoModel3", 29), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 1
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "PrisonZealot");
    gf_SwapModelSaveToBank(EventPlayer(), 1, "Zealot", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel1_Init () {
    gt_VampireSwaptoModel1 = TriggerCreate("gt_VampireSwaptoModel1_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel1, null, AbilityCommand("Zealot", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 2
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "InfestedTerran");
    gf_SwapModelSaveToBank(EventPlayer(), 2, "Infested Terran", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel2_Init () {
    gt_VampireSwaptoModel2 = TriggerCreate("gt_VampireSwaptoModel2_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel2, null, AbilityCommand("Zealot", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 3
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "InfestedCivilian");
    gf_SwapModelSaveToBank(EventPlayer(), 3, "Infested Civilian", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel3_Init () {
    gt_VampireSwaptoModel3 = TriggerCreate("gt_VampireSwaptoModel3_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel3, null, AbilityCommand("Zealot", 8), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 4
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "QueenOfBlades");
    gf_SwapModelSaveToBank(EventPlayer(), 4, "Kerrigan", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel4_Init () {
    gt_VampireSwaptoModel4 = TriggerCreate("gt_VampireSwaptoModel4_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel4, null, AbilityCommand("Zealot", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 5
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Roach");
    gf_SwapModelSaveToBank(EventPlayer(), 5, "Roach", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel5_Init () {
    gt_VampireSwaptoModel5 = TriggerCreate("gt_VampireSwaptoModel5_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel5, null, AbilityCommand("Zealot", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 6
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Queen");
    gf_SwapModelSaveToBank(EventPlayer(), 6, "Queen", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel6_Init () {
    gt_VampireSwaptoModel6 = TriggerCreate("gt_VampireSwaptoModel6_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel6, null, AbilityCommand("Zealot", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 7
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Brutalisk");
    gf_SwapModelSaveToBank(EventPlayer(), 7, "Brutalisk", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel7_Init () {
    gt_VampireSwaptoModel7 = TriggerCreate("gt_VampireSwaptoModel7_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel7, null, AbilityCommand("Zealot", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 8
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Hydralisk");
    gf_SwapModelSaveToBank(EventPlayer(), 8, "Hydralisk", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel8_Init () {
    gt_VampireSwaptoModel8 = TriggerCreate("gt_VampireSwaptoModel8_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel8, null, AbilityCommand("Zealot", 7), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 9
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 9))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "PredatorSkin");
    gf_SwapModelSaveToBank(EventPlayer(), 9, "Predator", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel9_Init () {
    gt_VampireSwaptoModel9 = TriggerCreate("gt_VampireSwaptoModel9_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel9, null, AbilityCommand("Zealot", 12), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 10
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "DarkZealot");
    gf_SwapModelSaveToBank(EventPlayer(), 10, "Dark Zealot", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel10_Init () {
    gt_VampireSwaptoModel10 = TriggerCreate("gt_VampireSwaptoModel10_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel10, null, AbilityCommand("Zealot", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 11
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "DarkTemplar");
    gf_SwapModelSaveToBank(EventPlayer(), 11, "Dark Templar", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel11_Init () {
    gt_VampireSwaptoModel11 = TriggerCreate("gt_VampireSwaptoModel11_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel11, null, AbilityCommand("Zealot", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 12
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "HybridE");
    gf_SwapModelSaveToBank(EventPlayer(), 12, "Hybrid", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel12_Init () {
    gt_VampireSwaptoModel12 = TriggerCreate("gt_VampireSwaptoModel12_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel12, null, AbilityCommand("Zealot", 6), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 13
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 13))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Zealot");
    gf_SwapModelSaveToBank(EventPlayer(), 13, "Zealot", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel13_Init () {
    gt_VampireSwaptoModel13 = TriggerCreate("gt_VampireSwaptoModel13_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel13, null, AbilityCommand("Zealot", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 14
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "InfestedAbomination");
    gf_SwapModelSaveToBank(EventPlayer(), 14, "Abberation", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel14_Init () {
    gt_VampireSwaptoModel14 = TriggerCreate("gt_VampireSwaptoModel14_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel14, null, AbilityCommand("Zealot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 15
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 15))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Ultralisk");
    gf_SwapModelSaveToBank(EventPlayer(), 15, "Ultralisk", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel15_Init () {
    gt_VampireSwaptoModel15 = TriggerCreate("gt_VampireSwaptoModel15_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel15, null, AbilityCommand("Zealot", 11), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 16
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Zergling");
    gf_SwapModelSaveToBank(EventPlayer(), 16, "Zergling", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel16_Init () {
    gt_VampireSwaptoModel16 = TriggerCreate("gt_VampireSwaptoModel16_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel16, null, AbilityCommand("Zealot", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 17
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel17_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 17))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Broodling");
    gf_SwapModelSaveToBank(EventPlayer(), 17, "Broodling", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel17_Init () {
    gt_VampireSwaptoModel17 = TriggerCreate("gt_VampireSwaptoModel17_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel17, null, AbilityCommand("Zealot", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 18
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel18_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 18))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Zeratul");
    gf_SwapModelSaveToBank(EventPlayer(), 18, "Zeratul", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel18_Init () {
    gt_VampireSwaptoModel18 = TriggerCreate("gt_VampireSwaptoModel18_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel18, null, AbilityCommand("Zealot", 17), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 19
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel19_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 19))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "DeathwingGround");
    gf_SwapModelSaveToBank(EventPlayer(), 19, "Death", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel19_Init () {
    gt_VampireSwaptoModel19 = TriggerCreate("gt_VampireSwaptoModel19_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel19, null, AbilityCommand("Zealot", 19), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 20
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 20))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Alexstraza");
    gf_SwapModelSaveToBank(EventPlayer(), 20, "Life-Binder", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel20_Init () {
    gt_VampireSwaptoModel20 = TriggerCreate("gt_VampireSwaptoModel20_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel20, null, AbilityCommand("Zealot", 20), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 21
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel21_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 21))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Nozdomu");
    gf_SwapModelSaveToBank(EventPlayer(), 21, "Timeless One", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel21_Init () {
    gt_VampireSwaptoModel21 = TriggerCreate("gt_VampireSwaptoModel21_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel21, null, AbilityCommand("Zealot", 21), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 22
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel22_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 22))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Ysera");
    gf_SwapModelSaveToBank(EventPlayer(), 22, "Dreamer", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel22_Init () {
    gt_VampireSwaptoModel22 = TriggerCreate("gt_VampireSwaptoModel22_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel22, null, AbilityCommand("Zealot", 23), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 23
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel23_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 23))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Malygos");
    gf_SwapModelSaveToBank(EventPlayer(), 23, "Spell Weaver", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel23_Init () {
    gt_VampireSwaptoModel23 = TriggerCreate("gt_VampireSwaptoModel23_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel23, null, AbilityCommand("Zealot", 22), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 24
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel24_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 24))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "PhoenixDark");
    gf_SwapModelSaveToBank(EventPlayer(), 24, "Dark Fire", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel24_Init () {
    gt_VampireSwaptoModel24 = TriggerCreate("gt_VampireSwaptoModel24_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel24, null, AbilityCommand("Zealot", 24), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 25
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "GreenTurtle");
    gf_SwapModelSaveToBank(EventPlayer(), 25, "Green Turtle", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel25_Init () {
    gt_VampireSwaptoModel25 = TriggerCreate("gt_VampireSwaptoModel25_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel25, null, AbilityCommand("Zealot", 25), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 26
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel26_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 26))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "RaptorGreen");
    gf_SwapModelSaveToBank(EventPlayer(), 26, "Green Raptor", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel26_Init () {
    gt_VampireSwaptoModel26 = TriggerCreate("gt_VampireSwaptoModel26_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel26, null, AbilityCommand("Zealot", 26), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 27
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel27_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 27))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "GreenRex");
    gf_SwapModelSaveToBank(EventPlayer(), 27, "Green Rex", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel27_Init () {
    gt_VampireSwaptoModel27 = TriggerCreate("gt_VampireSwaptoModel27_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel27, null, AbilityCommand("Zealot", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 28
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel28_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 28))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Diematradon");
    gf_SwapModelSaveToBank(EventPlayer(), 28, "Diematradon", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel28_Init () {
    gt_VampireSwaptoModel28 = TriggerCreate("gt_VampireSwaptoModel28_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel28, null, AbilityCommand("Zealot", 28), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap to Model 29
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwaptoModel29_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 29))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "AlarakChampion");
    gf_SwapModelSaveToBank(EventPlayer(), 29, "Alarak", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwaptoModel29_Init () {
    gt_VampireSwaptoModel29 = TriggerCreate("gt_VampireSwaptoModel29_Func");
    TriggerAddEventUnitAbility(gt_VampireSwaptoModel29, null, AbilityCommand("Zealot2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-1
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 50))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "ZealotPurifier");
    gf_SwapModelSaveToBank(EventPlayer(), 50, "Zealot Purifier", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS1_Init () {
    gt_VampireSwapRankS1 = TriggerCreate("gt_VampireSwapRankS1_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS1, null, AbilityCommand("Zealot2", 25), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-5
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 51))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "PrimalUltralisk");
    gf_SwapModelSaveToBank(EventPlayer(), 51, "Primal Ultralisk", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS5_Init () {
    gt_VampireSwapRankS5 = TriggerCreate("gt_VampireSwapRankS5_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS5, null, AbilityCommand("Zealot2", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-10
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 52))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Brakk");
    gf_SwapModelSaveToBank(EventPlayer(), 52, "Brakk", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS10_Init () {
    gt_VampireSwapRankS10 = TriggerCreate("gt_VampireSwapRankS10_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS10, null, AbilityCommand("Zealot2", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-15
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 53))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "DarkTemplarTaldarim");
    gf_SwapModelSaveToBank(EventPlayer(), 53, "Dark Templar Teldarim", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS15_Init () {
    gt_VampireSwapRankS15 = TriggerCreate("gt_VampireSwapRankS15_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS15, null, AbilityCommand("Zealot2", 26), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-20
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS20_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 54))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Dehaka");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_Signal("RemoveGlow"));
    gf_SwapModelSaveToBank(EventPlayer(), 54, "Dehaka", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS20_Init () {
    gt_VampireSwapRankS20 = TriggerCreate("gt_VampireSwapRankS20_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS20, null, AbilityCommand("Zealot2", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-25
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS25_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 55))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "KerriganVoid");
    gf_SwapModelSaveToBank(EventPlayer(), 55, "Kerrigan Void", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS25_Init () {
    gt_VampireSwapRankS25 = TriggerCreate("gt_VampireSwapRankS25_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS25, null, AbilityCommand("Zealot2", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-30
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS30_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 56))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "HybridBehemoth");
    gf_SwapModelSaveToBank(EventPlayer(), 56, "Hybrid Behemoth", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS30_Init () {
    gt_VampireSwapRankS30 = TriggerCreate("gt_VampireSwapRankS30_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS30, null, AbilityCommand("Zealot2", 28), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-35
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS35_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 57))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "VorazunChampion");
    gf_SwapModelSaveToBank(EventPlayer(), 57, "Vorazun", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS35_Init () {
    gt_VampireSwapRankS35 = TriggerCreate("gt_VampireSwapRankS35_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS35, null, AbilityCommand("Zealot2", 29), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-40
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS40_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 58))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "Archon2");
    gf_SwapModelSaveToBank(EventPlayer(), 58, "Dark Elf - Illidian", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS40_Init () {
    gt_VampireSwapRankS40 = TriggerCreate("gt_VampireSwapRankS40_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS40, null, AbilityCommand("Zealot2", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-45
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS45_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 59))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "XelNagaConstruct");
    gf_SwapModelSaveToBank(EventPlayer(), 59, "Xelnaga Construct Sentinel", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS45_Init () {
    gt_VampireSwapRankS45 = TriggerCreate("gt_VampireSwapRankS45_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS45, null, AbilityCommand("Zealot2", 9), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vampire Swap Rank S-50
//--------------------------------------------------------------------------------------------------
bool gt_VampireSwapRankS50_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zealotModel[EventPlayer()] != 60))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventUnit(), 0.0, 0.0);
    gf_SwapModel(EventPlayer(), EventUnit(), "ArtanisVoid");
    gf_SwapModelSaveToBank(EventPlayer(), 60, "Artanis Void", "");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VampireSwapRankS50_Init () {
    gt_VampireSwapRankS50 = TriggerCreate("gt_VampireSwapRankS50_Func");
    TriggerAddEventUnitAbility(gt_VampireSwapRankS50, null, AbilityCommand("Zealot2", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -obs
//--------------------------------------------------------------------------------------------------
bool gt_obs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = "";

    // Conditions
    if (testConds) {
        if (!(((gf_PlayerIsDeveloper(EventPlayer()) == true) || (gf_PlayerIsModerator(EventPlayer()) == true) || (gf_PlayerHasObserverAccess(EventPlayer()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1FF6A666"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_obs_Init () {
    gt_obs = TriggerCreate("gt_obs_Func");
    TriggerAddEventChatMessage(gt_obs, c_playerAny, "-obs", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Observe Unit - Deselected
//--------------------------------------------------------------------------------------------------
bool gt_ObserveUnitDeselected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_observedInventoryDialog[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObserveUnitDeselected_Init () {
    gt_ObserveUnitDeselected = TriggerCreate("gt_ObserveUnitDeselected_Func");
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[1]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[2]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[3]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[4]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[5]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[6]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[7]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[8]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[9]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[10]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[11]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[12]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[13]"), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ObserveUnitDeselected, UnitRefFromVariable("gv_zealotsTemp[14]"), c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Learn Abilities
//--------------------------------------------------------------------------------------------------
bool gt_InitLearnAbilities_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto77B11E62_g;
    int auto77B11E62_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_arrayLearnAbilities[1][1] = AbilityCommand("ProbeLearn", 0);
    gv_arrayLearnAbilities[1][2] = AbilityCommand("ProbeLearn", 5);
    gv_arrayLearnAbilities[1][3] = AbilityCommand("ProbeLearn", 6);
    gv_arrayLearnAbilities[1][4] = AbilityCommand("ProbeLearn", 7);
    gv_arrayLearnAbilities[2][1] = AbilityCommand("ProbeLearn", 1);
    gv_arrayLearnAbilities[2][2] = AbilityCommand("ProbeLearn", 2);
    gv_arrayLearnAbilities[2][3] = AbilityCommand("ProbeLearn", 3);
    gv_arrayLearnAbilities[2][4] = AbilityCommand("ProbeLearn", 4);
    gv_arrayLearnAbilities[2][5] = AbilityCommand("ProbeLearn", 8);
    auto77B11E62_g = PlayerGroupAll();
    auto77B11E62_var = -1;
    while (true) {
        auto77B11E62_var = PlayerGroupNextPlayer(auto77B11E62_g, auto77B11E62_var);
        if (auto77B11E62_var < 0) { break; }
        TechTreeAbilityAllow(auto77B11E62_var, gv_arrayLearnAbilities[2][1], false);
        TechTreeAbilityAllow(auto77B11E62_var, gv_arrayLearnAbilities[2][2], false);
        TechTreeAbilityAllow(auto77B11E62_var, gv_arrayLearnAbilities[2][3], false);
        TechTreeAbilityAllow(auto77B11E62_var, gv_arrayLearnAbilities[2][4], false);
        TechTreeAbilityAllow(auto77B11E62_var, gv_arrayLearnAbilities[2][5], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitLearnAbilities_Init () {
    gt_InitLearnAbilities = TriggerCreate("gt_InitLearnAbilities_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Learns Ability
//--------------------------------------------------------------------------------------------------
bool gt_ProbeLearnsAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressAbility() == "ZeratulStun")) {
        gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 5), AbilityCommand("ProbeLearn", 6), AbilityCommand("ProbeLearn", 7), null, EventPlayer(), 1, 1);
        gf_SetGroup2(EventPlayer());
        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility) == true)) {
            UnitAbilityShow(EventUnit(), "ZeratulStun", true);
            UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", false);
        }
        else {
            UnitAbilityShow(EventUnit(), "ZeratulStun", false);
            UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", true);
        }
    }
    else {
        if ((libNtve_gf_TriggeringProgressAbility() == "TimeWarp")) {
            gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 0), AbilityCommand("ProbeLearn", 6), AbilityCommand("ProbeLearn", 7), null, EventPlayer(), 1, 2);
            gf_SetGroup2(EventPlayer());
        }
        else {
            if ((libNtve_gf_TriggeringProgressAbility() == "ForceField")) {
                gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 0), AbilityCommand("ProbeLearn", 5), AbilityCommand("ProbeLearn", 7), null, EventPlayer(), 1, 3);
                gf_SetGroup2(EventPlayer());
            }
            else {
                if ((libNtve_gf_TriggeringProgressAbility() == "PsiShield2")) {
                    gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 0), AbilityCommand("ProbeLearn", 5), AbilityCommand("ProbeLearn", 6), null, EventPlayer(), 1, 4);
                    gf_SetGroup2(EventPlayer());
                }
                else {
                    if ((libNtve_gf_TriggeringProgressAbility() == "ZeratulBlink")) {
                        gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 2), AbilityCommand("ProbeLearn", 3), AbilityCommand("ProbeLearn", 4), AbilityCommand("ProbeLearn", 8), EventPlayer(), 2, 1);
                    }
                    else {
                        if ((libNtve_gf_TriggeringProgressAbility() == "HighSpeed")) {
                            gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 1), AbilityCommand("ProbeLearn", 3), AbilityCommand("ProbeLearn", 4), AbilityCommand("ProbeLearn", 8), EventPlayer(), 2, 2);
                        }
                        else {
                            if ((libNtve_gf_TriggeringProgressAbility() == "CloakProbe")) {
                                gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 1), AbilityCommand("ProbeLearn", 2), AbilityCommand("ProbeLearn", 4), AbilityCommand("ProbeLearn", 8), EventPlayer(), 2, 3);
                            }
                            else {
                                if ((libNtve_gf_TriggeringProgressAbility() == "Teleport")) {
                                    gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 1), AbilityCommand("ProbeLearn", 2), AbilityCommand("ProbeLearn", 3), AbilityCommand("ProbeLearn", 8), EventPlayer(), 2, 4);
                                }
                                else {
                                    if ((libNtve_gf_TriggeringProgressAbility() == "AdvancedBlink")) {
                                        gf_ProbeLearnsAbility(AbilityCommand("ProbeLearn", 1), AbilityCommand("ProbeLearn", 2), AbilityCommand("ProbeLearn", 3), AbilityCommand("ProbeLearn", 4), EventPlayer(), 2, 5);
                                    }

                                }
                            }
                        }
                    }
                }
            }
        }
    }
    gv_learnedAbilities[EventPlayer()] += 1;
    UnitAbilityShow(EventUnit(), "FastLearn", false);
    if ((gv_learnedAbilities[EventPlayer()] == 2)) {
        UnitAbilityShow(EventUnit(), "ProbeLearn", false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeLearnsAbility_Init () {
    gt_ProbeLearnsAbility = TriggerCreate("gt_ProbeLearnsAbility_Func");
    TriggerAddEventUnitLearnProgress(gt_ProbeLearnsAbility, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Fast Learn
//--------------------------------------------------------------------------------------------------
bool gt_ProbeFastLearn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abilityNumber1;
    int lv_abilityNumber2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityShow(EventUnit(), "FastLearn", false);
    gf_SetGroup2(EventPlayer());
    lv_abilityNumber1 = BankValueGetAsInt(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility1);
    lv_abilityNumber2 = BankValueGetAsInt(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksPlayerSection, gv_gameplayOptionsBanksPlayerKeys.lv_probeAbility2);
    if (((lv_abilityNumber1 < 1) || (lv_abilityNumber1 > 4) || (lv_abilityNumber2 < 1) || (lv_abilityNumber2 > 5))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ProbeLearn", 0)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ProbeLearn", 1)), c_orderQueueReplace);
        if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility) == true)) {
            UnitAbilityShow(EventUnit(), "ZeratulStun", true);
            UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", false);
        }
        else {
            UnitAbilityShow(EventUnit(), "ZeratulStun", false);
            UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", true);
        }
    }
    else {
        UnitIssueOrder(EventUnit(), Order(gv_arrayLearnAbilities[1][lv_abilityNumber1]), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), Order(gv_arrayLearnAbilities[2][lv_abilityNumber2]), c_orderQueueReplace);
        if ((lv_abilityNumber1 == 1)) {
            if ((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_autoCastVoidPrisonAbility) == true)) {
                UnitAbilityShow(EventUnit(), "ZeratulStun", true);
                UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", false);
            }
            else {
                UnitAbilityShow(EventUnit(), "ZeratulStun", false);
                UnitAbilityShow(EventUnit(), "VoidPrisonAutoCastOff", true);
            }
        }

    }
    UnitAbilityShow(EventUnit(), "ProbeLearn", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeFastLearn_Init () {
    gt_ProbeFastLearn = TriggerCreate("gt_ProbeFastLearn_Func");
    TriggerAddEventUnitAbility(gt_ProbeFastLearn, null, AbilityCommand("FastLearn", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ninja on off
//--------------------------------------------------------------------------------------------------
bool gt_ninjaonoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7DE2E7E7_g;
    int auto7DE2E7E7_u;
    unit auto7DE2E7E7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_ninjaonoff[EventPlayer()] == 0)) {
        gf_GameplayOptionisChecked(gv_saveNinjaOnOff, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, EventPlayer());
        CatalogFieldValueSet(c_gameCatalogButton, "NinjaBonusOn", "Name", EventPlayer(), "Ninja Bonus Off");
        gv_ninjaonoff[EventPlayer()] = 1;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/75DD02DB"));
        auto7DE2E7E7_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7DE2E7E7_u = UnitGroupCount(auto7DE2E7E7_g, c_unitCountAll);
        for (;; auto7DE2E7E7_u -= 1) {
            auto7DE2E7E7_var = UnitGroupUnitFromEnd(auto7DE2E7E7_g, auto7DE2E7E7_u);
            if (auto7DE2E7E7_var == null) { break; }
            if ((UnitHasBehavior(auto7DE2E7E7_var, "NinjaBonus") == true)) {
                UnitBehaviorRemovePlayer(auto7DE2E7E7_var, "NinjaBonus", 0, 1);
            }

        }
        gv_ninjaBuffActiveFlag[EventPlayer()] = 0;
        TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupActive(), true);
    }
    else {
        gf_GameplayOptionisChecked(gv_saveNinjaOnOff, gv_gameplayOptionsBanksOptionsKeys.lv_saveNinjaOnOff, EventPlayer());
        CatalogFieldValueSet(c_gameCatalogButton, "NinjaBonusOn", "Name", EventPlayer(), "Ninja Bonus On");
        gv_ninjaonoff[EventPlayer()] = 0;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E1B30AFD"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ninjaonoff_Init () {
    gt_ninjaonoff = TriggerCreate("gt_ninjaonoff_Func");
    TriggerAddEventUnitAbility(gt_ninjaonoff, null, AbilityCommand("NinjaBonusOn", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Spirit Uses Invis
//--------------------------------------------------------------------------------------------------
bool gt_ProbeSpiritUsesInvis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto26B98328_g;
    int auto26B98328_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto26B98328_g = PlayerGroupActive();
    auto26B98328_var = -1;
    while (true) {
        auto26B98328_var = PlayerGroupNextPlayer(auto26B98328_g, auto26B98328_var);
        if (auto26B98328_var < 0) { break; }
        TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupSingle(auto26B98328_var), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeSpiritUsesInvis_Init () {
    gt_ProbeSpiritUsesInvis = TriggerCreate("gt_ProbeSpiritUsesInvis_Func");
    TriggerAddEventUnitBehaviorChange(gt_ProbeSpiritUsesInvis, null, "Cloakprobe", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_ProbeSpiritUsesInvis, null, "CloakProbe", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe Invis Expires
//--------------------------------------------------------------------------------------------------
bool gt_ProbeInvisExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0E80C8CA_g;
    int auto0E80C8CA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E80C8CA_g = PlayerGroupActive();
    auto0E80C8CA_var = -1;
    while (true) {
        auto0E80C8CA_var = PlayerGroupNextPlayer(auto0E80C8CA_g, auto0E80C8CA_var);
        if (auto0E80C8CA_var < 0) { break; }
        if (((gv_labelRankStatus[auto0E80C8CA_var] == false))) {
            TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupSingle(auto0E80C8CA_var), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProbeInvisExpires_Init () {
    gt_ProbeInvisExpires = TriggerCreate("gt_ProbeInvisExpires_Func");
    TriggerAddEventUnitBehaviorChange(gt_ProbeInvisExpires, null, "Cloakprobe", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_ProbeInvisExpires, null, "CloakProbe", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Perfect Miner Cancel
//--------------------------------------------------------------------------------------------------
bool gt_PerfectMinerCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 1000000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PerfectMinerCancel_Init () {
    gt_PerfectMinerCancel = TriggerCreate("gt_PerfectMinerCancel_Func");
    TriggerAddEventUnitAbility(gt_PerfectMinerCancel, null, AbilityCommand("PerfectMiner", 7), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automated Mine Level 8 Cancel
//--------------------------------------------------------------------------------------------------
bool gt_AutomatedMineLevel8Cancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, (1000000+48576));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomatedMineLevel8Cancel_Init () {
    gt_AutomatedMineLevel8Cancel = TriggerCreate("gt_AutomatedMineLevel8Cancel_Func");
    TriggerAddEventUnitAbility(gt_AutomatedMineLevel8Cancel, null, AbilityCommand("AutomatedMineLevel8", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(gt_AutomatedMineLevel8Cancel, null, AbilityCommand("AutomatedMineLevel8", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Final Turret Cancel
//--------------------------------------------------------------------------------------------------
bool gt_FinalTurretCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, (20000000-77056));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinalTurretCancel_Init () {
    gt_FinalTurretCancel = TriggerCreate("gt_FinalTurretCancel_Func");
    TriggerAddEventUnitAbility(gt_FinalTurretCancel, null, AbilityCommand("ProtossBuild", 24), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repository Cancel
//--------------------------------------------------------------------------------------------------
bool gt_RepositoryCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, (5000000+242880));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepositoryCancel_Init () {
    gt_RepositoryCancel = TriggerCreate("gt_RepositoryCancel_Func");
    TriggerAddEventUnitAbility(gt_RepositoryCancel, null, AbilityCommand("ProtossBuild", 12), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage Turret Level 13
//--------------------------------------------------------------------------------------------------
bool gt_SalvageTurretLevel13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, 780960);
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, 1008192);
    TextTagCreate((StringExternal("Param/Value/351846A3") + StringExternal("Param/Value/77634C31")), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagCreate((StringExternal("Param/Value/EF39815A") + StringExternal("Param/Value/D6311B30")), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageTurretLevel13_Init () {
    gt_SalvageTurretLevel13 = TriggerCreate("gt_SalvageTurretLevel13_Func");
    TriggerAddEventPlayerEffectUsed(gt_SalvageTurretLevel13, c_playerAny, "SalvageTurretLevel13");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage Turret Level 14
//--------------------------------------------------------------------------------------------------
bool gt_SalvageTurretLevel14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, 20000000);
    TextTagCreate((StringExternal("Param/Value/84B4DBD2") + StringExternal("Param/Value/2D263BA7")), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageTurretLevel14_Init () {
    gt_SalvageTurretLevel14 = TriggerCreate("gt_SalvageTurretLevel14_Func");
    TriggerAddEventPlayerEffectUsed(gt_SalvageTurretLevel14, c_playerAny, "SalvageTurretLevel132");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage Final Wall
//--------------------------------------------------------------------------------------------------
bool gt_SalvageFinalWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, 504040);
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, 1524284);
    TextTagCreate((StringExternal("Param/Value/7360B097") + StringExternal("Param/Value/83D5A507")), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagCreate((StringExternal("Param/Value/340BB0FF") + StringExternal("Param/Value/4C0ACDF1")), 24, EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 1.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageFinalWall_Init () {
    gt_SalvageFinalWall = TriggerCreate("gt_SalvageFinalWall_Func");
    TriggerAddEventPlayerEffectUsed(gt_SalvageFinalWall, c_playerAny, "SalvageFinalWall");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sacrifice
//--------------------------------------------------------------------------------------------------
bool gt_Sacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6354682C_g;
    int auto6354682C_u;
    unit auto6354682C_var;
    unitgroup autoAC502996_g;
    int autoAC502996_u;
    unit autoAC502996_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCount("Wall17", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1)) {
        auto6354682C_g = UnitGroup("GeneratorLevel09", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6354682C_u = UnitGroupCount(auto6354682C_g, c_unitCountAll);
        for (;; auto6354682C_u -= 1) {
            auto6354682C_var = UnitGroupUnitFromEnd(auto6354682C_g, auto6354682C_u);
            if (auto6354682C_var == null) { break; }
            UnitRemove(auto6354682C_var);
        }
        autoAC502996_g = UnitGroup("Wall17", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        autoAC502996_u = UnitGroupCount(autoAC502996_g, c_unitCountAll);
        for (;; autoAC502996_u -= 1) {
            autoAC502996_var = UnitGroupUnitFromEnd(autoAC502996_g, autoAC502996_u);
            if (autoAC502996_var == null) { break; }
            libNtve_gf_ReplaceUnit(autoAC502996_var, "FinalWallSacrifice", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        }
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("ProtossBuild", 0), false);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("ProtossBuild", 15), false);
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("ProtossBuild", 25), false);
    }

    if ((UnitCount("Wall17", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D7ACF55C"));
    }

    if ((UnitCount("Wall17", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/156D2C57"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sacrifice_Init () {
    gt_Sacrifice = TriggerCreate("gt_Sacrifice_Func");
    TriggerAddEventUnitAbility(gt_Sacrifice, null, AbilityCommand("Sacrifice", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy 10 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Buy10Minerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2917B95D_g;
    int auto2917B95D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buy10MineralsPrice += 5;
    gv_sell10MineralsPrice += 5;
    auto2917B95D_g = PlayerGroupActive();
    auto2917B95D_var = -1;
    while (true) {
        auto2917B95D_var = PlayerGroupNextPlayer(auto2917B95D_g, auto2917B95D_var);
        if (auto2917B95D_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var) + 5)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var) - 5)));
        if ((gv_sell10MineralsPrice <= 60)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, "-200");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        }
        if ((gv_sell10MineralsPrice <= 500)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_buy10MineralsPrice * 20) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, "-4000");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_buy10MineralsPrice * 20) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto2917B95D_var, IntToString(((gv_sell10MineralsPrice * -20) + 399000)));
        }
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/F4795FC2") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/F0D6AAF0") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buy10Minerals_Init () {
    gt_Buy10Minerals = TriggerCreate("gt_Buy10Minerals_Func");
    TriggerAddEventUnitAbility(gt_Buy10Minerals, null, AbilityCommand("BuyMinerals", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy 200 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Buy200Minerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB546CA5E_g;
    int autoB546CA5E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buy10MineralsPrice += 100;
    gv_sell10MineralsPrice += 100;
    autoB546CA5E_g = PlayerGroupActive();
    autoB546CA5E_var = -1;
    while (true) {
        autoB546CA5E_var = PlayerGroupNextPlayer(autoB546CA5E_g, autoB546CA5E_var);
        if (autoB546CA5E_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var) + 100)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var) - 100)));
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoB546CA5E_var, IntToString(((gv_sell10MineralsPrice * -400) + 399000)));
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/1BCA163F") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/E6D4CF26") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buy200Minerals_Init () {
    gt_Buy200Minerals = TriggerCreate("gt_Buy200Minerals_Func");
    TriggerAddEventUnitAbility(gt_Buy200Minerals, null, AbilityCommand("BuyMineralsBulk", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy 4000 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Buy4000Minerals_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto82F1EA26_g;
    int auto82F1EA26_var;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_buy10MineralsPrice += 2000;
    gv_sell10MineralsPrice += 2000;
    auto82F1EA26_g = PlayerGroupActive();
    auto82F1EA26_var = -1;
    while (true) {
        auto82F1EA26_var = PlayerGroupNextPlayer(auto82F1EA26_g, auto82F1EA26_var);
        if (auto82F1EA26_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var) + 2000)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var) - 2000)));
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
        CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto82F1EA26_var, IntToString(((gv_sell10MineralsPrice * -400) + 399000)));
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/CEB0FDF0") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/9D8451B2") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buy4000Minerals_Init () {
    gt_Buy4000Minerals = TriggerCreate("gt_Buy4000Minerals_Func");
    TriggerAddEventUnitAbility(gt_Buy4000Minerals, null, AbilityCommand("BuyMineralsMegaBulk", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sell 10 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Sell10Minerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_decreaseBuy;
    bool lv_decreaseSell;

    // Automatic Variable Declarations
    playergroup autoC5163C75_g;
    int autoC5163C75_var;
    playergroup auto175C2DD7_g;
    int auto175C2DD7_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC5163C75_g = PlayerGroupActive();
    autoC5163C75_var = -1;
    while (true) {
        autoC5163C75_var = PlayerGroupNextPlayer(autoC5163C75_g, autoC5163C75_var);
        if (autoC5163C75_var < 0) { break; }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var) - 5) <= 20)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var, "20");
            gv_buy10MineralsPrice = 20;
        }
        else {
            lv_decreaseBuy = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var) - 5)));
        }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var) + 5) >= -10)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var, "-10");
            gv_sell10MineralsPrice = 10;
        }
        else {
            lv_decreaseSell = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC5163C75_var) + 5)));
        }
    }
    if ((lv_decreaseBuy == true)) {
        gv_buy10MineralsPrice -= 5;
    }

    if ((lv_decreaseSell == true)) {
        gv_sell10MineralsPrice -= 5;
    }

    auto175C2DD7_g = PlayerGroupActive();
    auto175C2DD7_var = -1;
    while (true) {
        auto175C2DD7_var = PlayerGroupNextPlayer(auto175C2DD7_g, auto175C2DD7_var);
        if (auto175C2DD7_var < 0) { break; }
        if ((gv_sell10MineralsPrice <= 60)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, "-200");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        }
        if ((gv_sell10MineralsPrice <= 500)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, "-4000");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto175C2DD7_var, IntToString(((gv_sell10MineralsPrice * -400) + 399000)));
        }
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/5FF8DEAF") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/323F23B9") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sell10Minerals_Init () {
    gt_Sell10Minerals = TriggerCreate("gt_Sell10Minerals_Func");
    TriggerAddEventUnitAbility(gt_Sell10Minerals, null, AbilityCommand("SellMinerals", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sell 200 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Sell200Minerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_decreaseBuy;
    bool lv_decreaseSell;

    // Automatic Variable Declarations
    playergroup auto33D282DB_g;
    int auto33D282DB_var;
    playergroup autoF5AE60C6_g;
    int autoF5AE60C6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto33D282DB_g = PlayerGroupActive();
    auto33D282DB_var = -1;
    while (true) {
        auto33D282DB_var = PlayerGroupNextPlayer(auto33D282DB_g, auto33D282DB_var);
        if (auto33D282DB_var < 0) { break; }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var) - 100) <= 20)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var, "20");
            gv_buy10MineralsPrice = 20;
        }
        else {
            lv_decreaseBuy = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var) - 100)));
        }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var) + 100) >= -10)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var, "-10");
            gv_sell10MineralsPrice = 10;
        }
        else {
            lv_decreaseSell = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto33D282DB_var) + 100)));
        }
    }
    if ((lv_decreaseBuy == true)) {
        gv_buy10MineralsPrice -= 100;
    }

    if ((lv_decreaseSell == true)) {
        gv_sell10MineralsPrice -= 100;
    }

    autoF5AE60C6_g = PlayerGroupActive();
    autoF5AE60C6_var = -1;
    while (true) {
        autoF5AE60C6_var = PlayerGroupNextPlayer(autoF5AE60C6_g, autoF5AE60C6_var);
        if (autoF5AE60C6_var < 0) { break; }
        if ((gv_sell10MineralsPrice <= 60)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, "-200");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        }
        if ((gv_sell10MineralsPrice <= 500)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, "-4000");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoF5AE60C6_var, IntToString(((gv_sell10MineralsPrice * -400) + 399000)));
        }
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/B883CD07") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/D649314F") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sell200Minerals_Init () {
    gt_Sell200Minerals = TriggerCreate("gt_Sell200Minerals_Func");
    TriggerAddEventUnitAbility(gt_Sell200Minerals, null, AbilityCommand("SellMineralsBulk", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sell 4000 Minerals
//--------------------------------------------------------------------------------------------------
bool gt_Sell4000Minerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_decreaseBuy;
    bool lv_decreaseSell;

    // Automatic Variable Declarations
    playergroup autoC688C20C_g;
    int autoC688C20C_var;
    playergroup auto90551EA9_g;
    int auto90551EA9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC688C20C_g = PlayerGroupActive();
    autoC688C20C_var = -1;
    while (true) {
        autoC688C20C_var = PlayerGroupNextPlayer(autoC688C20C_g, autoC688C20C_var);
        if (autoC688C20C_var < 0) { break; }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var) - 2000) <= 20)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var, "20");
            gv_buy10MineralsPrice = 20;
        }
        else {
            lv_decreaseBuy = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "BuyMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var) - 2000)));
        }
        if (((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var) + 2000) >= -10)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var, "-10");
            gv_sell10MineralsPrice = 10;
        }
        else {
            lv_decreaseSell = true;
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var, IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "SellMinerals", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", autoC688C20C_var) + 2000)));
        }
    }
    if ((lv_decreaseBuy == true)) {
        gv_buy10MineralsPrice -= 2000;
    }

    if ((lv_decreaseSell == true)) {
        gv_sell10MineralsPrice -= 2000;
    }

    auto90551EA9_g = PlayerGroupActive();
    auto90551EA9_var = -1;
    while (true) {
        auto90551EA9_var = PlayerGroupNextPlayer(auto90551EA9_g, auto90551EA9_var);
        if (auto90551EA9_var < 0) { break; }
        if ((gv_sell10MineralsPrice <= 60)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, "-200");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_buy10MineralsPrice * 20) + 950)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_sell10MineralsPrice * -20) + 950)));
        }
        if ((gv_sell10MineralsPrice <= 500)) {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, "-4000");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogAbil, "BuyMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_buy10MineralsPrice * 400) + 399000)));
            CatalogFieldValueSet(c_gameCatalogAbil, "SellMineralsMegaBulk", "Cost[" + IntToString(0) + "].Resource[" + IntToString(1) + "]", auto90551EA9_var, IntToString(((gv_sell10MineralsPrice * -400) + 399000)));
        }
    }
    libNtve_gf_SetDialogItemText(gv_marketPricesBuyMinerals, (StringExternal("Param/Value/5870DBE1") + IntToText(gv_buy10MineralsPrice)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_marketPricesSellMinerals, (StringExternal("Param/Value/671DC8F3") + IntToText(gv_sell10MineralsPrice)), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sell4000Minerals_Init () {
    gt_Sell4000Minerals = TriggerCreate("gt_Sell4000Minerals_Func");
    TriggerAddEventUnitAbility(gt_Sell4000Minerals, null, AbilityCommand("SellMineralsMegaBulk", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage All Order
//--------------------------------------------------------------------------------------------------
bool gt_SalvageAllOrder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto455B5991_g;
    int auto455B5991_u;
    unit auto455B5991_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(gf_PvZ2Time(5.0), c_timeGame);
    auto455B5991_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto455B5991_u = UnitGroupCount(auto455B5991_g, c_unitCountAll);
    for (;; auto455B5991_u -= 1) {
        auto455B5991_var = UnitGroupUnitFromEnd(auto455B5991_g, auto455B5991_u);
        if (auto455B5991_var == null) { break; }
        if ((UnitTypeTestFlag(UnitGetType(auto455B5991_var), c_unitFlagWorker) == false) && (UnitGetType(auto455B5991_var) != "PrisonZealot")) {
            UnitIssueOrder(auto455B5991_var, Order(AbilityCommand("SalvageShared", 0)), c_orderQueueReplace);
            UnitIssueOrder(auto455B5991_var, Order(AbilityCommand("SalvageGenerator", 0)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageAllOrder_Init () {
    gt_SalvageAllOrder = TriggerCreate("gt_SalvageAllOrder_Func");
    TriggerAddEventUnitAbility(gt_SalvageAllOrder, null, AbilityCommand("SalvageAll", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Flag Region
//--------------------------------------------------------------------------------------------------
bool gt_PlaceFlagRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == 1)) {
        RegionSetCenter(RegionFromId(174), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 2)) {
        RegionSetCenter(RegionFromId(175), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 3)) {
        RegionSetCenter(RegionFromId(176), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 4)) {
        RegionSetCenter(RegionFromId(177), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 5)) {
        RegionSetCenter(RegionFromId(178), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 6)) {
        RegionSetCenter(RegionFromId(179), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 7)) {
        RegionSetCenter(RegionFromId(180), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 8)) {
        RegionSetCenter(RegionFromId(181), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 9)) {
        RegionSetCenter(RegionFromId(182), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 10)) {
        RegionSetCenter(RegionFromId(183), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 11)) {
        RegionSetCenter(RegionFromId(184), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 12)) {
        RegionSetCenter(RegionFromId(185), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 13)) {
        RegionSetCenter(RegionFromId(186), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 14)) {
        RegionSetCenter(RegionFromId(187), EventUnitTargetPoint());
    }

    if ((EventPlayer() == 15)) {
        RegionSetCenter(RegionFromId(188), EventUnitTargetPoint());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceFlagRegion_Init () {
    gt_PlaceFlagRegion = TriggerCreate("gt_PlaceFlagRegion_Func");
    TriggerAddEventUnitAbility(gt_PlaceFlagRegion, null, AbilityCommand("ProtossBuild", 29), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Shop - Enable
//--------------------------------------------------------------------------------------------------
bool gt_SelectShopEnable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PrisonZealot") || (UnitGetType(EventUnit()) == "Predator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("SelectShopAbility", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectShopEnable_Init () {
    gt_SelectShopEnable = TriggerCreate("gt_SelectShopEnable_Func");
    TriggerAddEventUnitRegion(gt_SelectShopEnable, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Shop - Disable
//--------------------------------------------------------------------------------------------------
bool gt_SelectShopDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PrisonZealot") || (UnitGetType(EventUnit()) == "Predator")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeAbilityAllow(UnitGetOwner(EventUnit()), AbilityCommand("SelectShopAbility", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectShopDisable_Init () {
    gt_SelectShopDisable = TriggerCreate("gt_SelectShopDisable_Func");
    TriggerAddEventUnitRegion(gt_SelectShopDisable, null, RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Shop - Used
//--------------------------------------------------------------------------------------------------
bool gt_SelectShopUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(gv_zealots[EventPlayer()], EventPlayer(), false);
    UnitSelect(gv_zShop, EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectShopUsed_Init () {
    gt_SelectShopUsed = TriggerCreate("gt_SelectShopUsed_Func");
    TriggerAddEventUnitAbility(gt_SelectShopUsed, null, AbilityCommand("SelectShopAbility", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Uses Invis
//--------------------------------------------------------------------------------------------------
bool gt_ZealotUsesInvis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6D57B3C9_g;
    int auto6D57B3C9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D57B3C9_g = PlayerGroupActive();
    auto6D57B3C9_var = -1;
    while (true) {
        auto6D57B3C9_var = PlayerGroupNextPlayer(auto6D57B3C9_g, auto6D57B3C9_var);
        if (auto6D57B3C9_var < 0) { break; }
        TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupSingle(auto6D57B3C9_var), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotUsesInvis_Init () {
    gt_ZealotUsesInvis = TriggerCreate("gt_ZealotUsesInvis_Func");
    TriggerAddEventUnitBehaviorChange(gt_ZealotUsesInvis, null, "Cloak", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_ZealotUsesInvis, null, "StealthyStrikes", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Invis Expires
//--------------------------------------------------------------------------------------------------
bool gt_ZealotInvisExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7800BA71_g;
    int auto7800BA71_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7800BA71_g = PlayerGroupActive();
    auto7800BA71_var = -1;
    while (true) {
        auto7800BA71_var = PlayerGroupNextPlayer(auto7800BA71_g, auto7800BA71_var);
        if (auto7800BA71_var < 0) { break; }
        if (((gv_labelRankStatus[auto7800BA71_var] == false))) {
            TextTagShow(gv_playersLabelRanks[EventPlayer()], PlayerGroupSingle(auto7800BA71_var), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotInvisExpires_Init () {
    gt_ZealotInvisExpires = TriggerCreate("gt_ZealotInvisExpires_Func");
    TriggerAddEventUnitBehaviorChange(gt_ZealotInvisExpires, null, "Cloak", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_ZealotInvisExpires, null, "StealthyStrikes", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zealot Uses Teleport Ability
//--------------------------------------------------------------------------------------------------
bool gt_ZealotUsesTeleportAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoDE08E883_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE08E883_val = RandomInt(1, 8);
    if (autoDE08E883_val == 1) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 3.0, 0.0), false);
    }
    else if (autoDE08E883_val == 2) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, -3.0, 0.0), false);
    }
    else if (autoDE08E883_val == 3) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 0.0, 3.0), false);
    }
    else if (autoDE08E883_val == 4) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 0.0, -3.0), false);
    }
    else if (autoDE08E883_val == 5) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, -3.0, 3.0), false);
    }
    else if (autoDE08E883_val == 6) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, -3.0, -3.0), false);
    }
    else if (autoDE08E883_val == 7) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 3.0, 3.0), false);
    }
    else if (autoDE08E883_val == 8) {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 3.0, -3.0), false);
    }
    else {
        UnitSetPosition(gv_zealots[EventPlayer()], PointWithOffset(gv_centerPoint, 3.0, 0.0), false);
    }
    CameraPan(EventPlayer(), gv_centerPoint, 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZealotUsesTeleportAbility_Init () {
    gt_ZealotUsesTeleportAbility = TriggerCreate("gt_ZealotUsesTeleportAbility_Func");
    TriggerAddEventUnitAbility(gt_ZealotUsesTeleportAbility, null, AbilityCommand("TeleporttoBase", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: suggesteditems
//--------------------------------------------------------------------------------------------------
bool gt_suggesteditems_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_popupswitch2 == 0))) {
            return false;
        }

        if (!((libNtve_gf_UnitTypeIsSelected("Factory", EventPlayer()) == true))) {
            return false;
        }

        if (!((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested) == true))) {
            return false;
        }

        if (!(((UnitCount("PrisonZealot", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_suggesteddialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_suggesteditems_Init () {
    gt_suggesteditems = TriggerCreate("gt_suggesteditems_Func");
    TriggerAddEventUnitSelected(gt_suggesteditems, UnitRefFromVariable("gv_zShop"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: suggesteditems 2
//--------------------------------------------------------------------------------------------------
bool gt_suggesteditems2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitTypeIsSelected("Factory", EventPlayer()) == false))) {
            return false;
        }

        if (!((BankValueGetAsFlag(gv_gameplayOptionsBanks[EventPlayer()], gv_gameplayOptionsBanksOptionsSection, gv_gameplayOptionsBanksOptionsKeys.lv_saveZealotSuggested) == true))) {
            return false;
        }

        if (!(((UnitCount("PrisonZealot", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_suggesteddialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_suggesteditems2_Init () {
    gt_suggesteditems2 = TriggerCreate("gt_suggesteditems2_Func");
    TriggerAddEventUnitSelected(gt_suggesteditems2, UnitRefFromVariable("gv_zShop"), c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Sell Item
//--------------------------------------------------------------------------------------------------
bool gt_UnitSellItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostVespene) != 0)) {
        TextTagCreate((StringExternal("Param/Value/F56BE284") + (FixedToText((1.0 * IntToFixed(UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostVespene))), c_fixedPrecisionAny) + StringExternal("Param/Value/48B8624F"))), 24, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostVespene));
    }

    if ((UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals) != 0)) {
        TextTagCreate((StringExternal("Param/Value/7828D0B6") + (FixedToText((1.0 * IntToFixed(UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals))), c_fixedPrecisionAny) + StringExternal("Param/Value/43B293A1"))), 24, UnitGetPosition(EventUnit()), 0.0, true, false, PlayerGroupSingle(EventPlayer()));
        TextTagSetVelocity(TextTagLastCreated(), 2.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, UnitTypeGetCost(UnitGetType(EventUnitInventoryItem()), c_unitCostMinerals));
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSellItem_Init () {
    gt_UnitSellItem = TriggerCreate("gt_UnitSellItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnitSellItem, null, c_unitInventoryChangeSells, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy
//--------------------------------------------------------------------------------------------------
bool gt_Buy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Buy_Init () {
    gt_Buy = TriggerCreate("gt_Buy_Func");
    TriggerAddEventUnitInventoryChange(gt_Buy, null, c_unitInventoryChangeBuys, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunter Inventory
//--------------------------------------------------------------------------------------------------
bool gt_HunterInventory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitInventoryItemTargetUnit())) && (gv_hunterStatus[UnitGetOwner(EventUnit())] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), StringExternal("Param/Value/3B7FBAF4"), SoundLink("zMission_Hybrid02_TaldarimZealot_033", -1));
    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/F56612C1"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HunterInventory_Init () {
    gt_HunterInventory = TriggerCreate("gt_HunterInventory_Func");
    TriggerAddEventUnitInventoryChange(gt_HunterInventory, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sell Hotkey
//--------------------------------------------------------------------------------------------------
bool gt_SellHotkey_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitgas;
    int lv_unitminerals;
    fixed lv_unitLifeAfterBuff;
    int lv_hPBonusfromallItems;

    // Automatic Variable Declarations
    unitgroup auto235285BC_g;
    int auto235285BC_u;
    unit auto235285BC_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto235285BC_g = UnitInventoryGroup(gv_zealots[EventPlayer()]);
    auto235285BC_u = UnitGroupCount(auto235285BC_g, c_unitCountAll);
    for (;; auto235285BC_u -= 1) {
        auto235285BC_var = UnitGroupUnitFromEnd(auto235285BC_g, auto235285BC_u);
        if (auto235285BC_var == null) { break; }
        if ((UnitGetType(auto235285BC_var) != "Predator") && (UnitGetType(auto235285BC_var) != "PrisonZealot") && (DistanceBetweenPoints(gv_centerPoint, UnitGetPosition(UnitInventoryUnit(auto235285BC_var))) <= 7.0)) {
            lv_unitgas = UnitTypeGetCost(UnitGetType(auto235285BC_var), c_unitCostVespene);
            lv_unitminerals = UnitTypeGetCost(UnitGetType(auto235285BC_var), c_unitCostMinerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, lv_unitminerals);
            PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, lv_unitgas);
            if ((lv_unitminerals > 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/0030D476") + (IntToText(lv_unitminerals) + StringExternal("Param/Value/87CCCECE"))));
            }

            if ((lv_unitgas > 0)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/2F573CC7") + (IntToText(lv_unitgas) + StringExternal("Param/Value/670414C0"))));
            }

            UnitRemove(auto235285BC_var);
            if (((UnitGetType(auto235285BC_var) == "CloakofImmunity") || (UnitBehaviorEnabled(auto235285BC_var, ("CloakofImmunity")) == true))) {
                CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), "10");
            }

            if ((UnitGetPropertyFixed(auto235285BC_var, c_unitPropLifeArmor, c_unitPropCurrent) != 0.0)) {
                if ((UnitGetType(EventUnit()) == "PrisonZealot")) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 500.0);
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 500.0);
                }
                else {
                    if ((UnitGetType(EventUnit()) == "Predator") && (gv_gameTimeMinutes > 20)) {
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 32000.0);
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 32000.0);
                    }
                    else {
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 350.0);
                        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 350.0);
                    }
                }
            }

        }

    }
    UnitIssueOrder(gv_zealots[EventPlayer()], Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SellHotkey_Init () {
    gt_SellHotkey = TriggerCreate("gt_SellHotkey_Func");
    TriggerAddEventUnitAbility(gt_SellHotkey, null, AbilityCommand("SellAllItems", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 1
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto40B0439C_g;
    int auto40B0439C_var;
    playergroup auto23F02A72_g;
    int auto23F02A72_var;
    playergroup autoFBB9356C_g;
    int autoFBB9356C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 100);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/14BBF054"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 800);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/B7DE5B20"));
            autoFBB9356C_g = gv_playerGroupZealots;
            autoFBB9356C_var = -1;
            while (true) {
                autoFBB9356C_var = PlayerGroupNextPlayer(autoFBB9356C_g, autoFBB9356C_var);
                if (autoFBB9356C_var < 0) { break; }
                if ((UnitCount("PrisonZealot", autoFBB9356C_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(autoFBB9356C_var, c_playerPropMinerals, c_playerPropOperAdd, 700);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/16959449"));
                auto40B0439C_g = gv_playerGroupZealots;
                auto40B0439C_var = -1;
                while (true) {
                    auto40B0439C_var = PlayerGroupNextPlayer(auto40B0439C_g, auto40B0439C_var);
                    if (auto40B0439C_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto40B0439C_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto40B0439C_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/C0BEE0FB"));
                auto23F02A72_g = gv_playerGroupZealots;
                auto23F02A72_var = -1;
                while (true) {
                    auto23F02A72_var = PlayerGroupNextPlayer(auto23F02A72_g, auto23F02A72_var);
                    if (auto23F02A72_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto23F02A72_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto23F02A72_var, c_playerPropMinerals, c_playerPropOperAdd, 12700);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel1_Init () {
    gt_MineralPalletLevel1 = TriggerCreate("gt_MineralPalletLevel1_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel1, c_playerAny, "PickupMineralsLevel1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 2
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto2660EECA_g;
    int auto2660EECA_var;
    playergroup auto0D1FD198_g;
    int auto0D1FD198_var;
    playergroup auto994E45AA_g;
    int auto994E45AA_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 150);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/9486D868"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 1600);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/76A87C82"));
            auto994E45AA_g = gv_playerGroupZealots;
            auto994E45AA_var = -1;
            while (true) {
                auto994E45AA_var = PlayerGroupNextPlayer(auto994E45AA_g, auto994E45AA_var);
                if (auto994E45AA_var < 0) { break; }
                if ((UnitCount("PrisonZealot", auto994E45AA_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(auto994E45AA_var, c_playerPropMinerals, c_playerPropOperAdd, 1450);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/AFCD5F6E"));
                auto0D1FD198_g = gv_playerGroupZealots;
                auto0D1FD198_var = -1;
                while (true) {
                    auto0D1FD198_var = PlayerGroupNextPlayer(auto0D1FD198_g, auto0D1FD198_var);
                    if (auto0D1FD198_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto0D1FD198_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto0D1FD198_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/50C20377"));
                auto2660EECA_g = gv_playerGroupZealots;
                auto2660EECA_var = -1;
                while (true) {
                    auto2660EECA_var = PlayerGroupNextPlayer(auto2660EECA_g, auto2660EECA_var);
                    if (auto2660EECA_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto2660EECA_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto2660EECA_var, c_playerPropMinerals, c_playerPropOperAdd, 12650);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel2_Init () {
    gt_MineralPalletLevel2 = TriggerCreate("gt_MineralPalletLevel2_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel2, c_playerAny, "PickupMineralsLevel2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 3
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto3668FD6B_g;
    int auto3668FD6B_var;
    playergroup auto873278FD_g;
    int auto873278FD_var;
    playergroup autoB1B0332D_g;
    int autoB1B0332D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 175);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/B5ADEFED"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 2400);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/FC966B59"));
            autoB1B0332D_g = gv_playerGroupZealots;
            autoB1B0332D_var = -1;
            while (true) {
                autoB1B0332D_var = PlayerGroupNextPlayer(autoB1B0332D_g, autoB1B0332D_var);
                if (autoB1B0332D_var < 0) { break; }
                if ((UnitCount("PrisonZealot", autoB1B0332D_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(autoB1B0332D_var, c_playerPropMinerals, c_playerPropOperAdd, 2225);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/67DE4807"));
                auto873278FD_g = gv_playerGroupZealots;
                auto873278FD_var = -1;
                while (true) {
                    auto873278FD_var = PlayerGroupNextPlayer(auto873278FD_g, auto873278FD_var);
                    if (auto873278FD_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto873278FD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto873278FD_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/6D362550"));
                auto3668FD6B_g = gv_playerGroupZealots;
                auto3668FD6B_var = -1;
                while (true) {
                    auto3668FD6B_var = PlayerGroupNextPlayer(auto3668FD6B_g, auto3668FD6B_var);
                    if (auto3668FD6B_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto3668FD6B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto3668FD6B_var, c_playerPropMinerals, c_playerPropOperAdd, 12625);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel3_Init () {
    gt_MineralPalletLevel3 = TriggerCreate("gt_MineralPalletLevel3_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel3, c_playerAny, "PickupMineralsLevel22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 4
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto161FCE25_g;
    int auto161FCE25_var;
    playergroup auto081302D5_g;
    int auto081302D5_var;
    playergroup autoFB2B1584_g;
    int autoFB2B1584_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 200);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/D834D44A"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 3200);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/2997B075"));
            autoFB2B1584_g = gv_playerGroupZealots;
            autoFB2B1584_var = -1;
            while (true) {
                autoFB2B1584_var = PlayerGroupNextPlayer(autoFB2B1584_g, autoFB2B1584_var);
                if (autoFB2B1584_var < 0) { break; }
                if ((UnitCount("PrisonZealot", autoFB2B1584_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(autoFB2B1584_var, c_playerPropMinerals, c_playerPropOperAdd, 3000);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/2EF02B5E"));
                auto081302D5_g = gv_playerGroupZealots;
                auto081302D5_var = -1;
                while (true) {
                    auto081302D5_var = PlayerGroupNextPlayer(auto081302D5_g, auto081302D5_var);
                    if (auto081302D5_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto081302D5_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto081302D5_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/9C94452A"));
                auto161FCE25_g = gv_playerGroupZealots;
                auto161FCE25_var = -1;
                while (true) {
                    auto161FCE25_var = PlayerGroupNextPlayer(auto161FCE25_g, auto161FCE25_var);
                    if (auto161FCE25_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto161FCE25_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto161FCE25_var, c_playerPropMinerals, c_playerPropOperAdd, 12600);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel4_Init () {
    gt_MineralPalletLevel4 = TriggerCreate("gt_MineralPalletLevel4_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel4, c_playerAny, "PickupMineralsLevel222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 5
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup autoFB82F734_g;
    int autoFB82F734_var;
    playergroup auto80249333_g;
    int auto80249333_var;
    playergroup autoF7CCF5BF_g;
    int autoF7CCF5BF_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 400);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/240FD755"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 4800);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/81C7FF5E"));
            autoF7CCF5BF_g = gv_playerGroupZealots;
            autoF7CCF5BF_var = -1;
            while (true) {
                autoF7CCF5BF_var = PlayerGroupNextPlayer(autoF7CCF5BF_g, autoF7CCF5BF_var);
                if (autoF7CCF5BF_var < 0) { break; }
                if ((UnitCount("PrisonZealot", autoF7CCF5BF_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(autoF7CCF5BF_var, c_playerPropMinerals, c_playerPropOperAdd, 4400);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/ABE21BFE"));
                auto80249333_g = gv_playerGroupZealots;
                auto80249333_var = -1;
                while (true) {
                    auto80249333_var = PlayerGroupNextPlayer(auto80249333_g, auto80249333_var);
                    if (auto80249333_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto80249333_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto80249333_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/33A2DD6C"));
                autoFB82F734_g = gv_playerGroupZealots;
                autoFB82F734_var = -1;
                while (true) {
                    autoFB82F734_var = PlayerGroupNextPlayer(autoFB82F734_g, autoFB82F734_var);
                    if (autoFB82F734_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", autoFB82F734_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(autoFB82F734_var, c_playerPropMinerals, c_playerPropOperAdd, 12400);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel5_Init () {
    gt_MineralPalletLevel5 = TriggerCreate("gt_MineralPalletLevel5_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel5, c_playerAny, "PickupMineralsLevel2222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 6
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup autoB000F28E_g;
    int autoB000F28E_var;
    playergroup autoD830107A_g;
    int autoD830107A_var;
    playergroup auto5E451F97_g;
    int auto5E451F97_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 800);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/CF00BB4D"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 5600);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/DC64EC78"));
            auto5E451F97_g = gv_playerGroupZealots;
            auto5E451F97_var = -1;
            while (true) {
                auto5E451F97_var = PlayerGroupNextPlayer(auto5E451F97_g, auto5E451F97_var);
                if (auto5E451F97_var < 0) { break; }
                if ((UnitCount("PrisonZealot", auto5E451F97_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(auto5E451F97_var, c_playerPropMinerals, c_playerPropOperAdd, 4800);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/248584ED"));
                autoD830107A_g = gv_playerGroupZealots;
                autoD830107A_var = -1;
                while (true) {
                    autoD830107A_var = PlayerGroupNextPlayer(autoD830107A_g, autoD830107A_var);
                    if (autoD830107A_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", autoD830107A_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(autoD830107A_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/80DB7CC8"));
                autoB000F28E_g = gv_playerGroupZealots;
                autoB000F28E_var = -1;
                while (true) {
                    autoB000F28E_var = PlayerGroupNextPlayer(autoB000F28E_g, autoB000F28E_var);
                    if (autoB000F28E_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", autoB000F28E_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(autoB000F28E_var, c_playerPropMinerals, c_playerPropOperAdd, 12000);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel6_Init () {
    gt_MineralPalletLevel6 = TriggerCreate("gt_MineralPalletLevel6_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel6, c_playerAny, "PickupMineralsLevel22222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 7
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto774DE281_g;
    int auto774DE281_var;
    playergroup auto9320863B_g;
    int auto9320863B_var;
    playergroup auto9F324350_g;
    int auto9F324350_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 1600);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/74830E71"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 7800);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/1A75AD3C"));
            auto9F324350_g = gv_playerGroupZealots;
            auto9F324350_var = -1;
            while (true) {
                auto9F324350_var = PlayerGroupNextPlayer(auto9F324350_g, auto9F324350_var);
                if (auto9F324350_var < 0) { break; }
                if ((UnitCount("PrisonZealot", auto9F324350_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(auto9F324350_var, c_playerPropMinerals, c_playerPropOperAdd, 6200);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/68249AE4"));
                auto9320863B_g = gv_playerGroupZealots;
                auto9320863B_var = -1;
                while (true) {
                    auto9320863B_var = PlayerGroupNextPlayer(auto9320863B_g, auto9320863B_var);
                    if (auto9320863B_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto9320863B_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto9320863B_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/89E7BDCC"));
                auto774DE281_g = gv_playerGroupZealots;
                auto774DE281_var = -1;
                while (true) {
                    auto774DE281_var = PlayerGroupNextPlayer(auto774DE281_g, auto774DE281_var);
                    if (auto774DE281_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto774DE281_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto774DE281_var, c_playerPropMinerals, c_playerPropOperAdd, 11200);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel7_Init () {
    gt_MineralPalletLevel7 = TriggerCreate("gt_MineralPalletLevel7_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel7, c_playerAny, "PickupMineralsLevel222222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 8
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto928247A1_g;
    int auto928247A1_var;
    playergroup auto4340F7B7_g;
    int auto4340F7B7_var;
    playergroup auto603DE2F9_g;
    int auto603DE2F9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 10)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 3200);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/1EA7EBED"));
    }
    else {
        if (((gv_gameTimeMinutes >= 10) && (gv_gameTimeMinutes <= 14))) {
            gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 10000);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/5EED1E3D"));
            auto603DE2F9_g = gv_playerGroupZealots;
            auto603DE2F9_var = -1;
            while (true) {
                auto603DE2F9_var = PlayerGroupNextPlayer(auto603DE2F9_g, auto603DE2F9_var);
                if (auto603DE2F9_var < 0) { break; }
                if ((UnitCount("PrisonZealot", auto603DE2F9_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                    PlayerModifyPropertyInt(auto603DE2F9_var, c_playerPropMinerals, c_playerPropOperAdd, 6800);
                }

            }
        }
        else {
            if ((gv_gameTimeMinutes >= 30)) {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/FE8CE0F9"));
                auto4340F7B7_g = gv_playerGroupZealots;
                auto4340F7B7_var = -1;
                while (true) {
                    auto4340F7B7_var = PlayerGroupNextPlayer(auto4340F7B7_g, auto4340F7B7_var);
                    if (auto4340F7B7_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto4340F7B7_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto4340F7B7_var, c_playerPropMinerals, c_playerPropOperAdd, 64000);
                    }

                }
            }
            else {
                gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/1741CBDB"));
                auto928247A1_g = gv_playerGroupZealots;
                auto928247A1_var = -1;
                while (true) {
                    auto928247A1_var = PlayerGroupNextPlayer(auto928247A1_g, auto928247A1_var);
                    if (auto928247A1_var < 0) { break; }
                    if ((UnitCount("PrisonZealot", auto928247A1_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                        PlayerModifyPropertyInt(auto928247A1_var, c_playerPropMinerals, c_playerPropOperAdd, 9600);
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel8_Init () {
    gt_MineralPalletLevel8 = TriggerCreate("gt_MineralPalletLevel8_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel8, c_playerAny, "PickupMineralsLevel2222222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Pallet Level 9
//--------------------------------------------------------------------------------------------------
bool gt_MineralPalletLevel9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_probePlayer;

    // Automatic Variable Declarations
    playergroup auto8B433792_g;
    int auto8B433792_var;
    playergroup autoAA659F44_g;
    int autoAA659F44_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameTimeMinutes < 30)) {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 12800);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/2DD8277C"));
        autoAA659F44_g = gv_playerGroupZealots;
        autoAA659F44_var = -1;
        while (true) {
            autoAA659F44_var = PlayerGroupNextPlayer(autoAA659F44_g, autoAA659F44_var);
            if (autoAA659F44_var < 0) { break; }
            if ((UnitCount("PrisonZealot", autoAA659F44_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                PlayerModifyPropertyInt(autoAA659F44_var, c_playerPropMinerals, c_playerPropOperAdd, 3200);
            }

        }
    }
    else {
        gf_UpdateMineralPalletFeed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), 64000);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/800CCA1D"));
        auto8B433792_g = gv_playerGroupZealots;
        auto8B433792_var = -1;
        while (true) {
            auto8B433792_var = PlayerGroupNextPlayer(auto8B433792_g, auto8B433792_var);
            if (auto8B433792_var < 0) { break; }
            if ((UnitCount("PrisonZealot", auto8B433792_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1)) {
                PlayerModifyPropertyInt(auto8B433792_var, c_playerPropMinerals, c_playerPropOperAdd, 54400);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralPalletLevel9_Init () {
    gt_MineralPalletLevel9 = TriggerCreate("gt_MineralPalletLevel9_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralPalletLevel9, c_playerAny, "PickupMineralsLevel22222222");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemy Units Gains Item
//--------------------------------------------------------------------------------------------------
bool gt_EnemyUnitsGainsItem_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitInventoryItem()) != 0) && (UnitGetOwner(EventUnitInventoryItem()) != EventPlayer()) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitInventoryItem()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryRemove(EventUnitInventoryItem());
    if ((PlayerGroupHasPlayer(gv_playerGroupZealots, UnitGetOwner(EventUnitInventoryItem())) == true)) {
        UnitInventoryCreate(gv_zealots[UnitGetOwner(EventUnitInventoryItem())], UnitGetType(EventUnitInventoryItem()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnemyUnitsGainsItem_Init () {
    gt_EnemyUnitsGainsItem = TriggerCreate("gt_EnemyUnitsGainsItem_Func");
    TriggerEnable(gt_EnemyUnitsGainsItem, false);
    TriggerAddEventUnitInventoryChange(gt_EnemyUnitsGainsItem, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magic Immune is Applied
//--------------------------------------------------------------------------------------------------
bool gt_MagicImmuneisApplied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorEffectPlayer(EventUnit(), "MagicImmune", c_effectPlayerCaster, 0) != EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "MagicImmune", 1);
    UnitBehaviorAddPlayer(EventUnit(), "MagicImmune", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MagicImmuneisApplied_Init () {
    gt_MagicImmuneisApplied = TriggerCreate("gt_MagicImmuneisApplied_Func");
    TriggerAddEventUnitBehaviorChange(gt_MagicImmuneisApplied, null, "MagicImmune", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Gains Boots of Speed Item
//--------------------------------------------------------------------------------------------------
bool gt_UnitGainsBootsofSpeedItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_magicImmuneDuration;
    bool lv_hasBoots;

    // Automatic Variable Declarations
    const int autoF7874DB5_ae = 14;
    int autoF7874DB5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropAcceleration, c_unitPropCurrent) == 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7874DB5_var = 1;
    for ( ; autoF7874DB5_var <= autoF7874DB5_ae; autoF7874DB5_var += 1 ) {
        if ((UnitBehaviorEnabled(EventUnit(), (("BootsofSpeedLevel" + IntToString(autoF7874DB5_var)))) == true)) {
            lv_hasBoots = true;
            CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), FixedToString((15.0 + ((autoF7874DB5_var - 1.0) * 0.5)), 1));
        }

    }
    lv_magicImmuneDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer()));
    if ((UnitBehaviorEnabled(EventUnit(), ("CloakofImmunity")) == true)) {
        if ((lv_hasBoots == false)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), "15");
        }
        else {
            CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), FixedToString((15.0 + lv_magicImmuneDuration), 1));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitGainsBootsofSpeedItem_Init () {
    gt_UnitGainsBootsofSpeedItem = TriggerCreate("gt_UnitGainsBootsofSpeedItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnitGainsBootsofSpeedItem, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Losses Boots of Speed Item
//--------------------------------------------------------------------------------------------------
bool gt_UnitLossesBootsofSpeedItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_hasBoots;
    fixed lv_magicImmuneDuration;

    // Automatic Variable Declarations
    const int auto52B5B24F_ae = 14;
    int auto52B5B24F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropAcceleration, c_unitPropCurrent) == 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto52B5B24F_var = 1;
    for ( ; auto52B5B24F_var <= auto52B5B24F_ae; auto52B5B24F_var += 1 ) {
        if ((UnitBehaviorEnabled(EventUnit(), (("BootsofSpeedLevel" + IntToString(auto52B5B24F_var)))) == true)) {
            lv_hasBoots = true;
            CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), FixedToString((10.0 + ((auto52B5B24F_var - 1.0) * 0.5)), 1));
        }

    }
    if ((lv_hasBoots == false)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), "10");
    }

    lv_magicImmuneDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer()));
    if ((UnitBehaviorEnabled(EventUnit(), ("CloakofImmunity")) == true)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "MagicImmune", "Duration", EventPlayer(), FixedToString((15.0 + lv_magicImmuneDuration), 1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLossesBootsofSpeedItem_Init () {
    gt_UnitLossesBootsofSpeedItem = TriggerCreate("gt_UnitLossesBootsofSpeedItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnitLossesBootsofSpeedItem, null, c_unitInventoryChangeLoses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Gains HP Item
//--------------------------------------------------------------------------------------------------
bool gt_UnitGainsHPItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitLifeAfterBuff;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent) != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent)) >= 471000.0) || ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent)) <= 0.0))) {
        lv_unitLifeAfterBuff = (0.0 + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) * 4710.0));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 471000.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, lv_unitLifeAfterBuff);
    }
    else {
        lv_unitLifeAfterBuff = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) * (UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent) / 100.0)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, lv_unitLifeAfterBuff);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitGainsHPItem_Init () {
    gt_UnitGainsHPItem = TriggerCreate("gt_UnitGainsHPItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnitGainsHPItem, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Losses HP Item
//--------------------------------------------------------------------------------------------------
bool gt_UnitLossesHPItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_triggeringinventoryitemstartvalue;
    fixed lv_unitLifeAfterBuff;
    int lv_hPBonusfromallItems;
    int lv_maxcarrieditems;
    int lv_itemCounter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent) != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringinventoryitemstartvalue = UnitGetPropertyFixed(EventUnit(), c_unitPropLifeArmor, c_unitPropCurrent);
    if (((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) - 0.0) >= 471000.0)) {
        lv_itemCounter = 1;
        while ((lv_itemCounter <= UnitInventoryCount(EventUnit(), c_unitInventoryCountCarried))) {
            lv_hPBonusfromallItems += FixedToInt(UnitGetPropertyFixed(UnitInventoryItem(EventUnit(), lv_itemCounter), c_unitPropLifeArmor, c_unitPropCurrent));
            lv_itemCounter = (lv_itemCounter + 1);
        }
        if ((lv_hPBonusfromallItems >= 471000)) {
            lv_unitLifeAfterBuff = (0.0 + (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) * 4710.0));
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, 471000.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, lv_unitLifeAfterBuff);
        }
        else {
            lv_unitLifeAfterBuff = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) * ((470500 - lv_hPBonusfromallItems) / 100.0)));
            UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (lv_hPBonusfromallItems + 500.0));
            UnitSetPropertyFixed(EventUnit(), c_unitPropLife, lv_unitLifeAfterBuff);
        }
    }
    else {
        lv_unitLifeAfterBuff = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) * (UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent) / 100.0)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(EventUnitInventoryItem(), c_unitPropLifeArmor, c_unitPropCurrent)));
        UnitSetPropertyFixed(EventUnit(), c_unitPropLife, lv_unitLifeAfterBuff);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitLossesHPItem_Init () {
    gt_UnitLossesHPItem = TriggerCreate("gt_UnitLossesHPItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnitLossesHPItem, null, c_unitInventoryChangeLoses, null);
}

// Ludi Cancel

bool gt_LudiCancel_Func (bool testConds, bool runActions) {
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropVespene, c_playerPropOperAdd, 10000000);
    return true;
}

void gt_LudiCancel_Init () {
    gt_LudiCancel = TriggerCreate("gt_LudiCancel_Func");
    TriggerAddEventUnitAbility(gt_LudiCancel, null, AbilityCommand("LudicrousMiner", 9), c_unitAbilStageCancel, false);
}

// Is PvZAS

bool gf_IsWBGA (int lp_player){
    // Soul
    if(PlayerHandle(lp_player) == "2-S2-1-4133780"){
        return true;
    }
    // Imolter
    else if(PlayerHandle(lp_player) == "2-S2-1-7631839"){
        return true;
    }
    // Ifidel
    else if(PlayerHandle(lp_player) == "2-S2-1-6555519"){
        return true;
    }
    // Ramsus
    else if(PlayerHandle(lp_player) == "2-S2-1-2117973"){
        return true;
    }
    // Leon
    else if(PlayerHandle(lp_player) == "2-S2-1-3554499"){
        return true;
    }
    // TrickyHunter
    else if(PlayerHandle(lp_player) == "2-S2-1-6087423"){
        return true;
    }
    // Trend
    else if(PlayerHandle(lp_player) == "2-S2-1-2842715"){
        return true;
    }
    // Bone
    else if(PlayerHandle(lp_player) == "2-S2-1-2588129"){
        return true;
    }
    // Nwo
    else if(PlayerHandle(lp_player) == "2-S2-1-5365568"){
        return true;
    }
    // Paul
    else if(PlayerHandle(lp_player) == "2-S2-1-7988971"){
        return true;
    }
    // Intensiv
    else if(PlayerHandle(lp_player) == "2-S2-1-8485834"){
        return true;
    }
    // Bishop
    else if(PlayerHandle(lp_player) == "2-S2-1-5534684"){
        return true;
    }
    // Katakuri
    else if(PlayerHandle(lp_player) == "2-S2-1-4509618"){
        return true;
    }
    // Gombi
    else if(PlayerHandle(lp_player) == "2-S2-1-5567797"){
        return true;
    }
    //Deemon
    else if(PlayerHandle(lp_player) == "2-S2-1-3607597"){
        return true;
    }
    // Synka
    else if(PlayerHandle(lp_player) == "2-S2-1-385377"){
        return true;
    }
    else{
        return false;
    }
}

bool gf_IsPvZAS (int lp_player){
    // Final
    string lv_handle = PlayerHandle(lp_player);
    if(lv_handle == "2-S2-1-7701740" || lv_handle == "1-S2-1-8713784"){
        return true;
    }
    // Namd
    else if(lv_handle == "1-S2-1-1093186" || lv_handle == "2-S2-1-7684927"){
        return true;
    }
    //Heldrik
    else if(lv_handle == "2-S2-1-7503460" || lv_handle == "1-S2-1-10804665"){
        return true;
    }
    // Shazle
    else if(lv_handle == "1-S2-1-9685704" || lv_handle == "2-S2-1-7619978"){
        return true;
    }
    // Zampa
    else if(lv_handle == "2-S2-1-2865572"){
        return true;
    }
    // Degrado
    else if(lv_handle == "1-S2-1-5403594" || lv_handle == "2-S2-1-7308525"){
        return true;
    }
    // Miku
    else if(lv_handle == "2-S2-1-7440361" || lv_handle == "1-S2-1-9644197"){
        return true;
    }
    // Aukma
    else if(lv_handle == "2-S2-1-4433140" || lv_handle == "1-S2-1-5790671"){
        return true;
    }
    return false;
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_MapInitialization_Init();
    gt_InitGame_Init();
    gt_StartGame_Init();
    gt_InitCameras_Init();
    gt_InitCamerasFirstStartup_Init();
    gt_InitTips_Init();
    gt_StartRecording_Init();
    gt_SpawnZealotExpires_Init();
    gt_DisableEarlyVision_Init();
    gt_ChooseMapInit_Init();
    gt_VoteTimerMapExpires_Init();
    gt_ChooseTimescale_Init();
    gt_VoteTimerTimescaleExpires_Init();
    gt_ChooseSideInit_Init();
    gt_VoteTimerSideExpires_Init();
    gt_ChooseHunterAllowed_Init();
    gt_VoteTimerHunterExpires_Init();
    gt_VoteButtonPressed_Init();
    gt_UpdateProgressBarAllActivePlayers_Init();
    gt_UpdateProgressBarAllActivePlayersREGAME_Init();
    gt_UpdateProgressBarZealots_Init();
    gt_VerifyBankonHack_Init();
    gt_InitBanks_Init();
    gt_RegameInit_Init();
    gt_RegameLeaveTimerExpires_Init();
    gt_RegameInitTriggers_Init();
    gt_RegameInitVariables_Init();
    gt_RegameLeaveButtonPressed_Init();
    gt_LeaveGameOptionESC_Init();
    gt_CheckPremiumProbe_Init();
    gt_CheckPremiumZealot_Init();
    gt_CodeRegionAdd_Init();
    gt_CodeRegionRemove_Init();
    gt_mysteriousthing_Init();
    gt_barTextCommand_Init();
    gt_BarEnter_Init();
    gt_BarLeave_Init();
    gt_ResourcePerSecondInit_Init();
    gt_ResourcePerSecondUpdater_Init();
    gt_ResourcePerSecondUpdaterOLD_Init();
    gt_TurretLaggTestTrigger_Init();
    gt_NinjaDialog_Init();
    gt_TurretBuff_Init();
    gt_BaseDialog_Init();
    gt_Add_Init();
    gt_Remove_Init();
    gt_FlagRegion1_Init();
    gt_FlagRegion2_Init();
    gt_FlagRegion3_Init();
    gt_FlagRegion4_Init();
    gt_FlagRegion5_Init();
    gt_FlagRegion6_Init();
    gt_FlagRegion7_Init();
    gt_FlagRegion8_Init();
    gt_FlagRegion9_Init();
    gt_FlagRegion10_Init();
    gt_FlagRegion11_Init();
    gt_FlagRegion12_Init();
    gt_FlagRegion13_Init();
    gt_FlagRegion14_Init();
    gt_FlagRegion15_Init();
    gt_NoFlagRegion1_Init();
    gt_buildbase_Init();
    gt_placestructures_Init();
    gt_upgradestructures_Init();
    gt_defenserebuild_Init();
    gt_closedialogz_Init();
    gt_copperbladehelp_Init();
    gt_ironbladehelp_Init();
    gt_steelleather_Init();
    gt_silverreinforce_Init();
    gt_golden_Init();
    gt_Mithrilbone_Init();
    gt_diammega_Init();
    gt_diasuper_Init();
    gt_pulver_Init();
    gt_final_Init();
    gt_HelpMenu_Init();
    gt_HelpRightLeftClose_Init();
    gt_Unitusesabilityshowhideranks_Init();
    gt_InitGameplayOptionsBanks_Init();
    gt_InitGameplayOptionsDialog_Init();
    gt_GameplayOptionsButtonPressed_Init();
    gt_DefaultButtonPressed_Init();
    gt_ReturntoGameButtonPressed_Init();
    gt_DialogItemOptionChecked_Init();
    gt_InitXPBar_Init();
    gt_InitMarketPrices_Init();
    gt_InitChooseHelpSide_Init();
    gt_EnableChooseHelpSide_Init();
    gt_ChooseHelpSidePressed_Init();
    gt_ChooseObserverPressed_Init();
    gt_WaitSpawnHunter_Init();
    gt_InitVoteKick_Init();
    gt_VoteKickPressed_Init();
    gt_KickPlayerPressed_Init();
    gt_SpiritVotePressed_Init();
    gt_RemoverPlayerPressed_Init();
    gt_ForceSalvageFeederPressed_Init();
    gt_KickVoteYesNo_Init();
    gt_KickVoteTimerLabel_Init();
    gt_KickVoteTimerExpires_Init();
    gt_VoteKickCooldownExpires_Init();
    gt_InitProfile_Init();
    gt_ProfileButtonPressed_Init();
    gt_ProfileCloseButtonPressed_Init();
    gt_ProfileButtonsPressed_Init();
    gt_ProfileAchievementsButtonsPressed_Init();
    gt_InitCommonAchievementsProfile_Init();
    gt_InitHumanAchievementsProfile_Init();
    gt_InitVampireAchievementsProfile_Init();
    gt_InitCommonAchievementsLibrary_Init();
    gt_InitProbeAchievementsLibrary_Init();
    gt_InitZealotAchievementsLibrary_Init();
    gt_CheckSpendResourcesAchievements_Init();
    gt_CheckVampireAchievements_Init();
    gt_CheckHumanAchievements_Init();
    gt_CheckCommonAchievements_Init();
    gt_CheckAchievements_Init();
    gt_WriteHoursandresourcesAchievements_Init();
    gt_InitRewardsLibrary_Init();
    gt_InitRewardsProfile_Init();
    gt_CheckStatusofRewards_Init();
    gt_InitLeaderboard_Init();
    gt_RenderLeaderboardTime_Init();
    gt_InitStatsLeaderboard_Init();
    gt_afk_Init();
    gt_afktest_Init();
    gt_AFKDetectTimerExpires_Init();
    gt_AFKDetectPlayer0_Init();
    gt_AFKDetectPlayer1_Init();
    gt_AFKDetectPlayer2_Init();
    gt_AFKDetectPlayer3_Init();
    gt_AFKDetectPlayer4_Init();
    gt_AFKDetectPlayer5_Init();
    gt_AFKDetectPlayer6_Init();
    gt_AFKDetectPlayer7_Init();
    gt_AFKDetectPlayer8_Init();
    gt_AFKDetectPlayer9_Init();
    gt_AFKDetectPlayer10_Init();
    gt_AFKDetectPlayer11_Init();
    gt_AFKDetectPlayer12_Init();
    gt_AFKDetectPlayer13_Init();
    gt_AFKDetectPlayer14_Init();
    gt_AFKDetectPlayer15_Init();
    gt_AnitTrollPAUSEKiller_Init();
    gt_AngryLavaCritter_Init();
    gt_DeathByPenguin_Init();
    gt_DeathByLavaCritter_Init();
    gt_InitAIProbe_Init();
    gt_CheckStage_Init();
    gt_UltraWall_Init();
    gt_MegaWall_Init();
    gt_PowerWall_Init();
    gt_FinalWall_Init();
    gt_TurretLevel7_Init();
    gt_TurretLevel11_Init();
    gt_TurretLevel13_Init();
    gt_TurretLevelFinal_Init();
    gt_UltraMiner_Init();
    gt_LegendaryMiner_Init();
    gt_PerfectMiner_Init();
    gt_LudicrousMiner_Init();
    gt_ReplenishMinerals_Init();
    gt_DominionTrain_Init();
    gt_GenMax_Init();
    gt_BuildaAutomatedMineLevel6_Init();
    gt_BuildaAutomatedMineLevel7_Init();
    gt_BuildaAutomatedMineLevel8_Init();
    gt_UltraWallAchievement_Init();
    gt_MegaWallAchievement_Init();
    gt_PowerWallAchievement_Init();
    gt_FinalWallAchievement_Init();
    gt_TurretLevel7Achievement_Init();
    gt_TurretLevel11Achievement_Init();
    gt_TurretLevel13Achievement_Init();
    gt_UltraMinerAchievement_Init();
    gt_LegendaryMinerAchievement_Init();
    gt_PerfectMinerAchievement_Init();
    gt_GenMaxAchievement_Init();
    gt_AutomatedMineLevel6_Init();
    gt_AutomatedMineLevel7_Init();
    gt_AutomatedMineLevel8_Init();
    gt_Vespene_Init();
    gt_FinalBlade_Init();
    gt_PurchaseUltimateBlade_Init();
    gt_PurchaseSuperGloves_Init();
    gt_PurchaseNanocrystallineDiamondArmor_Init();
    gt_PurchaseDiamondAmulet_Init();
    gt_PurchaseUltimateRegenerationPotion_Init();
    gt_VictoryDefeatConditionsProbeDies_Init();
    gt_VictoryDefeatConditionsZealotDies_Init();
    gt_EnableTrading_Init();
    gt_UnitisSelected_Init();
    gt_GiveMineralstoPlayer_Init();
    gt_GiveVespenetoPlayer_Init();
    gt_GiveBothButton_Init();
    gt_TimerRemoveExpires_Init();
    gt_ProbeLefttheGameAlive_Init();
    gt_ProbeLefttheGameDead_Init();
    gt_ZealotLefttheGameAlive_Init();
    gt_ZealotLefttheGameDead_Init();
    gt_ProbeDies_Init();
    gt_ProbeSpiritDies_Init();
    gt_TimerProbeSpiritDiesExpires_Init();
    gt_ZealotDies_Init();
    gt_HunterDies_Init();
    gt_TimerHunterDiesExpires_Init();
    gt_SpeedRegion_Init();
    gt_ZealotIncome_Init();
    gt_ZealotIncomeKillBonus_Init();
    gt_ArmorOfUnit_Init();
    gt_DamageOfUnit_Init();
    gt_TurnonPrivateCommands_Init();
    gt_TurnoffPrivateCommands_Init();
    gt_GoodGame_Init();
    gt_profilecolor_Init();
    gt_statscolor_Init();
    gt_statsreset_Init();
    gt_autostatsresetzankza_Init();
    gt_zoom_Init();
    gt_scale_Init();
    gt_rank_Init();
    gt_players_Init();
    gt_help_Init();
    gt_takeHunter_Init();
    gt_sellHunter_Init();
    gt_unscale_Init();
    gt_regame_Init();
    gt_name_Init();
    gt_c_Init();
    gt_creset_Init();
    gt_handles_Init();
    gt_handles2_Init();
    gt_penguin_Init();
    gt_meteor_Init();
    gt_cloak_Init();
    gt_muteexperimental_Init();
    gt_poweroverwhelming_Init();
    gt_makezealot_Init();
    gt_revive_Init();
    gt_premium_Init();
    gt_zealot_Init();
    gt_feed_Init();
    gt_spirit_Init();
    gt_hunter_Init();
    gt_kick_Init();
    gt_kickselected_Init();
    gt_salvage_Init();
    gt_salvageselected_Init();
    gt_map_Init();
    gt_speed_Init();
    gt_sethunter_Init();
    gt_say_Init();
    gt_hat_Init();
    gt_attach_Init();
    gt_setscale_Init();
    gt_mine_Init();
    gt_yours_Init();
    gt_hostile_Init();
    gt_spawn_Init();
    gt_freeze_Init();
    gt_unfreeze_Init();
    gt_kill_Init();
    gt_give_Init();
    gt_reveal_Init();
    gt_debug_Init();
    gt_debugclose_Init();
    gt_show_Init();
    gt_test_Init();
    gt_settimescale_Init();
    gt_setbuildername_Init();
    gt_setvampname_Init();
    gt_setbuilderscale_Init();
    gt_setvampscale_Init();
    gt_poweron_Init();
    gt_poweroff_Init();
    gt_swap_Init();
    gt_SwapBuildingSkinsTerran_Init();
    gt_SwapBuildingSkinsProtoss_Init();
    gt_SwapBuildingSkinsDarkProtoss_Init();
    gt_SwapBuildingSkinsZerg_Init();
    gt_BuilderSwapto1Model_Init();
    gt_BuilderSwapto2Model_Init();
    gt_BuilderSwapto3Model_Init();
    gt_BuilderSwapto4Model_Init();
    gt_BuilderSwapto5Model_Init();
    gt_BuilderSwapto6Model_Init();
    gt_BuilderSwapto7Model_Init();
    gt_BuilderSwapto8Model_Init();
    gt_BuilderSwapto9Model_Init();
    gt_BuilderSwapto10Model_Init();
    gt_BuilderSwapto11Model_Init();
    gt_BuilderSwapto12Model_Init();
    gt_BuilderSwapto13Model_Init();
    gt_BuilderSwapto14Model_Init();
    gt_BuilderSwapto15Model_Init();
    gt_BuilderSwapto17_Init();
    gt_BuilderSwapto18_Init();
    gt_BuilderSwapto19_Init();
    gt_BuilderSwapto20Model_Init();
    gt_BuilderSwapto21_Init();
    gt_BuilderSwapto22_Init();
    gt_BuilderSwapto23_Init();
    gt_BuilderSwapto24_Init();
    gt_BuilderSwapto25_Init();
    gt_BuilderSwapto26_Init();
    gt_BuilderSwapto27_Init();
    gt_BuilderSwapto28_Init();
    gt_BuilderSwapto29_Init();
    gt_BuilderSwapto30_Init();
    gt_BuilderSwapto31_Init();
    gt_BuilderSwapto32_Init();
    gt_BuilderSwapto33_Init();
    gt_BuilderSwapto34_Init();
    gt_BuilderSwapto35_Init();
    gt_BuilderSwapto36_Init();
    gt_BuilderSwapto37_Init();
    gt_BuilderSwapto38_Init();
    gt_BuilderSwapto39_Init();
    gt_BuilderSwapto40_Init();
    gt_BuilderSwapto41_Init();
    gt_BuilderSwapto42_Init();
    gt_BuilderSwapto43_Init();
    gt_BuilderSwapto46_Init();
    gt_SpiritSwapRankS1_Init();
    gt_SpiritSwapRankS15_Init();
    gt_SpiritSwapRankS25_Init();
    gt_SpiritSwapRankS50_Init();
    gt_SpiritSwapRankS100_Init();
    gt_BuilderSwapRankS1_Init();
    gt_BuilderSwapRankS5_Init();
    gt_BuilderSwapRankS10_Init();
    gt_BuilderSwapRankS20_Init();
    gt_BuilderSwapRankS25_Init();
    gt_BuilderSwapRankS30_Init();
    gt_BuilderSwapRankS40_Init();
    gt_BuilderSwapRankS50_Init();
    gt_BuilderSwapRankS60_Init();
    gt_BuilderSwapRankS70_Init();
    gt_BuilderSwapRankS75_Init();
    gt_BuilderSwapRankS80_Init();
    gt_BuilderSwapRankS90_Init();
    gt_BuilderSwapRankS100_Init();
    gt_VampireSwaptoModel1_Init();
    gt_VampireSwaptoModel2_Init();
    gt_VampireSwaptoModel3_Init();
    gt_VampireSwaptoModel4_Init();
    gt_VampireSwaptoModel5_Init();
    gt_VampireSwaptoModel6_Init();
    gt_VampireSwaptoModel7_Init();
    gt_VampireSwaptoModel8_Init();
    gt_VampireSwaptoModel9_Init();
    gt_VampireSwaptoModel10_Init();
    gt_VampireSwaptoModel11_Init();
    gt_VampireSwaptoModel12_Init();
    gt_VampireSwaptoModel13_Init();
    gt_VampireSwaptoModel14_Init();
    gt_VampireSwaptoModel15_Init();
    gt_VampireSwaptoModel16_Init();
    gt_VampireSwaptoModel17_Init();
    gt_VampireSwaptoModel18_Init();
    gt_VampireSwaptoModel19_Init();
    gt_VampireSwaptoModel20_Init();
    gt_VampireSwaptoModel21_Init();
    gt_VampireSwaptoModel22_Init();
    gt_VampireSwaptoModel23_Init();
    gt_VampireSwaptoModel24_Init();
    gt_VampireSwaptoModel25_Init();
    gt_VampireSwaptoModel26_Init();
    gt_VampireSwaptoModel27_Init();
    gt_VampireSwaptoModel28_Init();
    gt_VampireSwaptoModel29_Init();
    gt_VampireSwapRankS1_Init();
    gt_VampireSwapRankS5_Init();
    gt_VampireSwapRankS10_Init();
    gt_VampireSwapRankS15_Init();
    gt_VampireSwapRankS20_Init();
    gt_VampireSwapRankS25_Init();
    gt_VampireSwapRankS30_Init();
    gt_VampireSwapRankS35_Init();
    gt_VampireSwapRankS40_Init();
    gt_VampireSwapRankS45_Init();
    gt_VampireSwapRankS50_Init();
    gt_obs_Init();
    gt_ObserveUnitDeselected_Init();
    gt_InitLearnAbilities_Init();
    gt_ProbeLearnsAbility_Init();
    gt_ProbeFastLearn_Init();
    gt_ninjaonoff_Init();
    gt_ProbeSpiritUsesInvis_Init();
    gt_ProbeInvisExpires_Init();
    gt_PerfectMinerCancel_Init();
    gt_AutomatedMineLevel8Cancel_Init();
    gt_FinalTurretCancel_Init();
    gt_RepositoryCancel_Init();
    gt_SalvageTurretLevel13_Init();
    gt_SalvageTurretLevel14_Init();
    gt_SalvageFinalWall_Init();
    gt_Sacrifice_Init();
    gt_Buy10Minerals_Init();
    gt_Buy200Minerals_Init();
    gt_Buy4000Minerals_Init();
    gt_Sell10Minerals_Init();
    gt_Sell200Minerals_Init();
    gt_Sell4000Minerals_Init();
    gt_SalvageAllOrder_Init();
    gt_PlaceFlagRegion_Init();
    gt_SelectShopEnable_Init();
    gt_SelectShopDisable_Init();
    gt_SelectShopUsed_Init();
    gt_ZealotUsesInvis_Init();
    gt_ZealotInvisExpires_Init();
    gt_ZealotUsesTeleportAbility_Init();
    gt_suggesteditems_Init();
    gt_suggesteditems2_Init();
    gt_UnitSellItem_Init();
    gt_Buy_Init();
    gt_HunterInventory_Init();
    gt_SellHotkey_Init();
    gt_MineralPalletLevel1_Init();
    gt_MineralPalletLevel2_Init();
    gt_MineralPalletLevel3_Init();
    gt_MineralPalletLevel4_Init();
    gt_MineralPalletLevel5_Init();
    gt_MineralPalletLevel6_Init();
    gt_MineralPalletLevel7_Init();
    gt_MineralPalletLevel8_Init();
    gt_MineralPalletLevel9_Init();
    gt_EnemyUnitsGainsItem_Init();
    gt_MagicImmuneisApplied_Init();
    gt_UnitGainsBootsofSpeedItem_Init();
    gt_UnitLossesBootsofSpeedItem_Init();
    gt_UnitGainsHPItem_Init();
    gt_UnitLossesHPItem_Init();

    // Final's Work
    gt_LudiCancel_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}

// Final's Work

void TrainModeSetResources(int lp_player){
    if(PlayerGroupHasPlayer(gv_playerGroupProbes, lp_player)){
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 1216);
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 117660);
    }
    else{
        return;
    }
}

void InitTrainMode(){
    int lv_player;

    for(lv_player = 1; lv_player <= gv_MaxPlayers; lv_player += 1){
        TrainModeSetResources(lv_player);
    }
    gv_startMineralsZealot = 150000;
    //gv_gameTimeMinutes = 12;
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
}